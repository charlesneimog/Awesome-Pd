{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<p>   WebSite that tries to list, with descriptiors, music examples, and links, all the objects, externals, and libraries available for PureData. </p> Random Objects Random Videos"},{"location":"deken/","title":"Deken: Package Management for Pure Data Externals","text":"<p><code>Deken</code> is the easiest way to download and install external objects in Pure Data (Pd).</p> <p>Open Deken from Pd\u2019s menu:</p> <ul> <li>Pd <code>0.56</code> and later: <code>Tools \u2192 Find Externals</code>.</li> <li>Pd earlier versions: <code>Help \u2192 Find Externals</code>.</li> </ul> <p>The video below shows how to install <code>giga.rev~</code> using Deken.</p>"},{"location":"submit/","title":"Submit","text":"Submit Objects, Libraries and Pieces <p>We, Pd users, are a large and diverse community. Many artistic and research projects are developed by Pd users, programmers, and people from different backgrounds. However, we are missing a centralized place to share these contributions --- a space where people can submit their objects, pieces, and patches, and where the community can truly grow and be nourished by them.</p> New/Edit Object New/Edit Piece"},{"location":"todo/","title":"Todo","text":""},{"location":"todo/#missing-objects-on-cyclone","title":"Missing objects on cyclone","text":"<p>['reson~', 'capture', 'uzi', 'uzi', 'uzi', 'thresh~', 'rdiv~', 'notequals~', 'bitor~', 'append', 'maximum~', 'plusequals~', 'cycle~', 'cycle~', 'xnotein', 'wave~', 'rdiv', 'borax', 'comb~', 'frameaccum~', 'delay~', 'delay~', 'substitute', 'past', 'rminus~', 'train~', 'lessthaneq~', 'equals~', 'listfunnel', 'forward', 'lookup~', 'pink~', 'pv', 'pv', 'next', 'next', 'match', 'match', 'match', 'midiformat', 'midiformat', 'xbendin2', 'poltocar', 'index~', 'peak', 'svf~', 'switch', 'switch', 'scale~', 'seq', 'rand~', 'downsamp~', 'xbendout2', 'trunc~', 'poltocar~', 'onepole~', 'tosymbol', 'active', 'cross~', 'iter', 'buffir~', 'mstosamps~', 'acosh', 'poke~', 'xbendout', 'vectral~', 'lessthan~', 'sinh', 'spike~', 'onebang', 'xnoteout', 'prob', 'bitnot~', 'thresh', 'universal', 'universal', 'acos', 'split', 'peek~', 'overdrive~', 'mousestate', 'mean', 'decode', 'midiparse', 'midiparse', 'midiparse', 'tanh~', 'tanh~', 'buffer~', 'selector~', 'modulo~', 'cartopol~', 'teeth~', 'gate', 'sustain', 'sustain', 'fromsymbol', 'zerox~', 'trough', 'minmax~', 'edge~', 'decide', 'counter', 'gate~', 'bitxor~', 'average~', 'bondo', 'grab', 'pak', 'count~', 'xbendin', 'funbuff', 'histo', 'play~', 'play~', 'accum', 'cosh', 'delta~', 'capture~', 'rminus', 'speedlim', 'drunk', 'degrade~', 'linedrive', 'funnel', 'loadmess', 'minimum~', 'buddy', 'spray', 'unjoin', 'join', 'greaterthaneq~', 'tanh', 'mousefilter']</p>"},{"location":"todo/#missing-objects-on-else","title":"Missing objects on else","text":"<p>['lop2~', 'zerocross~', 'sysrt.in', 'floor~', 'separate', 'mag', 'suspedal', 'hot', 'stack', 'out4~', 'out4~', 'bin.shift~', 'blocksize~', 'out.mc~', 'out.mc~', 'ikeda~', 'trig2bang~', 'scala', 'interpolate', 'interpolate', 'duck~', 'impseq~', 'float2bits', 'float2bits', 'loop', 'loop', 'route2', 'iterate', 'rampnoise', 'order', 'pan.mc~', 'merge~', 'fbsine2~', 'spread~', 'pgm.in', 'detect~', 'trig2bang', 'nmess', 'lin2db', 'bangdiv', 'xselect~', 'peak~', 'car2pol~', 'car2pol~', 'retrieve', 'retrieve', 'retrieve', 'retrieve', 'mix4~', 'floor', 'highpass~', 'adsr~', 'rotate', 'randpulse', 'randpulse', 'pol2car', 'dollsym', 'rec.file~', 'voices', 'pi', 'pi', 'pi', 'replace', 'polymetro~', 'keypress', 'balance~', 'openfile', 'status', 'decay~', 'noteinfo', 'rint~', 'lfnoise', 'add', 'sin~', 'changed~', 'latoocarfian~', 'drive~', 'batch.write~', 'ffdelay~', 'out~', 'out~', 'out~', 'plate.rev~', 'status~', 'lcm', 'rand.list', 'impulse', 'grain.synth~', 'pimp~', 'vu~', 'chrono', 'sr~', 'rampnoise~', 'beat~', 'wrap2', 'gbman~', 'morph', 'morph', 'lace~', 'trunc~', 'mov.rms~', 'lincong~', 'buffer', 'above', 'sfload', 'click', 'hann~', 'gatehold~', 'routetype', 'batch.rec~', 'gatedelay~', 'ping.pong~', 'gcd', 'bicoeff2', 'scramble', 'svfilter~', 'bl.imp~', 'mov.avg', 'range.hsl', 'flanger~', 'sfz~', 'eq~', 'stepnoise~', 'lastvalue', 'zbiplot', 'midi.clock', 'expand~', 'standard~', 'pulsecount~', 'reverse', 'deg2rad', 'trighold~', 'e', 'e', 'e', 'rad2deg', 'args', 'graph~', 'cusp~', 'factor', 'gate2imp~', 'freq.shift~', 'freq.shift~', 'freq.shift~', 'hip.bw~', 'glide2~', 'out8~', 'out8~', 'lowshelf~', 'chorus~', 'routeall', 'routeall', 'pvoc.player~', 'crackle~', 'dispatch', 'slew2', 'fbdelay~', 'limit', 'count', 'add~', 'drunkard', 'canvas.name', 'tanh~', 'swap2', 'gaterelease~', 'avg', 'properties', 'xgate.mc~', 'lfnoise~', 'lfnoise~', 'lfnoise~', 'pulse', 'grain.live~', 'loadbanger', 'xfade.mc~', 'selector', 'pan~', 'bandstop~', 'highshelf~', 'allpass.2nd~', 'samps2ms', 'match~', 'asr~', 'slew', 'meter', 'bpm', 'midi2freq', 'circuit~', 'circuit~', 'coeff2pz', 'biplot', 'rand.f~', 'crossover~', 'mix2~', 'pan2~', 'pz2coeff', 'schmitt', 'mtx.ctl', 'knob', 'bandpass~', 'susloop~', 'quad~', 'xgate~', 'insert', 'freq2midi', 'metronome~', 'brickwall~', 'brickwall~', 'lop.bw~','toggleff~', 'smooth2', 'above~', 'pol2car~', 'randpulse2', 'wrap2~', 'schmitt~', 'rec', 'car2pol', 'dir', 'nop~', 'meter4~', 'ceil', 'changed2~', 'henon~', 'logistic~', 'pan4~', 'lastvalue~', 'fold~', 'sum~', 'sendmidi', 'range~', 'downsample~', 'euclid', 'symbol2any', 'sysrt.out', 'ms2samps', 'sequencer~', 'pgm.out', 'lowpass~', 'fader~', 'free.rev~', 'glide', 'mov.avg~', 'mov.avg~', 'break', 'break']</p>"},{"location":"devs/pd.cmake/","title":"pd.cmake","text":"<p><code>pd.cmake</code> is a collection of CMake scripts designed to simplify the process of creating build projects for Pure Data (Pd) externals. It provides a unified, cross-platform way to generate build files (Makefiles, Xcode projects, Visual Studio solutions, etc.) for Pd externals using CMake.  </p>"},{"location":"devs/pd.cmake/#purpose","title":"Purpose","text":"<ul> <li>Automates the setup of CMake projects for Pd external development.  </li> <li>Ensures compatibility across multiple operating systems and IDEs.  </li> <li>Reduces boilerplate by providing reusable CMake modules specific to Pd.  </li> </ul>"},{"location":"devs/pd.cmake/#use-case","title":"Use caseVideos","text":"<p>Instead of manually writing platform-specific build scripts, developers can use <code>pd.cmake</code> to quickly generate the necessary build environment for compiling Pd externals.</p> Contributors <ul> <li> Download here.</li> <li> Developed by Pierre Guiellot, Charles K. Neimog, and others.</li> <li> Report Bugs here!</li> <li> Available for  .</li> </ul>"},{"location":"devs/pdlibbuilder/","title":"pd-lib-builder","text":"<p><code>Makefile.pdlibbuilder</code> is a helper Makefile designed to streamline the building of Pure Data (Pd) external libraries.  </p>"},{"location":"devs/pdlibbuilder/#key-points","title":"Key points","text":"<ul> <li>Created by Katja Vetter (2015) and released to the public domain.  </li> <li>Developed further as a Pd community project.  </li> <li>Inspired by Hans Christoph Steiner\u2019s Makefile Template and Stephan Beal\u2019s ShakeNMake.  </li> <li>Requires GNU make \u2265 3.81.  </li> </ul>"},{"location":"devs/pdlibbuilder/#purpose","title":"PurposeVideos","text":"<ul> <li>Provides a standardized and portable way to compile Pd externals.  </li> <li>Handles platform differences (Linux, macOS, Windows) automatically.  </li> <li>Reduces complexity compared to writing custom Makefiles.</li> </ul> <p>Use <code>msys2</code> on Windows</p> <p>On windows it is easiear to use <code>msys2</code> to build objects with <code>pd-lib-builder</code>. You can install <code>msys2</code> running <code>winget install msys2.msys2</code> or check https://www.msys2.org/.</p> Contributors <ul> <li> Download here.</li> <li> Developed by Pierre Guiellot, Charles K. Neimog, and others.</li> <li> Report Bugs here!</li> <li> Available for  .</li> </ul>"},{"location":"libraries/","title":"Libraries","text":"<ul> <li> zexy <code>zexy</code> provides several addon objects for the Pd computer music system, including (but not limited to) objects for message handling (construction, parsing, control flow), signal handling (synthesis, analysis, comparison) et al.</li> <li> else <code>ELSE</code> is a big library of externals that extends the performance of Pd.</li> <li> flucoma The Fluid Corpus Manipulation project (FluCoMa) instigates new musical ways of exploiting ever-growing banks of sounds and gestures within the digital composition process, by bringing breakthroughs in signal decomposition, DSP, and machine learning to the toolset of techno-fluent computer composers, creative coders, and digital artists..</li> <li> cyclone <code>Cyclone</code> is a library for Pure Data (Pd) that provides objects mimicking those in Max/MSP.</li> <li> pmpd <code>pmpd</code> is a collection of objects for Pd (Pure Data), enabling real-time simulations of physical phenomena.</li> <li> timbreIDLib <code>timbreIDLib</code> is a library of audio analysis externals for Pure Data.</li> <li> pd-psycho .</li> <li> fftease <code>FFTease</code> is a collection of objects designed to facilitate spectral sound processing in Max and Pd.</li> <li> piro <code>piro</code> is Pd-port of <code>irmeasure~</code> and <code>multiconvolve~</code> from the HISSTools Impulse Response Toolbox (HIRT) \u00b7 Stands for Pd Impulse Response Objects, or \"fire\" (ancient Greek), or sounds like \"Pirro\" (Pyrrhus) \u2013 since this port took a very long period!.</li> <li> neimog pd-neimog is a collection of objects, tools, and integrations for Pure Data (Pd) that I use in my work.</li> </ul>"},{"location":"objects/","title":"Objects","text":"<p>In this section we list all the objects submit for the project. Note that, if there is some great object is missing, please submit it using Submit form. It is very simple and easy. If you did some piece, publish article or recorded a Video for some object and it is not listed here also submit it. </p> <p>AI Classification</p> <p>These libraries are extensive, and the first step involves AI-based classification. If you notice an error, please click \"Submit\" enter the object name, and update its description and classification.</p> Random Objects"},{"location":"objects/additive/cavoc27~/","title":"cavoc27~","text":"<p>The <code>cavoc27~</code> object generates audio spectra using a 27-rule cellular automaton. It can interpolate between spectra, freeze the current spectrum, and transpose its output, especially when using its internal oscillator bank for resynthesis. Additionally, <code>cavoc27~</code> can capture external audio spectra to use as a tuning source, allowing for dynamic interaction with other audio signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>cavoc27~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/additive/cavoc~/","title":"cavoc~","text":"<p>The <code>cavoc~</code> object generates audio spectra using an 8-rule cellular automaton. It can be triggered by an internal clock or external bangs, allowing for dynamic control over spectral density, frequency range, and phase transposition. This object is ideal for creating evolving and complex timbres through algorithmic synthesis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>cavoc~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/additive/enrich~/","title":"enrich~","text":"<p>The <code>enrich~</code> object performs additive synthesis by generating an oscillator bank. It can resynthesize signals, allowing for the addition of harmonics and manipulation of frequency ranges. Users can draw directly into an array to define arbitrary waveforms for synthesis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>enrich~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/additive/oscbank~/","title":"oscbank~","text":"<p><code>oscbank~</code> is a Pure Data object that functions as a bank of <code>sine~</code> oscillators, allowing for the creation of complex tones by specifying lists of partials, amplitudes, and phases. It supports a frequency multiplier to control the fundamental, dynamic updates to its parameters with ramp times, and multichannel output for individual oscillator access.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>oscbank~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/algorithmic_composition/euclid/","title":"euclid","text":"<p>The <code>euclid</code> object implements the Euclidean rhythm algorithm, which divides a given number of steps into a specified number of hits with an optional rotation. It outputs bangs for hits and rests, and a float (1 for hit, 0 for rest) to generate rhythmic patterns.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>euclid</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/algorithmic_composition/rand.hist/","title":"rand.hist","text":"<p>The <code>rand.hist</code> object generates weighted random numbers based on an internal histogram, allowing control over the probability of each output. It can produce sequences with or without repetition, and bangs its right outlet when a sequence is exhausted. The histogram can be dynamically updated using messages like <code>inc</code>, <code>dec</code>, <code>set</code>, <code>eq</code>, <code>clear</code>, and <code>size</code>, and the random sequence can be seeded for reproducibility.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rand.hist</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/algorithmic_composition/speed/","title":"speed","text":"<p>The <code>speed</code> object in Pure Data enables dynamic tempo changes, such as accelerando or ritardando. It calculates intermediate BPM values and total time based on a target BPM and a specified duration in beats. This object is typically used with <code>metro</code> to create smooth and controlled tempo transitions in musical contexts.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>speed</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/ambisonics/saf.decoder~/","title":"saf.decoder~","text":"<p>The <code>saf.decoder~</code> object in Pure Data implements a frequency-dependent Ambisonic decoder for loudspeakers and headphones. It supports up to 128 user-defined loudspeaker directions or presets for common 2D and 3D layouts. For headphones, it performs virtual loudspeaker decoding using interpolated HRTFs, with support for importing custom HRIRs via the SOFA standard. The decoder allows different settings for low and high frequencies with a user-defined crossover, offering integrated methods such as AllRAD, EPAD, and Mode-Matching, along with max-rE spatial weighting. It also provides options for adjusting decoding order and normalization (EP/AP) to maintain consistent loudness, which is useful for both practical and creative applications.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>neimog</code> and install it. Then create an object with <code>declare -lib neimog -path neimog</code>. Finally, use <code>saf.decoder~</code> or any other object from <code>neimog</code>.</p></li> <li> Library developed mainly by Charles K. Neimog.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/ambisonics/saf.encoder~/","title":"saf.encoder~","text":"<p>The <code>saf.encoder~</code> object in Pure Data implements the Ambisonic encoder from the SPARTA VST3 plugins suite. It encodes up to 128 input channels into Ambisonic signals at specified directions, creating a synthetic sound scene whose spatial resolution depends on the encoding order. Presets are included for common multichannel formats (e.g., 22.x) to 1st\u201310th order Ambisonics. The object also provides a mouse-driven panning window with an equirectangular sphere representation for visualizing and adjusting azimuth and elevation of sources.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>neimog</code> and install it. Then create an object with <code>declare -lib neimog -path neimog</code>. Finally, use <code>saf.encoder~</code> or any other object from <code>neimog</code>.</p></li> <li> Library developed mainly by Charles K. Neimog.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/audio_io/bin.shift~/","title":"bin.shift~","text":"<p>The <code>bin.shift~</code> object is designed for spectral processing, allowing users to shift frequency bins of an incoming signal. It takes a signal to be processed and a float to specify the number of bins to shift, with positive values shifting right and negative values shifting left. An optional \"wrap\" mode can be enabled to prevent samples outside the bounds from being zeroed.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bin.shift~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/audio_io/nyquist~/","title":"nyquist~","text":"<p>The <code>nyquist~</code> object reports the Nyquist frequency, which is half of Pure Data's global audio sample rate, or its corresponding period. It outputs this value in various units (Hz, kHz, milliseconds, seconds) upon patch loading, receiving a <code>bang</code>, or when the sample rate changes. This object is essential for obtaining fundamental audio rate information within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>nyquist~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/audio_io/plaits.m~/","title":"plaits.m~","text":"<p><code>plaits.m~</code> is a versatile multi-synthesis engine for Pure Data, wrapping the functionality of Mutable Instruments' Plaits module. It offers a wide array of synthesis models, including physical modeling, granular, additive, and various oscillator types, controllable via signal inputs for frequency, trigger, level, and modulation. The object supports both monophonic and polyphonic operation, with an internal LowPass Gate (LPG) for dynamic shaping in many of its modes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>plaits.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/audio_io/sr~/","title":"sr~","text":"<p>The <code>sr~</code> object in Pure Data allows users to set and retrieve the global audio sample rate. It outputs the sample rate frequency (in Hz or kHz) or period (in ms or seconds) upon initialization, receiving a bang, or when the sample rate changes. Unlike <code>samplerate~</code>, <code>sr~</code> always reflects the system's global sample rate, not local up/downsampling rates.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sr~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/binaural/earplug~/","title":"earplug~","text":"<p><code>earplug~</code> is a binaural filter based on KEMAR impulse measurement which allows you to spatialize a sound in realtime. It basically takes the KEMAR dummy head data set, and interpolates 368 locations where HRTF measurement exists in a spherical surface. You get azimuth 0 - 360 degrees and elevation -40 - 90 degrees.</p> <ul> <li> Download via Deken.</li> <li> Library developed mainly by Pei Xiang, Jorge Castellanos, Hans-Christoph Steiner, Dan Wilcox, Chikashi Miyama.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/binaural/sofalizer~/","title":"sofalizer~","text":"<p><code>SOFAlizer~</code> is a low-cost, interactive binaural system using real-time HRTF processing with Pure Data, supporting SOFA files and low-latency head tracking.</p> <ul> <li> Download here or use Deken..</li> <li> Library developed mainly by Pei Xiang, Jorge Castellanos, Hans-Christoph Steiner, Christian Klemenschitz.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/chorus_flanger_phaser/chorus.m~/","title":"chorus.m~","text":"<p><code>chorus.m~</code> is a wrapper object for the <code>chorus~</code> audio effect from the ELSE library. It provides a simple chorus effect for audio signals, functioning similarly to a stompbox pedal. This object is designed for direct audio processing and currently does not support control voltage (CV) input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>chorus.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/chorus_flanger_phaser/chorus~/","title":"chorus~","text":"<p>The <code>chorus~</code> object is a simple mono audio effect that creates a chorus sound by combining the input signal with a slightly delayed and pitch-modulated version of itself. It utilizes an internal comb filter and offers controls for modulation rate, depth, and the dry/wet mix to adjust the effect's intensity.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>chorus~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/chorus_flanger_phaser/flanger.m~/","title":"flanger.m~","text":"<p>The <code>flanger.m~</code> object is a multichannel audio effect that acts as a wrapper for the <code>flanger~</code> object from the ELSE library. It provides a simple flanging effect, similar to a guitar pedal, and currently lacks control voltage (CV) input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>flanger.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/chorus_flanger_phaser/flanger~/","title":"flanger~","text":"<p>The <code>flanger~</code> object is a simple audio effect that applies flanging to an input signal. It allows control over the modulation rate (in Hz), depth (in milliseconds), and a feedback/feedforward coefficient. Users can also select between sine and triangular waveforms for the internal modulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>flanger~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/chorus_flanger_phaser/phaser.m~/","title":"phaser.m~","text":"<p>The <code>phaser.m~</code> object is a wrapper around the <code>phaser~</code> object from the ELSE library. It functions as a simple phaser module, akin to a stompbox pedal, designed to apply phase modulation effects to audio signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>phaser.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/chorus_flanger_phaser/phaser~/","title":"phaser~","text":"<p><code>phaser~</code> is a mono phaser audio effect that uses an internal allpass filter, whose order can be set by the number of stages. It requires a signal LFO to control its frequency sweep, and allows control over resonance and dry/wet mix.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>phaser~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/chorus_flanger_phaser/tremolo~/","title":"tremolo~","text":"<p>The <code>tremolo~</code> object performs amplitude modulation on an input signal. It allows control over the tremolo frequency and depth, with a depth of 1 achieving classic amplitude modulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>tremolo~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/chorus_flanger_phaser/vibrato~/","title":"vibrato~","text":"<p>The <code>vibrato~</code> object applies a vibrato effect to an incoming audio signal. It functions as a pitch shifter, modulating the pitch deviation in cents using an internal Low Frequency Oscillator (LFO). Users can control the vibrato rate in Hertz and the transposition depth in cents via float inputs.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>vibrato~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/control_i_o/gemkeyboard/","title":"gemkeyboard","text":"<p>The <code>gemkeyboard</code> object captures keyboard events occurring within a GEM window. It outputs a <code>KeyCode</code> for each <code>KEY_DOWN</code> event, representing the pressed key. Users should be aware that <code>KeyCode</code> values may vary across different operating systems (Windows, Linux, OSX).</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemkeyboard</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/control_i_o/gemkeyname/","title":"gemkeyname","text":"<p>The <code>gemkeyname</code> object captures keyboard events occurring within the GEM window. It outputs a symbolic description of the pressed key and its state (1 for KEY_DOWN, 0 for KEY_UP). This object is useful for controlling GEM patches using keyboard input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemkeyname</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/control_i_o/gemmouse/","title":"gemmouse","text":"<p>The <code>gemmouse</code> object captures and outputs mouse events occurring within a GEM (Graphics Environment for Multimedia) window. It provides the X and Y pixel coordinates of the mouse cursor, with (0,0) at the top-left, and the state (pressed/released) of the left, middle, and right mouse buttons. Coordinates can optionally be normalized.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemmouse</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/control_i_o/gemtablet/","title":"gemtablet","text":"<p>The <code>gemtablet</code> object in Pure Data interfaces with and responds to events from a graphics tablet. It allows users to integrate input such as pen position and pressure into their Pure Data patches, primarily for interactive graphical applications within GEM.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemtablet</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/control_i_o/lpt/","title":"lpt","text":"<p>The <code>lpt</code> object in Pure Data allows writing and reading data to and from a computer's parallel port. It can write 8-bit words and read input bits, enabling direct hardware interfacing. Usage varies by operating system, often requiring specific drivers or root privileges, and it is not supported on macOS.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>lpt</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/control_io/canvas.mouse/","title":"canvas.mouse","text":"<p><code>canvas.mouse</code> captures mouse click status and coordinates when interacting with a Pure Data canvas. It supports an optional depth argument to retrieve information from parent patches and a position mode to reset coordinates relative to a subpatch's position. Additionally, it can be configured to output data even in edit mode.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>canvas.mouse</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/control_io/keycode/","title":"keycode","text":"<p>The <code>keycode</code> object outputs keyboard key codes based on their physical location, making it layout independent. Its right outlet provides the key code, while the left outlet indicates the key's status (1 for pressed, 0 for released). It's important not to change the keyboard layout after loading the object.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>keycode</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/control_io/keypress/","title":"keypress","text":"<p>The <code>keypress</code> object detects presses of a single computer keyboard key, outputting either a <code>bang</code> or a toggle (1 for pressed, 0 for released). It can be configured with a specific key symbol or dynamically \"learn\" a key press, saving it as an argument. The object filters out auto-repeated key presses and those made in edit mode, making it suitable for interactive control.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>keypress</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/control_io/mouse/","title":"mouse","text":"<p>The <code>mouse</code> object captures real-time mouse interaction, outputting its click status (1 for pressed, 0 for released) and current X and Y coordinates. It can be reset to zero coordinates using the <code>zero</code> or <code>reset</code> messages. For coordinates relative to a specific patch window, consider using <code>canvas.bounds</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>mouse</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/control_io/mousefilter/","title":"mousefilter","text":"<p>The <code>mousefilter</code> object controls the flow of messages based on mouse button activity. It blocks all incoming messages while the mouse button is held down, and outputs the last received message only when the mouse button is released. This allows for interactive gating of data streams using mouse clicks.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>mousefilter</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/control_io/mousestate/","title":"mousestate","text":"<p>The <code>mousestate</code> object reports real-time mouse data, including click status, cursor position (x, y), and movement deltas. It offers three coordinate modes (screen, patch, or front-most patch relative) and can be polled manually or automatically for position updates. This object is useful for creating interactive patches that respond to mouse input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>mousestate</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/control_io/tap/","title":"tap","text":"<p>The <code>tap</code> object detects tempo by analyzing successive bangs, typically from user input. The first bang arms the object, and the second bang outputs the detected tempo, which can be in BPM (default) or milliseconds. Clicking the object directly acts as a bang.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>tap</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/a.rotate/","title":"a.rotate","text":"<p>The <code>a.rotate</code> object in Pure Data appends a number to the end of an array, making it useful for tracking or visualizing the history of sound parameters over time.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>neimog</code> and install it. Then create an object with <code>declare -lib neimog -path neimog</code>. Finally, use <code>a.rotate</code> or any other object from <code>neimog</code>.</p></li> <li> Library developed mainly by Charles K. Neimog.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/any2list/","title":"any2list","text":"<p>The <code>any2list</code> object converts any incoming message into a list, standardizing various message types into a list format for further processing. It also passes through messages that are already lists or other types without modification, making it useful for flexible data handling within a patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>any2list</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/args/","title":"args","text":"<p>The <code>args</code> object in Pure Data allows abstractions to load and dynamically manage their creation arguments. It can retrieve the current arguments, set new ones, and optionally split them using a break character for further routing. This object is essential for creating flexible and configurable Pure Data abstractions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>args</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/batch.write~/","title":"batch.write~","text":"<p><code>batch.write~</code> is a convenient abstraction built upon <code>tabwriter~</code> designed for recording audio signals into Pure Data arrays. It allows users to specify the target array name and the number of channels (up to 64) to record. A bang message triggers the recording of the entire array, and another bang is output when recording completes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>batch.write~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/buffer/","title":"buffer","text":"<p>The <code>buffer</code> object in Pure Data functions similarly to the <code>array</code> object, primarily for storing and manipulating numerical data. It allows users to resize and set array values using lists, and can output the array's contents when triggered by a <code>bang</code>. Its main purpose is to manage data arrays within a patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>buffer</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/capture/","title":"capture","text":"<p>The <code>capture</code> object stores a sequential list of incoming floats and symbols, acting as a data buffer. It allows users to view, edit, and save the stored contents to a file, with options for display formatting and numerical precision. When its maximum capacity is reached, <code>capture</code> operates on a first-in, first-out (FIFO) basis, dropping the oldest item.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>capture</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/coll/","title":"coll","text":"<p>The <code>coll</code> object stores and manages collections of messages at integer or symbol addresses. It provides extensive functionality for manipulating this data, including inserting, deleting, sorting, and swapping entries. <code>coll</code> can also read from and write to files, and multiple instances can share the same data collection, with threaded file operations to prevent audio dropouts.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>coll</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/combine/","title":"combine","text":"<p>The <code>combine</code> object collects incoming messages into a single list if they arrive within a specified time interval. It appends each new message to previously stored items, forming a consolidated list. A negative time value prevents any combination, while a zero time allows immediate sequential messages to be grouped.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>combine</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/delete/","title":"delete","text":"<p><code>delete</code> removes one or more elements from an input message (list). It uses an index (1-based, negative for wrapping) and a count to specify which elements to remove. The object outputs the remaining elements on its left outlet and the deleted elements (or a bang on failure) on its right outlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>delete</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/fifop/","title":"fifop","text":"<p>The <code>fifop</code> object implements a First-In-First-Out (FIFO) queue system that manages multiple internal queues, each capable of being assigned a floating-point priority. It stores incoming lists and outputs them in order of priority, then FIFO order, upon receiving a <code>bang</code> message. This object is primarily used for managing and prioritizing sequences of data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>fifop</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/fluid.bufcompose/","title":"fluid.bufcompose","text":"<p>The <code>fluid.bufcompose</code> object copies and combines audio data from a source buffer/array to a destination buffer/array, applying a specified gain. It offers fine-grained control over frame and channel selection for both source and destination, enabling tasks like multichannel mixing, stereo format conversion, and precise buffer manipulation. It can also mix new content with existing data in the destination buffer using a <code>destgain</code> attribute.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufcompose</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/fluid.bufinfo/","title":"fluid.bufinfo","text":"<p>The <code>fluid.bufinfo</code> object is a utility for inspecting <code>fluid.multiarray</code> objects and other arrays/buffers. It reports on their validity, size in frames, and number of channels, facilitating the management and understanding of dynamically sized, multichannel data structures within Pure Data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufinfo</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/fluid.bufselectevery/","title":"fluid.bufselectevery","text":"<p>The <code>fluid.bufselectevery</code> object extracts specific frames and/or channels from a buffer at regular intervals. It allows for sampling data, such as every Nth frame or every Mth channel, making it useful for preparing or processing data within a larger analysis or synthesis workflow.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufselectevery</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/fluid.dataset/","title":"fluid.dataset","text":"<p>The <code>fluid.dataset</code> object acts as a versatile container for associating data points with unique identifiers, crucial for FluCoMa data analysis. It stores collections of data points, all sharing the same dimensionality, and facilitates operations such as adding, updating, deleting, and retrieving data. This object is particularly useful for managing audio descriptor data and can perform nearest neighbor queries on its stored data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.dataset</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/fluid.ds2text/","title":"fluid.ds2text","text":"<p>The <code>fluid.ds2text</code> object is a utility for converting datasets into a text format within Pure Data. It allows for storing data points from an array into a dataset and subsequently transforming that dataset into a readable text object. This is useful for inspecting or further processing dataset contents as text.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.ds2text</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/fluid.grid/","title":"fluid.grid","text":"<p>The <code>fluid.grid</code> object maps a set of 2D points from a <code>fluid.dataset</code> into a rectangular grid. It allows control over the grid's resolution via oversampling and can constrain dimensions using an 'extent' attribute, making it useful for organizing data for controllers or spatial arrangements.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.grid</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/fluid.kdtree/","title":"fluid.kdtree","text":"<p>The <code>fluid.kdtree</code> object implements a K-dimensional tree for efficient nearest-neighbor searches within multi-dimensional datasets. It allows querying for points based on a specified number of neighbors or a search radius, making it suitable for tasks like mapping input to similar data points in an analysis space.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.kdtree</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/fluid.multiarray/","title":"fluid.multiarray","text":"<p>The <code>fluid.multiarray</code> object creates and manages multi-channel arrays, allowing users to store and retrieve lists of values across multiple independent channels. It provides a structured way to handle collections of data, similar to a multi-dimensional array, useful for organizing various types of signals or parameters.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.multiarray</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/funbuff/","title":"funbuff","text":"<p>The <code>funbuff</code> object stores and manages ordered pairs of x/y integers, functioning as a lookup table or a simple function buffer. It supports operations like setting, retrieving, deleting, and interpolating values, along with saving/loading its contents to/from files. Additionally, it provides clipboard functionalities for manipulating the stored data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>funbuff</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/gemlist/","title":"gemlist","text":"<p>The <code>gemlist</code> object stores a list of GEM graphics commands or data. It outputs the stored <code>gemlist</code> when it receives a <code>bang</code> message, and can be updated by sending a new <code>gemlist</code> to its inlets. This object is primarily used for managing and re-triggering sequences of GEM operations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemlist</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/glue/","title":"glue","text":"<p>The <code>glue</code> object combines two \"packages\" or messages, typically by appending or prepending one to the other. It accepts any type of data in its inlets and can be initialized with a creation argument to preset the second inlet's content. This object is useful for manipulating data structures or message lists.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>glue</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/index~/","title":"index~","text":"<p>The <code>index~</code> object reads values from an array without interpolation, similar to <code>tabread~</code> but with rounded index values. It supports multi-channel arrays (up to 64 channels), which are accessed via a <code>channel_number-arrayname</code> convention. Due to its non-interpolating nature, it is primarily suited for specific tasks like reading samples at their original speed, rather than general sample playback.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>index~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/insert/","title":"insert","text":"<p>The <code>insert</code> object allows you to insert elements into a message (list) at a specified index position. It takes the message to be modified, the elements to insert, and an optional index (defaulting to 0) as inputs. The object then outputs the new message with the inserted elements.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>insert</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/iterate/","title":"iterate","text":"<p>The <code>iterate</code> object splits an incoming message into its individual elements (floats or symbols) and outputs them sequentially. It can process messages from left-to-right by default or in reverse order by setting a direction argument. This object is useful for deconstructing lists or complex messages into their constituent parts for further processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>iterate</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/join/","title":"join","text":"<p>The <code>join</code> object combines messages of any type from its multiple inlets into a single output list. Users can specify which inlets trigger an output using the <code>@triggers</code> attribute, or force an output with a <code>bang</code>. Individual inlet values can also be set without triggering an output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>join</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/l/","title":"l","text":"<p>The <code>l</code> object (an alias for <code>list</code>) is used to store and manipulate lists in Pure Data. It can store a list, append to an existing list, and output the stored list, with the right inlet allowing list setting without immediate output. Note that <code>l</code> is deprecated and the <code>list</code> object should be used instead.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>l</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/l2i/","title":"l2i","text":"<p>The <code>l2i</code> object converts all floating-point numbers within an incoming list to integers. It takes any type of list as input and outputs a list where all float elements have been cast to their integer equivalents, while other elements are passed through. This is useful for ensuring list elements are whole numbers for control or data processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>l2i</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/l2s/","title":"l2s","text":"<p>The <code>list2symbol</code> (or <code>l2s</code>) object converts an incoming list into a single symbol. By default, list elements are joined with spaces, but a custom delimiter can be specified as an argument or via the second inlet. This object is useful for serializing list data into a string format.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>l2s</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/lace/","title":"lace","text":"<p>The <code>lace</code> object interleaves two or more incoming lists into a single output list. It can take an optional <code>-z</code> flag to pad shorter lists with zeros, ensuring all output lists match the length of the longest input list. A <code>bang</code> input is treated as an empty list.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lace</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/length/","title":"length","text":"<p>The <code>length</code> object, part of the <code>zexy</code> external library, determines the number of elements in an incoming list. It outputs this count as a float. This object is useful for controlling program flow or performing operations based on the size of a list.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>length</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/lifop/","title":"lifop","text":"<p>The <code>lifop</code> object manages multiple Last-In-First-Out (LIFO) stacks, each assigned a floating-point priority. It stores incoming lists and, when banged, outputs the most recently added list from the highest priority stack. This allows for prioritized retrieval of data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>lifop</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/linear_path/","title":"linear_path","text":"<p>The <code>linear_path</code> object reads out values from a specified table. It takes a float (0.0-1.0) as an inlet to define the reading point within the table. This object supports reading from multi-dimensional tables and outputs a list of floats corresponding to the specified dimensions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>linear_path</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/list2lists/","title":"list2lists","text":"<p>The <code>list2lists</code> object splits an incoming list into multiple sublists. It uses a second input list to define the lengths of these sublists, effectively restructuring the data. If a sublist is specified with a length of zero, it outputs a <code>bang</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>list2lists</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/list2symbol/","title":"list2symbol","text":"<p>The <code>list2symbol</code> object converts an incoming list into a single symbol. By default, list elements are joined by spaces, but a custom delimiter can be specified as an argument or via the second inlet. This object is useful for concatenating data from lists into a single string-like symbol for further processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>list2symbol</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/lister/","title":"lister","text":"<p>The <code>lister</code> object (alias <code>l</code>) stores and outputs lists, and can also append one list to another. It is similar to the <code>pack</code> object and supports mixed-type lists. Note that <code>lister</code> is deprecated, with the <code>list</code> object being the preferred alternative.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>lister</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/listfind/","title":"listfind","text":"<p>The <code>listfind</code> object searches for occurrences of a sublist within a larger list. It takes the main list to be searched and the sublist to find as inputs. The object then outputs a list containing the 0-based indices of all positions where the sublist is found within the main list.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>listfind</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/listfunnel/","title":"listfunnel","text":"<p>The <code>listfunnel</code> object receives any list and outputs its elements sequentially, each preceded by its index. It supports an optional index offset, which is useful for combining outputs from multiple <code>listfunnel</code> objects or for use with <code>spray</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>listfunnel</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/matchbox/","title":"matchbox","text":"<p>The <code>matchbox</code> object stores a collection of lists and retrieves them based on various matching algorithms. It supports exact, OSC pattern, and regular expression matching for list elements. This object is useful for dynamic data management and content-based routing within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>matchbox</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/offer/","title":"offer","text":"<p>The <code>offer</code> object stores temporary <code>x/y</code> integer pairs. A <code>y</code> value is first set in the right inlet, then an <code>x</code> value received in the left inlet forms a pair. When an <code>x</code> is subsequently received, <code>offer</code> outputs its corresponding <code>y</code> value and deletes that specific <code>x/y</code> pair, acting as a one-time data retrieval mechanism.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>offer</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/pack/","title":"pack","text":"<p>The <code>pack</code> object combines multiple incoming atoms (numbers, symbols, or pointers) from its inlets into a single list message. Part of the zexy library, this version offers enhanced initialization capabilities compared to Pure Data's built-in <code>pack</code>, particularly for symbols. It is primarily used for structuring diverse data types into a coherent message for subsequent processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pack</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/pack2/","title":"pack2","text":"<p>The <code>pack2</code> object combines multiple inputs into a single list, similar to <code>pack</code>. Unlike <code>pack</code>, any incoming message to any inlet triggers its output, though a <code>set</code> message can update an inlet's value without triggering an immediate output. It supports both float and symbol data types, allowing for dynamic type changes per inlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pack2</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/packel/","title":"packel","text":"<p>The <code>packel</code> object extracts elements from a list, referred to as a \"package.\" It can retrieve a specific element by its index (positive for from the beginning, negative for from the end), or the entire list if the index is 0. This object is useful for accessing and manipulating data within lists.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>packel</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/pack~/","title":"pack~","text":"<p>The <code>pack~</code> object converts incoming audio signals into lists of floating-point numbers. It samples the signal vectors, specifically extracting the 1st and 3rd samples, and outputs these as a list, enabling signal-rate data to be processed at the control rate.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pack~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/pak/","title":"pak","text":"<p>The <code>pak</code> object combines multiple inputs of various types (float, int, symbol) into a single list. By default, any direct input to an inlet triggers the output of the combined list. Values can be updated without immediate output using the <code>set</code> message, requiring a subsequent <code>bang</code> to explicitly send the list.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>pak</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/peek~/","title":"peek~","text":"<p>The <code>peek~</code> object provides functionality to read and write individual values to and from arrays in Pure Data. It operates via messages, not audio signals, allowing it to function even when the DSP is off. This object supports multichannel arrays, enabling access and manipulation of data across up to 64 channels.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>peek~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/pix_buffer/","title":"pix_buffer","text":"<p><code>pix_buffer</code> is a named storage object for images, functioning similarly to a table but without direct visual access to its contents. It can store images of varying dimensions and color spaces, dynamically allocating memory or pre-allocating it via the <code>allocate</code> message. Images can be written to or read from the buffer using associated objects like <code>pix_buffer_write</code> and <code>pix_buffer_read</code>, and it supports loading from and saving to files.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_buffer</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/poke~/","title":"poke~","text":"<p><code>poke~</code> writes audio signals or control messages into a specified array at a given index, which can also be controlled by a signal. It supports multi-channel arrays (up to 64 channels), allowing the target channel to be selected via an argument or an inlet. This object is essential for dynamic manipulation of array data, such as recording signals or modifying waveforms in real-time.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>poke~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/prepend/","title":"prepend","text":"<p>The <code>prepend</code> object adds a specified message or argument to the beginning of any incoming message. It functions similarly to <code>list prepend</code>, allowing dynamic modification of the prepended content via a <code>set</code> message. This object is useful for constructing new messages by prefixing existing ones.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>prepend</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/presets/","title":"presets","text":"<p>The <code>presets</code> object in Pure Data manages and stores the state of other objects, particularly those connected to <code>receive</code> or <code>receiver</code> objects. It allows users to save, load, clear, import, and export patch configurations to files. Additionally, it features morphing and interpolation capabilities for smooth transitions between saved preset values, and integrates with <code>savestate</code> for managing abstraction states.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>presets</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/pv/","title":"pv","text":"<p>The <code>pv</code> object functions as a private variable, storing and retrieving any message type by name within a patch and its subpatches. Unlike <code>value</code>, it can handle diverse message formats, but it does not communicate with <code>send</code> or <code>value</code> objects, even if they share the same name. The help patch notes that <code>pv</code> is largely redundant and <code>send</code> is often a better alternative.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>pv</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/remove/","title":"remove","text":"<p>The <code>remove</code> object filters a list by excluding specified numeric elements. It takes an input list in its left inlet and a list of elements to remove (or a single element) in its right inlet or as creation arguments. The object outputs the modified list with the specified elements excluded.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>remove</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/repack/","title":"repack","text":"<p>The <code>repack</code> object in Pure Data is used to (re)pack various data types\u2014floats, symbols, or pointers\u2014into fixed-size packages. It can also unfold incoming packages back into individual atoms. The package size can be set upon creation using an argument or dynamically via its second inlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>repack</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/replace/","title":"replace","text":"<p>The <code>replace</code> object modifies an input list by substituting an element at a specified index with a new value. It takes the list to be modified, an index (float, default 0), and the new element (float or symbol) as inputs, outputting the modified list.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>replace</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/rotate/","title":"rotate","text":"<p>The <code>rotate</code> object reorders elements within incoming messages or lists. It takes a rotation number as an argument or inlet, which determines how the elements are shifted. This allows for dynamic rearrangement of data sequences.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rotate</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/s2l/","title":"s2l","text":"<p>The <code>s2l</code> object converts an input symbol into a list. By default, list elements are separated by spaces, but a custom symbol can be used as a delimiter via the second inlet. Sending a bang to the object re-parses the input symbol.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>s2l</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/stack/","title":"stack","text":"<p>The <code>stack</code> object stores and retrieves messages using either a First-In, First-Out (FIFO) or Last-In, First-Out (LIFO) order, functioning as a queue or a traditional stack data structure. It allows users to push messages onto the stack, retrieve them one by one with a <code>bang</code>, or dump all stored messages. The object also provides control over its internal <code>[text]</code> window and reports the number of stored elements.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>stack</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/store/","title":"store","text":"<p>The <code>store</code> object is an abstraction built upon Pure Data's <code>text</code> object, designed to sequentially store and manage incoming messages. It allows users to store, retrieve, clear, and sort messages, functioning as a dynamic message sequence. Its contents can be manually edited via a dedicated window, making it useful for managing ordered data within a patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>store</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/stream/","title":"stream","text":"<p>The <code>stream</code> object collects incoming numbers into an internal list. It outputs this list as a single message when a specified group size (N) is reached, or when triggered by a <code>bang</code> message to resend the last output. The internal list can be cleared using a <code>clear</code> message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>stream</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/symbol2any/","title":"symbol2any","text":"<p>The <code>symbol2any</code> object converts an incoming symbol into an \"any\" message. This allows the symbol's content to be interpreted dynamically as a number, list, or symbol, facilitating flexible message routing and type conversion within a patch. It is particularly useful when a symbol needs to be treated as a command or data of a different type.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>symbol2any</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/symbol2list/","title":"symbol2list","text":"<p>The <code>symbol2list</code> object converts an incoming symbol into a list. By default, it splits the symbol into list elements using spaces as delimiters. A different delimiter can be specified via its second inlet, and sending a bang to the object will re-parse the symbol with the current delimiter.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>symbol2list</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/tabdump/","title":"tabdump","text":"<p>The <code>tabdump</code> object outputs the entire contents of a Pure Data table as a list. Triggered by a <code>bang</code> message, it provides a convenient way to access and process table data as a standard list, useful for inspection or further manipulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>tabdump</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/table/","title":"table","text":"<p>The <code>table</code> object stores and edits a number array, which can be graphically manipulated via an editor window or by double-clicking. It supports various message-based operations for setting values, reading from and writing to files, and performing basic mathematical operations like sum, min, and max. Multiple <code>table</code> objects can share the same data by using a common name.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>table</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/tabminmax/","title":"tabminmax","text":"<p>The <code>tabminmax</code> object finds the minimum and maximum values within a Pure Data table. Additionally, it outputs the indices of these maximum values. It is part of the zexy library and is useful for analyzing data stored in tables.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>tabminmax</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/tabset/","title":"tabset","text":"<p>The <code>tabset</code> object from the <code>zexy</code> library allows users to set the contents of a Pure Data table. It takes a list as its primary input, which defines the values to be stored in the table, effectively providing a way to programmatically populate or modify table data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>tabset</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/thresh/","title":"thresh","text":"<p>The <code>thresh</code> object collects incoming numbers and lists, combining them into a single output list if they arrive within a specified time interval. Each new item resets the internal timer and is appended to the previously stored items. This object is useful for grouping closely timed data into a single message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>thresh</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/uniqsym/","title":"uniqsym","text":"<p>The <code>uniqsym</code> object removes duplicate symbols from a list or stream, maintaining a unique set of values. It can also sort the collected symbols and output them either as a single list or as a stream of individual symbols. This object is useful for managing unique textual data within Pure Data patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>uniqsym</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/unpack/","title":"unpack","text":"<p>The <code>unpack</code> object splits an incoming message or list into its individual atoms, sending each atom to a separate outlet. Similar to Pure Data's built-in <code>unpack</code> object, the number and type of expected atoms are defined by its creation arguments. This object is useful for deconstructing structured data into its constituent parts for further processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>unpack</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/unpack~/","title":"unpack~","text":"<p>The <code>unpack~</code> object converts a list of floating-point numbers into an audio signal. It takes a list of floats as its inlet and outputs a signal. An optional creation argument <code>bufsize</code> (defaulting to 64 samples) can be used to control the buffer size, effectively acting as a simple sample rate reducer.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>unpack~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/var/","title":"var","text":"<p>The <code>var</code> object in Pure Data functions as a multi-variable storage and recall mechanism, similar to <code>value</code> but capable of handling multiple named variables, often as lists. It receives values sent to named variables via <code>send</code> messages from objects like <code>float</code>, <code>int</code>, or <code>value</code> itself, and can also interact with <code>expr</code> for setting or retrieving values. Unlike some other variable objects, <code>var</code> does not have a <code>send</code> message for outputting values.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>var</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/zexy_index/","title":"zexy_index","text":"<p>The <code>index</code> object creates and manages a symbol-to-integer map, allowing you to associate unique symbols with numerical indices. It supports adding new items, retrieving an item's index, and optionally auto-adding unknown symbols. This object is useful for efficiently mapping textual identifiers to numerical representations within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>zexy_index</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/data_structures/zl/","title":"zl","text":"<p>The <code>zl</code> object is a versatile Pure Data list processor that performs various operations on incoming lists based on its selected mode. It can manipulate list order (e.g., <code>sort</code>, <code>rev</code>, <code>rot</code>, <code>scramble</code>), extract or insert elements (<code>mth</code>, <code>nth</code>, <code>slice</code>, <code>group</code>, <code>iter</code>, <code>lace</code>, <code>delace</code>, <code>lookup</code>, <code>indexmap</code>), compare and filter lists (<code>change</code>, <code>compare</code>, <code>filter</code>, <code>sect</code>, <code>thin</code>, <code>unique</code>), or perform basic arithmetic (<code>sum</code>, <code>median</code>). It also offers storage mechanisms like <code>queue</code> (FIFO) and <code>stack</code> (LIFO).</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>zl</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/deep_learning/nn~/","title":"nn~","text":"<p><code>nn~</code> is a bridge between Max/MSP or PureData and LibTorch (PyTorch C++ interface) for deep learning. It does not work alone and requires pretrained models.</p> Key Points <ul> <li>Purpose: Allows deep learning models to run inside Max/MSP or PureData.  </li> <li>Dependencies: Pretrained models in TorchScript (<code>.ts</code>) format.  </li> <li>Model Management:</li> <li>Place <code>.ts</code> files in <code>nn_tilde/models</code> or any folder accessible through Max/Pd filesystem:<ul> <li>Max: Options \u2192 File Preferences  </li> <li>PureData: File \u2192 Preferences \u2192 Path</li> </ul> </li> <li>Since v1.6.0, some models can be downloaded via IRCAM Forum API.  </li> <li>Usage: Load a model by specifying its name as the first argument to <code>nn~</code>:</li> </ul> <ul> <li> Download here or use Deken..</li> <li> Library developed mainly by ACIDS/Ircam.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Hierarchical temporal learning for multi-instrument and orchestral audio synthesis by Hierarchical temporal learning for multi-instrument and orchestral audio synthesis</p> <p>Link</p> </li> </ul> Videos Similar <ul></ul> Comments Contributors"},{"location":"objects/delay/comb.filt~/","title":"comb.filt~","text":"<p>The <code>comb.filt~</code> object implements a resonator comb filter, which can be configured for decay time (t60) or direct gain feedback. It takes an audio signal and allows control over the filter's resonant frequency and decay characteristics, making it suitable for creating resonant effects and short delays.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>comb.filt~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/delay/comb~/","title":"comb~","text":"<p>The <code>comb~</code> object implements a comb filter, which can be used for both filtering and delay effects on audio signals. It takes an input signal and applies a delay with feedforward and feedback gain coefficients, defined by the equation <code>y[n] = a * x[n] + b * x[n-D] + c * y[n-D]</code>. Parameters for delay time (<code>D</code>), input gain (<code>a</code>), feedforward gain (<code>b</code>), and feedback gain (<code>c</code>) can be controlled via inlets or arguments.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>comb~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/delay/delay.m~/","title":"delay.m~","text":"<p><code>delay.m~</code> is a simple audio delay module that wraps the <code>filterdelay~</code> object from the ELSE library. It functions like a basic delay pedal, currently lacking control voltage (CV) input for modulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>delay.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/delay/delay~/","title":"delay~","text":"<p>The <code>delay~</code> object delays an audio signal by a specified number of samples, with the delay time dependent on the sample rate. It supports both fixed and signal-controlled delay times, offering optional interpolation for smooth transitions. This object is fundamental for creating various time-based audio effects, such as flanging or vibrato.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>delay~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/delay/del~/","title":"del~","text":"<p><code>del~</code> defines and manages a signal delay line, functioning as either a writer (<code>del~ in</code>, the default) or a reader (<code>del~ out</code>). The reader interpolates values using a cubic spline. It supports setting delay time in milliseconds or samples, clearing the delay line, and freezing its contents, and includes a dummy outlet to ensure proper order of execution.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>del~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/delay/echocurve~/","title":"echocurve~","text":"<p><code>echocurve~</code> is a feedback delay object that generates echoes with exponentially changing time and amplitude curves. It allows control over the maximum echo time, the number of echo points, and the shape of the duration and amplitude curves, enabling dynamic and evolving delay effects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.</li> <li> Library developed mainly by Joel Matthys.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/delay/ffdelay~/","title":"ffdelay~","text":"<p><code>ffdelay~</code> is a simple feed-forward audio delay line that supports interpolation (cubic spline or linear) for smooth delay time changes. It can be used to create effects like vibrato and flanging. The object allows setting the maximum delay size and can freeze or clear its internal buffer.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>ffdelay~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/delay/filterdelay~/","title":"filterdelay~","text":"<p><code>filterdelay~</code> is a high-level audio delay unit that integrates a resonant lowpass filter, a soft clipper, and a DC filter within its feedback loop. It allows for dynamic control over delay time, feedback amount, filter cutoff, and resonance, offering a versatile tool for creating complex, modulated delay effects. The object also features a <code>freeze</code> parameter to stop input recording while allowing continued modulation of delay and filter parameters.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>filterdelay~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/delay/ping.pong~/","title":"ping.pong~","text":"<p>The <code>ping.pong~</code> object is an audio effect that creates a ping-pong delay. It takes an audio signal as input and produces a stereo delay output that bounces between channels. Users can control the delay time in milliseconds and the feedback gain.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>ping.pong~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/delay/pix_delay/","title":"pix_delay","text":"<p>The <code>pix_delay</code> object creates a frame-based delay line for images, allowing a series of images to be delayed. It takes a maximum number of frames as an argument and can have its current delay adjusted via an inlet. This object is useful for creating visual feedback or temporal effects with image streams in GEM.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_delay</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/delay/revdelay~/","title":"revdelay~","text":"<p>The <code>revdelay~</code> object creates a reverse delay effect. It continuously records incoming audio into an internal delay line and plays back a segment of that audio in reverse. The delay size can be configured in milliseconds, with a default of 1000 ms, and can be dynamically changed using the <code>resize</code> message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>revdelay~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/delay/teeth~/","title":"teeth~","text":"<p>The <code>teeth~</code> object functions as a comb filter, offering independent control over feedforward and feedback delay times, along with their corresponding gain coefficients. It processes an input signal by applying these delays and gains to produce a filtered output, utilizing linear interpolation for sub-sample delay times.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>teeth~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/delay/trig.delay2~/","title":"trig.delay2~","text":"<p>The <code>trig.delay2~</code> object delays an incoming impulse signal by a specified time in milliseconds. It ignores any subsequent trigger impulses received before the delayed output is sent. This object supports multichannel signals, allowing for individual delay times per channel when a multichannel delay time signal is provided.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>trig.delay2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/delay/trig.delay~/","title":"trig.delay~","text":"<p>The <code>trig.delay~</code> object delays an incoming impulse signal by a specified time in milliseconds. It functions similarly to the <code>delay</code> object, rescheduling the delay if new triggers arrive before the output. This object fully supports multichannel operation, allowing individual delay times per channel or a single delay time applied across all channels.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>trig.delay~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/delay/z~/","title":"z~","text":"<p>The <code>z~</code> object provides a sample-wise delay for audio signals, effectively implementing a <code>z^-N</code> delay. It is primarily designed to facilitate the creation of Finite Impulse Response (FIR) filters, such as a moving average filter, by delaying the input signal by a specified number of samples.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>z~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/al/","title":"al","text":"<p>The <code>al</code> object calculates the Audible Level AL(P) in dB, taking into account a masking stage. It is used for psychoacoustic analysis, likely involving inputs such as frequency and linear amplitude to determine perceived loudness or auditory thresholds.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>al</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/attackTime/","title":"attackTime","text":"<p>The <code>attackTime</code> object analyzes a specified segment of a sound sample array to determine its attack time. It identifies the onset and peak of a sound event within the given window, outputting the attack time in milliseconds, along with the sample indices for the onset start and peak. Users can configure parameters such as sample rate, search range, and magnitude thresholds for precise onset detection.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>attackTime</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/attackTime~/","title":"attackTime~","text":"<p>The <code>attackTime~</code> object calculates the attack time of an audio event in milliseconds. Upon receiving a bang, it identifies the peak sample within its analysis window and then searches backward for the attack onset, defined by a period of near-silence. This object requires an external onset detector to trigger its analysis and outputs the attack time, onset, and peak sample indices.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>attackTime~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/autoCorrPitch/","title":"autoCorrPitch","text":"<p>The autoCorrPitch object performs offline pitch tracking on a specified audio sample array using an autocorrelation algorithm. It analyzes a segment of the array (or the entire array) and outputs the detected fundamental frequency as a MIDI pitch value. It can be configured with a sample rate and a correlation threshold for detection.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>autoCorrPitch</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/autoCorrPitch~/","title":"autoCorrPitch~","text":"<p>The autoCorrPitch~ object calculates the fundamental pitch of an incoming audio signal using autocorrelation, converting the result to Hertz and MIDI units. It is designed for real-time pitch tracking and can be used as a feature extractor for timbre identification. Users can adjust the analysis window size to optimize accuracy and the range of detectable frequencies.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>autoCorrPitch~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/bark/","title":"bark","text":"<p>The bark object is a non-real-time audio onset detector that identifies musical attacks by analyzing spectral changes. It employs a spectral differencing growth algorithm, weighted by the perceptually-based Bark frequency scale, which can improve accuracy for signals with significant resonance. It outputs onset times, total energy growth, and growth per Bark band, facilitating detailed audio analysis and segmentation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>bark</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpec/","title":"barkSpec","text":"<p>The <code>barkSpec</code> object calculates the Bark spectrum of an audio sample or a specified segment within a sample array. It allows configuration of analysis parameters such as window function and filterbank spacing. This object is useful for psychoacoustically informed audio analysis, particularly for timbre description.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpec</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecBrightness/","title":"barkSpecBrightness","text":"<p>The <code>barkSpecBrightness</code> object calculates the brightness of an audio sample by analyzing its Bark spectrum. It takes an audio array, filterbank spacing, and a Bark boundary point as arguments to customize the spectral analysis. This object is designed for efficient descriptor extraction within signal processing chains, capable of accepting pre-computed FFT, magnitude, or Bark spectrum data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecBrightness</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecBrightness~/","title":"barkSpecBrightness~","text":"<p>The barkSpecBrightness~ object calculates the brightness of an audio signal's Bark spectrum. It determines brightness as the ratio of energy above a specified Bark frequency boundary to the total energy in the spectrum. This descriptor is useful for real-time timbre identification and can be configured with various windowing functions, filterbank spacings, and boundary points.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecBrightness~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecCentroid/","title":"barkSpecCentroid","text":"<p>The barkSpecCentroid object computes the Bark spectrum centroid, a psychoacoustically weighted measure of an audio signal's spectral balance. It analyzes audio from a sample array, allowing customization of analysis parameters such as windowing function and filter averaging.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecCentroid</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecCentroid~/","title":"barkSpecCentroid~","text":"<p>The <code>barkSpecCentroid~</code> object calculates the Bark spectrum centroid, representing the \"center of mass\" of an audio signal's energy distribution on the Bark frequency scale. It outputs a numerical value indicating this Bark frequency, making it suitable for real-time timbre identification and spectral analysis. The object handles its own audio buffering and windowing, with configurable window size and Bark-spacing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecCentroid~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecFlatness/","title":"barkSpecFlatness","text":"<p>The <code>barkSpecFlatness</code> object calculates the spectral flatness of an audio signal within Bark-scaled frequency bands. It analyzes a specified window of a sample array, providing a measure of how noise-like or tone-like the sound is in perceptually relevant frequency regions. It supports various analysis parameters like windowing functions and can process pre-computed spectral data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecFlatness</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecFlatness~/","title":"barkSpecFlatness~","text":"<p>The <code>barkSpecFlatness~</code> object calculates the spectral flatness of an incoming audio signal within the Bark frequency scale, outputting a value between 0.0 and 1.0 that indicates how noise-like the spectrum is. This audio descriptor is useful for real-time timbre identification and can be configured with window size and Bark filterbank spacing. It handles its own audio buffering and windowing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecFlatness~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecFlux/","title":"barkSpecFlux","text":"<p>The barkSpecFlux object calculates the spectral flux between two audio windows (forward and back) based on their Bark band energy differences. It sums these per-Bark-band energy differences, providing a measure of how quickly the spectral content of an audio signal is changing. This object is highly configurable, allowing adjustments to windowing, filterbank spacing, and the type of difference calculation, and can operate in flux, growth, or decay modes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecFlux</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecFlux~/","title":"barkSpecFlux~","text":"<p>The <code>barkSpecFlux~</code> object calculates the spectral flux of an audio signal based on Bark-band energy differences. It outputs the sum of these differences (left outlet) and the full list of per-band differences (right outlet). This object is useful for real-time timbre identification and basic attack detection, offering configurable windowing, Bark filterbank spacing, and analysis window separation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecFlux~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecIrregularity/","title":"barkSpecIrregularity","text":"<p>The barkSpecIrregularity object computes the Bark spectrum irregularity of an audio signal, a descriptor indicating the noisiness or irregularity of its spectral envelope. It processes a specified window of an audio array, offering configurable parameters such as Bark filterbank spacing, windowing function, and a choice between Jensen or Krimphoff algorithms. For efficiency, it can also accept pre-computed spectral data via \"chain\" messages.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecIrregularity</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecIrregularity~/","title":"barkSpecIrregularity~","text":"<p>The <code>barkSpecIrregularity~</code> object calculates the spectral irregularity of an audio signal's Bark spectrum. It quantifies how 'jagged' or 'smooth' the energy distribution is across Bark bands, using either the Jensen or Krimphoff algorithm. This descriptor is primarily used for real-time timbre analysis and classification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecIrregularity~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecKurtosis/","title":"barkSpecKurtosis","text":"<p>The barkSpecKurtosis object calculates the kurtosis of the Bark spectrum, serving as an audio descriptor within the timbreIDLib. It analyzes audio signals or specified portions of sample arrays, providing a statistical measure of the \"peakedness\" of the Bark spectrum. The object supports various windowing functions and can efficiently process pre-computed spectral data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecKurtosis</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecKurtosis~/","title":"barkSpecKurtosis~","text":"<p>The barkSpecKurtosis~ object calculates the kurtosis (peakedness) of an audio signal's Bark spectrum. It outputs a numerical value indicating how concentrated the spectral energy is. This descriptor is useful for analyzing timbre, with high values for pure tones and low values for noise.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecKurtosis~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecRolloff/","title":"barkSpecRolloff","text":"<p>The barkSpecRolloff object calculates the spectral rolloff of an audio signal based on its Bark scale spectrum. It analyzes a specified window of an audio array, using a given Bark filterbank spacing and a concentration threshold, and outputs a numerical value representing this descriptor. It can also process pre-computed Bark spectrum data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecRolloff</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecRolloff~/","title":"barkSpecRolloff~","text":"<p>The <code>barkSpecRolloff~</code> object calculates the Bark spectrum rolloff, which is the Bark frequency below which a specified concentration of spectral energy is located. It processes audio in real-time, handling its own buffering and windowing, and allows configuration of window size, filterbank spacing, and the energy concentration threshold. This descriptor is useful for real-time timbre analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecRolloff~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecSkewness/","title":"barkSpecSkewness","text":"<p>The <code>barkSpecSkewness</code> object calculates the skewness of the Bark spectrum of an audio sample. It analyzes a specified portion of an audio array, providing a statistical measure of the asymmetry of its spectral energy distribution across Bark frequency bands. It can also process pre-computed spectral data to optimize analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecSkewness</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecSkewness~/","title":"barkSpecSkewness~","text":"<p>The <code>barkSpecSkewness~</code> object calculates the skewness of an audio signal's Bark spectrum, quantifying the symmetry of its energy distribution across frequency bands. A positive value indicates more energy in lower frequencies, while a negative value signifies more energy in higher frequencies. This real-time audio descriptor is useful for timbre identification and classification tasks.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecSkewness~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecSlope/","title":"barkSpecSlope","text":"<p>The barkSpecSlope object calculates the slope of the Bark spectrum for a given audio segment. It takes an audio sample array and a Bark filterbank spacing as creation arguments. This object is used for offline analysis, processing a specified window of audio samples.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecSlope</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecSlope~/","title":"barkSpecSlope~","text":"<p>The <code>barkSpecSlope~</code> object calculates the slope of the best-fit line through the data points of a Bark spectrum. It processes an audio input signal and, when triggered by a bang, outputs this slope for the current analysis window. This object is primarily used as a feature for real-time timbre identification and classification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecSlope~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecSpread/","title":"barkSpecSpread","text":"<p>The barkSpecSpread object calculates the Bark spectrum spread, a measure of the spectral width of an audio signal based on the Bark scale. It analyzes pre-recorded audio arrays or can process chained spectral data from other analysis objects. Users can configure various analysis parameters, including windowing functions, sample rate, and filterbank settings.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecSpread</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpecSpread~/","title":"barkSpecSpread~","text":"<p>The barkSpecSpread~ object calculates the spread of an audio signal's Bark spectrum, indicating the concentration of energy around its centroid. It outputs this value in Barks, where a low spread signifies concentrated energy (like a sinusoid) and a high spread indicates dispersed energy (like noise). This descriptor is useful for analyzing timbre and can serve as a feature for real-time audio classification systems.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpecSpread~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barkSpec~/","title":"barkSpec~","text":"<p>The <code>barkSpec~</code> object analyzes incoming audio to compute its Bark-frequency spectrum, which warps the normal spectrum to the Bark scale, emphasizing low-frequency detail. It outputs the spectrum as a list of 50 normalized components when triggered, useful for timbre analysis and classification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>barkSpec~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/barks~/","title":"barks~","text":"<p>The <code>barks~</code> object analyzes sound files to extract energy information across critical bands on the Bark scale. Users can configure the analysis with specific window sizes and overlaps. This object is useful for psychoacoustically relevant audio feature extraction.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>barks~</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/bark~/","title":"bark~","text":"<p>The <code>bark~</code> object is a real-time onset detector for Pure Data, which analyzes spectral growth using the perceptually-based Bark frequency scale. It outputs a bang upon detecting an onset, along with the total energy growth and a list of growth values per Bark band. This object is ideal for applications requiring robust transient detection in audio signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>bark~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/beat~/","title":"beat~","text":"<p>The <code>beat~</code> object analyzes an input audio signal to detect its tempo and output a detected BPM value. It utilizes various onset detection methods, configurable via parameters like mode, threshold, silence level, window size, and hop size, to accurately identify rhythmic pulses.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>beat~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/bfcc/","title":"bfcc","text":"<p>The bfcc object computes Bark-frequency Cepstral Coefficients, which are a common audio descriptor used to characterize timbre. It analyzes audio data from a specified sample array, allowing for customization of windowing functions and Bark filterbank parameters. This object is primarily used for feature extraction in audio analysis applications.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>bfcc</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/bfcc~/","title":"bfcc~","text":"<p>The <code>bfcc~</code> object computes Bark-frequency cepstral coefficients (BFCCs) from an audio input, emphasizing lower spectral content and using a Discrete Cosine Transform. It outputs a list of BFCCs upon receiving a bang, handling internal audio buffering and windowing. This object is useful for extracting perceptually relevant features from audio for tasks like timbre identification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>bfcc~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/binWrangler/","title":"binWrangler","text":"<p>The <code>binWrangler</code> Pure Data object accumulates a specified number of feature vector frames, such as BFCCs, and then outputs the time-varying information organized by bin number as a concatenated list. It can also operate in a \"spew\" mode, acting as a sliding buffer that outputs the accumulated data with each new frame. This object is primarily used for processing sequential feature data in the <code>timbreID</code> library.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>binWrangler</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/centroid~/","title":"centroid~","text":"<p>The <code>centroid~</code> object calculates the spectral centroid of an audio signal, representing the 'center of gravity' of its frequency spectrum. It is typically used for audio analysis and takes arguments or messages to configure its window size and overlap for FFT processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>centroid~</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/cepstrum/","title":"cepstrum","text":"<p>The <code>cepstrum</code> object computes the cepstrum of an audio signal from a specified sample array. It allows for analysis of a defined window of samples, offering options for various windowing functions and the choice between magnitude or power cepstrum. This object is designed for non-real-time audio feature extraction and can integrate into analysis chains by accepting pre-computed FFT or magnitude spectrum data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>cepstrum</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/cepstrumPitch/","title":"cepstrumPitch","text":"<p>The cepstrumPitch object performs offline pitch tracking on an audio sample array using cepstral analysis. It outputs the detected pitch as a MIDI value. Users can specify the sample array, expected pitch range, and various analysis parameters like windowing function and threshold for accurate pitch detection.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>cepstrumPitch</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/cepstrumPitch~/","title":"cepstrumPitch~","text":"<p>The <code>cepstrumPitch~</code> object performs real-time pitch tracking of an audio signal using cepstrum analysis. It is specifically designed to detect the fundamental frequency within a user-defined MIDI pitch range, outputting the result in MIDI units. This object handles its own audio buffering and windowing, and can be configured with parameters like window size and a peak detection threshold.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>cepstrumPitch~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/cepstrum~/","title":"cepstrum~","text":"<p>The cepstrum~ object computes the real cepstrum of an audio signal, derived from the Inverse Fourier Transform of the log magnitude spectrum. It outputs a list of cepstral coefficients, which are commonly used as compact feature vectors for describing audio timbre. This object is primarily used for audio analysis and feature extraction.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>cepstrum~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/chroma/","title":"chroma","text":"<p>The <code>chroma</code> object performs non-real-time pitch chroma analysis on audio data stored in a Pure Data array. It calculates a pitch class profile (chroma vector) for a specified audio segment, configurable by frequency bounds and pitch tolerance. This object can accept pre-computed FFT or magnitude spectrum data via <code>chain_</code> messages for optimized analysis workflows.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>chroma</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/chroma~/","title":"chroma~","text":"<p>The <code>chroma~</code> object analyzes incoming audio to determine the spectral energy present in each of the 12 musical pitch classes, regardless of octave. It outputs a 12-element pitch class profile list, which is useful for applications like chromagram visualization, chord recognition, and key estimation. Users can adjust various parameters such as window size, frequency range, and resolution for detailed spectral analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>chroma~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/dct/","title":"dct","text":"<p>The <code>dct</code> object computes the Discrete Cosine Transform (DCT) of a specified portion or the entirety of a Pure Data array. It allows for the application of various windowing functions and normalization to the input data. This object is primarily used for analyzing and representing signals in a frequency-like domain, with its output coefficients often serving as spectral descriptors.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>dct</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/dct~/","title":"dct~","text":"<p>The <code>dct~</code> object computes the Discrete Cosine Transform (DCT) of an incoming audio window, outputting a list of real numbers representing its spectral characteristics. It is primarily used for audio feature extraction, particularly for timbre analysis and classification, and allows for configurable window size and function.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>dct~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/detect~/","title":"detect~","text":"<p>The <code>detect~</code> object measures the time or frequency between incoming trigger signals. It outputs the detected period or frequency as a signal. Users can specify the output unit as samples (<code>samps</code>), beats per minute (<code>bpm</code>), or milliseconds (<code>ms</code>).</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>detect~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/dfreq~/","title":"dfreq~","text":"<p>The <code>dfreq~</code> object is a computationally efficient frequency detector that estimates the frequency of an incoming audio signal by counting zero-crossings. It updates its frequency estimation at every zero-crossing. While it is much cheaper than FFT-based methods, it is not designed to work properly with complex signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>dfreq~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/distance/","title":"distance","text":"<p>The <code>distance</code> object calculates the perceptual distance between pitches. It requires pitch salience information, which can be obtained from real-time analysis tools like <code>sigmund~</code>. This object can take three or more pitches as arguments to determine their relative distances.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>distance</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/energy/","title":"energy","text":"<p>The <code>energy</code> object from the <code>timbreIDLib</code> library calculates the energy of a specified audio sample array or a segment within it. It offers options to normalize the energy by window size, output as power or RMS, and report the value in decibels. This object is primarily used for offline audio feature extraction and analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>energy</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/energyEntropy/","title":"energyEntropy","text":"<p>The <code>energyEntropy</code> object calculates the energy entropy of an audio sample array. It analyzes the input array using specified sub-window and mid-term window sizes, providing a single numerical output representing the entropy. This object is designed for offline analysis of pre-recorded audio data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>energyEntropy</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/energyEntropy~/","title":"energyEntropy~","text":"<p>The <code>energyEntropy~</code> object measures abrupt changes in the energy of an audio signal. It processes audio in mid-term windows, which are composed of smaller sub-windows, and outputs a lower entropy value when there are more abrupt energy changes. This feature is useful for identifying sudden energy shifts in either direction, making it suitable for real-time timbre identification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>energyEntropy~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/energy~/","title":"energy~","text":"<p>The <code>energy~</code> object from <code>timbreIDLib</code> continuously calculates the energy of an audio signal, offering output in power, RMS, or decibels with adjustable window sizing and normalization. It serves as a flexible alternative to <code>[env~]</code> for real-time audio analysis, particularly useful for generating features for timbre identification and classification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>energy~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/featureAccum/","title":"featureAccum","text":"<p>The <code>featureAccum</code> object accumulates incoming lists of feature frames, processing them into a single output based on a specified mode. It can concatenate frames, compute a running sum, a running mean, or a simple moving average. This object is primarily used for preparing time-series feature data for further analysis or machine learning tasks.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>featureAccum</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/featureDelta/","title":"featureDelta","text":"<p>The <code>featureDelta</code> object calculates the difference between corresponding attributes of two incoming feature lists, such as audio descriptors. It supports various difference modes (e.g., absolute, squared) and can filter for positive, negative, or all delta values. This is useful for analyzing changes in features over time, such as tracking the evolution of Bark Frequency Cepstral Coefficients.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>featureDelta</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/featureNorm/","title":"featureNorm","text":"<p>The <code>featureNorm</code> object normalizes incoming feature lists, scaling their values to a specified range (either 0 to 1 by default, or -1 to 1). It requires the feature length at creation and can use provided minimum and maximum values for normalization, often derived from audio feature extraction.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>featureNorm</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.ampfeature~/","title":"fluid.ampfeature~","text":"<p>The <code>fluid.ampfeature~</code> object calculates various amplitude differential features from an audio signal. It extracts a range of audio descriptors, including Energy, High Frequency Content (HFC), Spectral Flux, and different phase deviation metrics. This object is primarily used for detailed audio analysis, offering parameters for envelope following and high-pass filtering to refine feature extraction.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.ampfeature~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.ampslice~/","title":"fluid.ampslice~","text":"<p>The <code>fluid.ampslice~</code> object performs amplitude-based segmentation of audio signals. It detects slices or onsets by comparing fast and slow amplitude envelopes, allowing for control over thresholds and minimum segment duration.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.ampslice~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.audiotransport~/","title":"fluid.audiotransport~","text":"<p>The <code>fluid.audiotransport~</code> object performs spectral interpolation between two loaded audio sounds. It allows for morphing between the timbral characteristics of the two sources, with the quality of the blend improving with larger FFT sizes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.audiotransport~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.bufampfeature/","title":"fluid.bufampfeature","text":"<p>The <code>fluid.bufampfeature</code> object calculates an amplitude differential feature from an audio buffer, useful for tasks like event detection or slicing. It employs configurable ramp parameters for envelope following and thresholds to identify significant amplitude changes, writing the analysis to a destination buffer.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufampfeature</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.bufaudiotransport/","title":"fluid.bufaudiotransport","text":"<p><code>fluid.bufaudiotransport</code> analyzes two source audio buffers using FFT to derive spectral characteristics. It then performs an interpolation or morphing operation between these two sounds, writing the resulting audio to a destination buffer. This object is primarily used for transforming or blending audio based on their spectral content.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufaudiotransport</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.bufchroma/","title":"fluid.bufchroma","text":"<p>The <code>fluid.bufchroma</code> object computes a histogram of the energy contained within audio signals, specifically focusing on chroma features. It allows configuration of the number of chroma bins and normalization of chroma values. The object analyzes audio and stores the resulting chroma features in a buffer, which can then be queried.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufchroma</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.bufhpss/","title":"fluid.bufhpss","text":"<p>The <code>fluid.bufhpss</code> object performs Harmonic-Percussive Source Separation (HPSS) on audio stored in buffers. It decomposes a source audio buffer into its harmonic, percussive, and optional residual components, storing them in separate buffers. Users can configure FFT settings, filter sizes, and choose between soft or binary masking modes, along with frequency-amplitude thresholds for fine-tuning the separation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufhpss</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.bufloudness/","title":"fluid.bufloudness","text":"<p>The <code>fluid.bufloudness</code> object computes two loudness descriptors: true peak and a loudness measurement that applies broadcasting standard filters to emulate perceived amplitude. It analyzes audio buffers to determine median and average loudness, as well as maximum true-peak, often visualized over a waveform.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufloudness</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.bufmelbands/","title":"fluid.bufmelbands","text":"<p><code>fluid.bufmelbands</code> computes the magnitudes for a specified number of perceptually-evenly spaced mel bands from an audio buffer. It supports multichannel inputs, calculating bands for each channel independently, and is primarily used for audio feature extraction and analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufmelbands</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.bufmfcc/","title":"fluid.bufmfcc","text":"<p>The <code>fluid.bufmfcc</code> object calculates Mel-Frequency Cepstral Coefficients (MFCCs), a classic timbral spectral descriptor. It analyzes audio from a source buffer and writes the resulting MFCCs into a destination buffer, supporting various parameters for FFT settings, frequency bounds, and multichannel processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufmfcc</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.bufnoveltyfeature/","title":"fluid.bufnoveltyfeature","text":"<p>The <code>fluid.bufnoveltyfeature</code> object calculates a novelty curve from audio data stored in a buffer. It uses various FFT settings and can base the novelty on features like Spectrum, MFCC, Chroma, Pitch, or Loudness. This object is primarily used for analyzing audio to identify points of significant change, often in conjunction with <code>noveltyslice</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufnoveltyfeature</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.bufnoveltyslice/","title":"fluid.bufnoveltyslice","text":"<p>The <code>fluid.bufnoveltyslice</code> object is a non-realtime audio slicer that identifies segmentation points in a source buffer (<code>srcBuf</code>) by assessing signal novelty. It uses various algorithms like Spectrum, MFCC, Chroma, Pitch, or Loudness, with configurable FFT settings, kernel size, filter size, and a threshold to determine slice boundaries. The estimated slice start points are written to an output buffer.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufnoveltyslice</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.bufonsetfeature/","title":"fluid.bufonsetfeature","text":"<p>The <code>fluid.bufonsetfeature</code> object calculates various spectral difference features and metrics from an audio buffer, such as Energy, HFC, and SpectralFlux. It is primarily used for generating a novelty or difference curve, which is a crucial step in detecting onsets within audio signals. This object provides parameters for windowing, hop size, FFT settings, and metric selection to fine-tune the analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufonsetfeature</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.bufonsetslice/","title":"fluid.bufonsetslice","text":"<p><code>fluid.bufonsetslice</code> implements various spectrum-based onset detection algorithms on audio data stored in a buffer. It allows configuration of FFT settings, selection of different spectral metrics (e.g., Energy, SpectralFlux, PhaseDev), and outputs the detected onset indices to a specified buffer. This object is primarily used for segmenting audio based on transient events.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufonsetslice</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.bufpitch/","title":"fluid.bufpitch","text":"<p><code>fluid.bufpitch</code> computes three popular pitch descriptors (frequency and confidence) from an audio buffer. It processes multichannel buffers channel by channel and allows selecting specific outputs to be copied to a destination buffer, streamlining the capture of desired descriptors.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufpitch</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.bufselect/","title":"fluid.bufselect","text":"<p>The <code>fluid.bufselect~</code> object copies specific sets of values from a buffer, allowing selection by channels and indices. It is particularly useful in analytical contexts for extracting or filtering data from audio buffers or feature sets, enabling precise manipulation of buffered data for further processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufselect</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.bufspectralshape/","title":"fluid.bufspectralshape","text":"<p>The <code>fluid.bufspectralshape</code> object computes seven spectral shape descriptors (centroid, spread, skewness, kurtosis, rolloff, flatness, crest) from an audio source. It outputs these descriptors to a buffer, with each descriptor occupying a separate channel, representing windows of spectral analysis. This allows for detailed analysis of audio characteristics over time.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufspectralshape</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.buftransientslice/","title":"fluid.buftransientslice","text":"<p>The <code>fluid.buftransientslice</code> object extracts transient-based slices from audio buffers. It analyzes a source buffer to detect sudden changes in the audio signal, writing the detected slice indices to a specified array. This object is useful for segmenting audio based on its percussive or attack components, with parameters to fine-tune the detection algorithm.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.buftransientslice</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.chroma~/","title":"fluid.chroma~","text":"<p>The <code>fluid.chroma~</code> object analyzes an audio input to compute a histogram of energy across different pitch classes. It outputs a list of chroma bins, where each element represents the strength of a specific pitch class. This object is particularly useful for extracting harmonic content from polyphonic audio sources.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.chroma~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.loudness~/","title":"fluid.loudness~","text":"<p>The <code>fluid.loudness~</code> object calculates two audio descriptors: loudness and peak. It can operate in an ITU BS 1770 compliant mode, using configurable window and hop sizes to analyze incoming audio signals. This object is primarily used for real-time audio analysis and measurement.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.loudness~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.melbands~/","title":"fluid.melbands~","text":"<p>The <code>fluid.melbands~</code> object calculates the magnitudes of audio signals across a specified number of perceptually evenly spread Mel-frequency bands. It allows users to define the number of bands, minimum and maximum frequencies, and FFT settings, providing a powerful tool for audio feature extraction and analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.melbands~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.mfcc~/","title":"fluid.mfcc~","text":"<p>The <code>fluid.mfcc~</code> object calculates Mel-Frequency Cepstral Coefficients (MFCCs) in real-time, serving as a classic timbral audio descriptor. It analyzes incoming audio signals to extract features representing their spectral envelope, useful for tasks like sound classification and timbral matching. Users can configure parameters such as window size, hop size, FFT settings, and the number of coefficients to output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.mfcc~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.noveltyfeature~/","title":"fluid.noveltyfeature~","text":"<p>The <code>fluid.noveltyfeature~</code> object calculates the novelty feature of audio in real-time, indicating changes in underlying audio characteristics. It supports various algorithms like Spectrum, MFCC, Chroma, Pitch, and Loudness, with configurable FFT settings, kernel size, and smoothing filters. This object is primarily used for audio analysis and event detection.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.noveltyfeature~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.noveltyslice~/","title":"fluid.noveltyslice~","text":"<p>The <code>fluid.noveltyslice~</code> object is a real-time audio slicer that detects \"novelty\" in an incoming signal to determine slicing points. It can use various algorithms like spectrum, MFCC, pitch, or loudness for detection, operating with spectral frame accuracy. Parameters such as FFT settings, filter size, kernel size, minimum slice length, and threshold allow for fine-tuning its behavior.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.noveltyslice~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.onsetfeature~/","title":"fluid.onsetfeature~","text":"<p><code>fluid.onsetfeature~</code> calculates spectral difference features from an audio signal, primarily for use with <code>fluid.onsetslice~</code>. It offers various metrics like Energy, HFC, and SpectralFlux, configurable with FFT settings (window size, hop size, FFT size), frame delta, and filter size. This object is crucial for preparing audio data for onset detection algorithms.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.onsetfeature~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.onsetslice~/","title":"fluid.onsetslice~","text":"<p>The <code>fluid.onsetslice~</code> object performs spectrum-based onset detection on audio signals. It identifies the precise start of sound events using various metrics and provides latency-compensated, spectral frame-accurate detection. This object is useful for analyzing audio to segment it into discrete events.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.onsetslice~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.pitch~/","title":"fluid.pitch~","text":"<p><code>fluid.pitch~</code> is a monophonic pitch descriptor that computes both the fundamental frequency and a confidence score from an audio input. It offers various algorithms, including Cepstrum, Harmonic Product Spectrum, and YinFFT, and allows for parameter adjustments like minimum/maximum frequency and FFT settings. This object is useful for controlling other effects based on pitch confidence or for robust pitch tracking in noisy environments.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.pitch~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.spectralshape~/","title":"fluid.spectralshape~","text":"<p><code>fluid.spectralshape~</code> computes seven spectral shape descriptors from an audio signal: centroid, spread, skewness, kurtosis, rolloff, flatness, and crest. It provides tools for detailed spectral analysis, useful for understanding the frequency content and characteristics of sounds. The object can be used to analyze various audio sources, including noise and filtered signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.spectralshape~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.transientslice~/","title":"fluid.transientslice~","text":"<p><code>fluid.transientslice~</code> is a real-time audio analysis object that extracts slices from an incoming audio stream based on transient detection. It identifies significant changes in the audio signal, allowing for segmentation and further processing. Parameters like <code>threshfwd</code> and <code>threshback</code> control the sensitivity of its transient prediction and detection functions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.transientslice~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/fluid.transients~/","title":"fluid.transients~","text":"<p><code>fluid.transients~</code> is a real-time audio object that models and separates transients from its input signal. It outputs two audio streams: the detected transients and the remaining residual audio. Users can fine-tune its behavior using various parameters like <code>order</code>, <code>blocksize</code>, and <code>threshfwd</code> to control the transient detection process.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.transients~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/hann~/","title":"hann~","text":"<p>The <code>hann~</code> object applies a Hann window to an incoming audio signal. This is typically used in spectral processing to taper the signal, reducing spectral leakage and improving frequency analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>hann~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/harmonicRatio/","title":"harmonicRatio","text":"<p>The 'harmonicRatio' object calculates the harmonic ratio of a specified audio sample array or a window within it. It is used for timbre analysis, providing a numerical descriptor of the sound's harmonic content. The object takes the name of the sample array as a creation argument and can be triggered to analyze the entire array or a specific segment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>harmonicRatio</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/harmonicRatio~/","title":"harmonicRatio~","text":"<p>The <code>harmonicRatio~</code> object calculates the harmonic ratio of an audio signal, providing an indicator of its periodicity. It outputs higher values for pitched or periodic sounds and lower values for noisy ones. This feature is useful for identifying transitions in pitched sounds or speech, based on an autocorrelation algorithm.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>harmonicRatio~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/irmeasure~/","title":"irmeasure~","text":"<p>The <code>irmeasure~</code> object is designed for measuring Impulse Responses (IRs) of acoustic systems using various test signals like Exponential Sine Sweeps (ESS), maximum length sequences, or different types of noise. It provides extensive control over the deconvolution process, including filter modes, phase, bandlimiting, and amplitude inversion, to accurately extract the IR.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>piro</code> and install it. Then create an object with <code>declare -lib piro -path piro</code>. Finally, use <code>irmeasure~</code> or any other object from <code>piro</code>.</p></li> <li> Library developed mainly by Marco Matteo Markidis.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/magSpec/","title":"magSpec","text":"<p>The <code>magSpec</code> object from the <code>timbreIDLib</code> library performs non-real-time spectral analysis on a given audio sample array. It calculates the magnitude or power spectrum of a specified window of audio, offering options for various windowing functions and normalization. This object is designed to be chained with other analysis objects that require FFT data, improving efficiency.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>magSpec</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/magSpec~/","title":"magSpec~","text":"<p>The magSpec~ object calculates the magnitude spectrum of an incoming audio signal over a specified window. Upon receiving a bang, it outputs the spectrum as a list of normalized values, handling internal buffering and various windowing functions. Its output is suitable for real-time audio feature extraction and analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>magSpec~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/maxSample/","title":"maxSample","text":"<p>The <code>maxSample</code> object analyzes a specified portion of a Pure Data array (typically containing audio samples) to find the maximum sample value and its corresponding index within that segment. It is useful for identifying peak amplitudes and their locations in pre-recorded or static audio data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>maxSample</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/maxSampleDelta/","title":"maxSampleDelta","text":"<p>The <code>maxSampleDelta</code> object analyzes a specified segment of a sample array to identify the largest absolute difference between consecutive samples. It outputs this maximum delta value and its corresponding index within the analyzed window. This object is useful for extracting a descriptor related to the rate of change or roughness of an audio signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>maxSampleDelta</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/maxSampleDelta~/","title":"maxSampleDelta~","text":"<p>The <code>maxSampleDelta~</code> object analyzes an audio stream to find the largest absolute difference between adjacent samples within a specified window. It outputs this maximum delta value and its corresponding index, making it useful for detecting sudden discontinuities or percussive onsets in a waveform. The analysis window size can be configured via a creation argument or a \"window\" message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>maxSampleDelta~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/maxSample~/","title":"maxSample~","text":"<p>The <code>maxSample~</code> object reports the maximum sample value and its corresponding index within a specified audio window. It handles its own audio buffering, eliminating the need for an external <code>block~</code> object. The window size can be set as a creation argument or dynamically changed via a 'window' message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>maxSample~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/maxpeak~/","title":"maxpeak~","text":"<p>The <code>maxpeak~</code> object continuously monitors an audio signal and outputs its maximum peak amplitude observed so far, either in decibels or linear scale. A bang to its right inlet resets this tracked maximum, while a bang from its right outlet indicates when the input signal has clipped.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>maxpeak~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/melSpec/","title":"melSpec","text":"<p>The 'melSpec' object computes a Mel-scaled spectrogram from an audio sample, providing a time-frequency representation of sound. It supports various windowing functions and can be configured for normalization, sampling rate, and filterbank parameters. This object can process raw audio data or accept pre-computed FFT or magnitude spectrum data, making it efficient for use in audio analysis chains.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>melSpec</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/melSpec~/","title":"melSpec~","text":"<p>The <code>melSpec~</code> object computes the Mel-frequency spectrum of an incoming audio signal, transforming the linear frequency scale to the perceptually-motivated mel scale. It outputs the spectrum as a list when triggered, with configurable window size, windowing function, and normalization options. This object is primarily used for audio feature extraction for tasks like timbre analysis and classification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>melSpec~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/meter~/","title":"meter~","text":"<p>The <code>meter~</code> object functions as a convenient mono VU-meter, analyzing an incoming audio signal. It outputs a list containing RMS and peak amplitude values in dBFS, which are useful for monitoring audio levels or driving visual indicators. The object also passes the input signal through, allowing it to be seamlessly integrated into an audio processing chain.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>meter~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/mfcc/","title":"mfcc","text":"<p>The <code>mfcc</code> object calculates Mel-Frequency Cepstral Coefficients (MFCCs) from an audio sample array, providing a compact representation of the spectral envelope. It is designed for offline audio feature extraction, allowing users to configure parameters like windowing, normalization, and filterbank spacing. This object is typically used as part of an analysis chain to derive audio descriptors.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>mfcc</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/mfcc~/","title":"mfcc~","text":"<p>The <code>mfcc~</code> object computes Mel-Frequency Cepstral Coefficients from an audio signal, emphasizing lower spectral content and using a Discrete Cosine Transform. It outputs a 38-component MFCC vector as a list when triggered, useful for audio feature extraction and timbre classification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>mfcc~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/minSample/","title":"minSample","text":"<p>The <code>minSample</code> object analyzes a specified window within a Pure Data array, typically containing audio samples. It outputs the minimum sample value found within that window and its corresponding index relative to the start of the window. This object is useful for offline analysis of audio or other data stored in arrays.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>minSample</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/minSampleDelta/","title":"minSampleDelta","text":"<p>The minSampleDelta object analyzes a specified window within a sample array to find the smallest absolute difference between consecutive samples. It outputs this minimum delta value and its corresponding index relative to the analysis window. This object is useful for offline signal analysis, particularly for identifying regions of minimal change in sampled data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>minSampleDelta</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/minSampleDelta~/","title":"minSampleDelta~","text":"<p>The <code>minSampleDelta~</code> object calculates the minimum absolute difference between adjacent samples within a specified audio window. It outputs this minimum value and its index, useful for detecting quiet moments before or after sound events. The window size can be set as a creation argument or changed via a message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>minSampleDelta~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/minSample~/","title":"minSample~","text":"<p>The <code>minSample~</code> object reports the value and index of the smallest sample within a configurable N-sample window of incoming audio. It handles its own audio buffering, eliminating the need for an external <code>[block~]</code> object. The window size can be set at creation or dynamically changed via a \"window\" message, and it does not require a power-of-two size.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>minSample~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/morphine~/","title":"morphine~","text":"<p><code>morphine~</code> performs spectral morphing, enabling a smooth transition between two audio signals in the frequency domain. It supports exponential transition scaling and requires FFT size and overlap factor as creation arguments.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>morphine~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/nearestPoint/","title":"nearestPoint","text":"<p>The nearestPoint object identifies the closest point(s) within a stored dataset to a given input point in a multi-dimensional space. It builds its dataset by receiving points in its left inlet and, upon receiving a query point in its right inlet, outputs the index and distance of the nearest match(es). The dimensionality of points is defined at creation, and the number of returned matches can be specified.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>nearestPoint</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/peakSample/","title":"peakSample","text":"<p>The <code>peakSample</code> object analyzes a specified audio array or a segment of it to find the maximum sample value and its corresponding index. It can be triggered to analyze the entire array or a defined window, outputting both the peak value and its relative position within the analyzed segment. This is useful for identifying the loudest point in an audio buffer for offline analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>peakSample</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/peakSample~/","title":"peakSample~","text":"<p>The <code>peakSample~</code> object identifies the sample with the largest magnitude within a defined window of an incoming audio signal, outputting both its value and index. It handles its own audio buffering and windowing, making it suitable for real-time audio feature extraction. This descriptor is particularly useful as an input for timbre identification and classification systems.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>peakSample~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/peakamp~/","title":"peakamp~","text":"<p>The <code>peakamp~</code> object reports the absolute peak amplitude of an audio signal since its last output. It can output this value when triggered by a <code>bang</code> or at regular intervals set by a float (in milliseconds). This is useful for monitoring signal levels or triggering events based on amplitude peaks.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>peakamp~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/phaseSpec/","title":"phaseSpec","text":"<p>The <code>phaseSpec</code> object from <code>timbreIDLib</code> calculates the phase spectrum of a specified window within an audio sample array. It supports various windowing functions and can process pre-computed FFT data, making it suitable for non-real-time spectral analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>phaseSpec</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/phaseSpec~/","title":"phaseSpec~","text":"<p>The <code>phaseSpec~</code> object calculates and outputs the phase spectrum of an audio signal. It performs a Fourier transform and extracts the phase (angle) information for each frequency bin, outputting a list of values between -pi and +pi radians when triggered by a bang. This object is useful for analyzing the phase characteristics of sounds, which can be influenced by windowing functions, and can be used as a feature for timbre classification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>phaseSpec~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/pix_blobtracker/","title":"pix_blobtracker","text":"<p>The <code>pix_blobtracker</code> object in Pure Data is a video analysis tool designed to detect and track multiple distinct regions (blobs) within an incoming video stream. It processes the luminance channel of the video, allowing users to configure parameters such as the maximum number of blobs, minimum pixel luminance threshold, and minimum blob size. The object outputs a <code>gemlist</code> containing data about the identified blobs.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_blobtracker</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/pix_multiblob/","title":"pix_multiblob","text":"<p>The <code>pix_multiblob</code> object detects multiple \"blobs\" within an image, defined as adjacent pixels exceeding a specified luminance <code>threshold</code> and minimum <code>blobSize</code>. It outputs a <code>gemlist</code> and a matrix containing detailed information (e.g., center, size, angle) for each detected blob, making it suitable for image analysis and motion tracking.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_multiblob</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/range/","title":"range","text":"<p>The <code>range~</code> object analyzes an incoming signal (float or signal) to determine its minimum and maximum values. It can be reset to restart the analysis. This object is useful for tracking the dynamic range of a signal over time.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>range</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/range~/","title":"range~","text":"<p>The <code>range~</code> object analyzes an incoming audio signal and continuously outputs its minimum and maximum amplitude values. It can be reset by an impulse or a bang message, allowing for analysis over specific time windows.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>range~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/roughcurve/","title":"roughcurve","text":"<p>The <code>roughcurve</code> object is an abstraction that generates curves representing psychoacoustic roughness and spectral scales. It takes musical interval arguments in cents and is designed to provide data for analysis or synthesis applications, leveraging an underlying <code>roughness</code> external.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>roughcurve</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/roughness/","title":"roughness","text":"<p>The <code>roughness</code> object estimates the psychoacoustic roughness of an audio spectrum in real-time, often utilizing the output of <code>sigmund</code>. It implements various models for roughness calculation, including those proposed by Plomp &amp; Levelt, Parncutt, Vassilakis, and Sethares, allowing for different psychoacoustic interpretations. It takes frequency and amplitude lists as input to perform its analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>roughness</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/salience/","title":"salience","text":"<p>The <code>salience</code> object analyzes an audio spectrum to calculate its tone salience and multiplicity. It quantifies the number of consciously perceived tones, taking into account auditory levels and pitch audibilities. This object is primarily used for psychoacoustic analysis of complex sounds.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>salience</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/sampleBuffer~/","title":"sampleBuffer~","text":"<p>The <code>sampleBuffer~</code> object buffers incoming audio, providing a windowed segment of the audio stream for real-time analysis. It is particularly useful for inspecting the exact audio frame processed by analysis objects like <code>timbreID</code>. Its window size can be set at creation or dynamically changed, and it handles its own buffering without requiring <code>block~</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>sampleBuffer~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/sharpness~/","title":"sharpness~","text":"<p>The <code>sharpness~</code> object measures the psychoacoustic sharpness of an audio signal. It provides a numerical value representing the perceived high-frequency content, which can be useful for analyzing timbre.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>sharpness~</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specBrightness/","title":"specBrightness","text":"<p>The specBrightness object from the timbreIDLib analyzes the spectral brightness of an audio sample. It calculates the ratio of high spectral content above a user-defined boundary frequency within a specified segment of an audio array. This object is designed for offline analysis and can efficiently process pre-computed FFT data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specBrightness</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specBrightness~/","title":"specBrightness~","text":"<p>The <code>specBrightness~</code> object calculates the spectral brightness of an audio signal, defined as the ratio of high-frequency spectral magnitudes to total spectral magnitudes. It allows setting the window size, boundary frequency, and windowing function, and can use either magnitude or power spectrum. This descriptor is useful for analyzing the timbral characteristics of sounds, particularly their perceived \"brightness.\"</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specBrightness~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specCentroid/","title":"specCentroid","text":"<p>The <code>specCentroid</code> object calculates the spectral centroid of an audio array, providing a measure of the 'brightness' or 'timbral richness' of a sound. It analyzes a specified window of an array and supports various windowing functions and input types (magnitude or power spectrum). This object can integrate into analysis chains by accepting pre-computed FFT or magnitude spectrum data for efficient processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specCentroid</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specCentroid~/","title":"specCentroid~","text":"<p>The <code>specCentroid~</code> object calculates the spectral centroid, a low-level timbre feature representing the \"center of mass\" of an audio signal's magnitude spectrum. It outputs the frequency associated with this spectral center, useful for analyzing and classifying audio timbres. Users can configure the window size and windowing function.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specCentroid~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specFlatness/","title":"specFlatness","text":"<p>The <code>specFlatness</code> object calculates the spectral flatness of an audio array, providing a measure of its noisiness. It supports analysis of the entire array or specific segments, with configurable windowing functions, sample rate, and spectrum type (magnitude or power). This object is designed for non-real-time audio analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specFlatness</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specFlatness~/","title":"specFlatness~","text":"<p>The <code>specFlatness~</code> object calculates the spectral flatness of an incoming audio signal, providing a measure of how noise-like a sound is. A value of 1 indicates perfect flatness (like white noise), while a sinusoid approaches zero. This descriptor is useful for timbre analysis and can be used as a feature for real-time audio classification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specFlatness~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specFlux/","title":"specFlux","text":"<p>The <code>specFlux</code> object calculates spectral flux, a measure of how quickly the spectrum of a sound is changing. It determines the difference between consecutive spectral frames, offering insights into sound events like onsets. Users can configure windowing functions, power spectrum usage, normalization, logarithmic scaling, and choose between flux, growth, or decay modes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specFlux</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specFlux~/","title":"specFlux~","text":"<p>The <code>specFlux~</code> object calculates the spectral flux of an audio signal, quantifying how quickly its spectrum changes over time. It offers options for measuring total flux, spectral growth, or decay, and outputs both a summed value and detailed bin-by-bin differences. This object is useful for analyzing transient events and can serve as an input for timbre identification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specFlux~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specHarmonicity/","title":"specHarmonicity","text":"<p>The <code>specHarmonicity</code> object calculates the spectral harmonicity and inharmonicity of an audio sample. It analyzes the spectral content, optionally using a provided fundamental frequency, to quantify how closely the partials align with a harmonic series. This object is primarily used for extracting timbral descriptors from audio.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specHarmonicity</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specHarmonicity~/","title":"specHarmonicity~","text":"<p>The <code>specHarmonicity~</code> object quantifies the harmonic alignment of spectral peaks in an audio signal, outputting both harmonicity and inharmonicity values between 0 and 1. It identifies significant spectral peaks and assesses how well they align with a given fundamental frequency, which can be supplied externally (e.g., from <code>sigmund~</code>) or automatically derived from the lowest non-DC spectral peak. This object is useful for extracting timbral features for real-time sound analysis and classification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specHarmonicity~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specIrregularity/","title":"specIrregularity","text":"<p>The <code>specIrregularity</code> object calculates the spectral irregularity of an audio signal, providing a numerical descriptor of its timbral characteristics. It supports both Jensen and Krimphoff algorithms, analyzing full audio arrays or specific windows with various windowing functions. Designed for efficiency, it can integrate into analysis chains by accepting pre-computed FFT or magnitude spectrum data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specIrregularity</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specIrregularity~/","title":"specIrregularity~","text":"<p>The <code>specIrregularity~</code> object calculates the spectral irregularity of an audio signal, indicating how jagged or smooth its frequency spectrum is. It supports both Jensen and Krimphoff algorithms and allows custom window sizing for analysis. This descriptor is valuable for timbre perception and can serve as a feature for real-time audio classification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specIrregularity~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specKurtosis/","title":"specKurtosis","text":"<p>The <code>specKurtosis</code> object calculates the spectral kurtosis of an audio array, serving as a non-real-time spectral descriptor. It can analyze a specified window or the entire array, with configurable windowing functions, sample rates, and spectrum types (magnitude or power). A key feature is its ability to accept pre-computed FFT or magnitude spectrum data via <code>chain_</code> messages for efficient chained analysis workflows.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specKurtosis</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specKurtosis~/","title":"specKurtosis~","text":"<p>The <code>specKurtosis~</code> object calculates the spectral kurtosis of an audio signal, quantifying the peakedness of its spectrum. It is useful for distinguishing between tonal and noisy sounds, with higher values indicating more peaked spectra (like a sine wave) and lower values for flatter spectra (like noise). This descriptor can be used for real-time timbre identification and offers configurable windowing and spectrum type (magnitude or power).</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specKurtosis~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specRolloff/","title":"specRolloff","text":"<p>The <code>specRolloff</code> object calculates the spectral rolloff of an audio signal, identifying the frequency below which a specified percentage of the total spectral energy lies. Designed for non-real-time analysis, it processes data from a sample array and can integrate into analysis chains by accepting pre-computed FFT or magnitude spectrum data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specRolloff</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specRolloff~/","title":"specRolloff~","text":"<p>The specRolloff~ object calculates the spectral rolloff frequency of an audio signal, representing the frequency below which a specified percentage of the total spectral energy is concentrated. It serves as an audio descriptor, useful for real-time timbre identification. Users can customize parameters such as window size, energy concentration target, windowing function, and whether to use a power spectrum.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specRolloff~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specSkewness/","title":"specSkewness","text":"<p>The <code>specSkewness</code> object from the <code>timbreIDLib</code> calculates the spectral skewness of an audio sample array. Designed for offline, non-real-time analysis, it can process raw audio data or accept pre-computed FFT data via <code>chain_</code> messages for efficient integration into larger analysis workflows. This object outputs a numerical value representing the asymmetry of the audio spectrum.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specSkewness</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specSkewness~/","title":"specSkewness~","text":"<p>The <code>specSkewness~</code> object calculates the spectral skewness of an audio signal, providing a measure of the asymmetry of its spectral envelope. A positive value indicates more energy in lower frequencies, while a negative value suggests more energy in higher frequencies. It handles its own audio buffering and windowing, making it suitable for real-time spectral analysis and feature extraction for timbre classification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specSkewness~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specSlope/","title":"specSlope","text":"<p>The <code>specSlope</code> object calculates the spectral slope of an audio sample, quantifying the average decrease in amplitude across increasing frequencies. It operates on a specified audio array, typically after spectral analysis, and is useful for characterizing the brightness or darkness of a sound's timbre.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specSlope</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specSlope~/","title":"specSlope~","text":"<p>The <code>specSlope~</code> object calculates the spectral slope of an incoming audio signal, representing the slope of the best-fit line through its magnitude spectrum. It handles internal audio buffering and windowing, allowing configuration of window size and function. This object is primarily used as a feature extractor for timbre analysis and classification within the <code>timbreIDLib</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specSlope~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specSpread/","title":"specSpread","text":"<p>The <code>specSpread</code> object calculates the spectral spread, a measure of the dispersion of the spectrum around its centroid, for an audio signal stored in a Pure Data array. It allows users to specify the analysis window, windowing function, and sample rate, and can also process pre-computed FFT or magnitude spectrum data for efficient chained analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specSpread</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/specSpread~/","title":"specSpread~","text":"<p>The <code>specSpread~</code> object calculates the spectral spread of an audio signal, quantifying the concentration of its energy around the spectral centroid in Hz. This descriptor helps distinguish between sounds with narrow (e.g., pure tones) and broad (e.g., noise) spectral energy distributions. It is designed for real-time audio analysis and serves as a feature for timbre classification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>specSpread~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/spectrograph~/","title":"spectrograph~","text":"<p>The <code>spectrograph~</code> object visualizes FFT amplitudes from 0 Hz to Nyquist, using a Hann window for spectral analysis. It allows customization of FFT size, amplitude scaling (linear or dB), frequency scaling (linear or logarithmic), and display dimensions. The visualization can update continuously or on demand via a <code>bang</code> message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>spectrograph~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/tID-conversion/","title":"tID-conversion","text":"<p>This Pure Data object provides essential conversion utilities for audio frequency analysis. It allows conversion between linear frequencies (Hz), psychoacoustic Bark and Mel scales, and Fast Fourier Transform (FFT) bin numbers. These conversions are fundamental for working with spectral audio features and descriptors.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>tID-conversion</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/tID_fft/","title":"tID_fft","text":"<p>The tID_fft object performs an offline Fast Fourier Transform (FFT) on a specified segment of an audio sample array in Pure Data. It offers configurable windowing functions, normalization, and zero-padding for detailed spectral analysis. The object outputs the real and imaginary components of the FFT, which are useful for further frequency-domain processing or visualization.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>tID_fft</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/tID_fft~/","title":"tID_fft~","text":"<p>The <code>tID_fft~</code> object computes the complex Fast Fourier Transform (FFT) of an audio signal, triggered by a bang. It outputs the real and imaginary components of the FFT as two separate lists, handling internal audio buffering and windowing. This object is designed for extracting frequency-domain features, particularly useful for timbre identification and classification tasks.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>tID_fft~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/tID_mean/","title":"tID_mean","text":"<p>The <code>tID_mean</code> object calculates the arithmetic mean of a list of numbers. It is designed to summarize time-varying timbre attributes, such as spectral centroid, measured by other <code>timbreID</code> externals. This enables the creation of compact, comparable descriptors for sounds of different durations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>tID_mean</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/tID_std/","title":"tID_std","text":"<p>The tID_std object calculates the standard deviation of a list of numbers, requiring at least two elements. It is primarily used to summarize time-varying timbre attributes, such as spectral centroid or flatness, measured by other timbreID externals. This allows for the comparison of spectro-temporal characteristics between sounds of varying durations by reducing complex time-series data into a single, compact descriptor.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>tID_std</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/tabletool/","title":"tabletool","text":"<p>The <code>tabletool</code> object provides a comprehensive set of functionalities for manipulating, analyzing, and querying data stored in Pure Data tables. It supports various mathematical operations, data transformations like shifting and scaling, and searching for specific values or patterns. Additionally, it includes methods for statistical analysis, fundamental frequency estimation (HPS), and data merging for classification tasks.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>tabletool</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/timbreID/","title":"timbreID","text":"<p>The timbreID object stores, clusters, and classifies audio feature vectors, enabling tasks like sound identification and timbre ordering. It performs nearest-neighbor searches and hierarchical clustering on incoming feature data. This object is particularly useful for real-time concatenative synthesis and analyzing large datasets of pre-recorded audio.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>timbreID</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/tonalness/","title":"tonalness","text":"<p>The <code>tonalness</code> object calculates the pitch clarity of an audio spectrum, providing measures for both pure and complex tones. It can be used in real-time, often in conjunction with objects like <code>sigmund</code>, to analyze the tonal characteristics of an incoming audio signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>tonalness</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/vu~/","title":"vu~","text":"<p>The <code>vu~</code> object analyzes an incoming audio signal, providing both its RMS (Root Mean Square) amplitude and peak amplitude, expressed in dBFS. Users can configure the analysis window and hop size in samples via creation arguments or by sending a <code>set</code> message to the object.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>vu~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/waveNoise/","title":"waveNoise","text":"<p>The <code>waveNoise</code> object analyzes a specified sample array to quantify its \"noisiness\" or the rate of change in its waveform direction. It outputs a numerical descriptor, useful for identifying low-level noise or characterizing the texture of a sound. The object can analyze either the entire array or a specific segment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>waveNoise</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/waveNoise~/","title":"waveNoise~","text":"<p>The <code>waveNoise~</code> object measures the noisiness of an audio signal by counting the number of times the signal changes direction within a specified window. It provides a time-domain descriptor that can be used for audio analysis, such as identifying timbres. The window size is configurable.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>waveNoise~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/waveSlope/","title":"waveSlope","text":"<p>The waveSlope object analyzes the slope of a waveform stored in a Pure Data array. Designed for offline analysis, it provides a measure of waveform change over time. Users should be aware that low-amplitude sections can yield erratic results, suggesting the use of an amplitude threshold for cleaner data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>waveSlope</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/waveSlope~/","title":"waveSlope~","text":"<p>The <code>waveSlope~</code> object calculates the slope of the best-fit line through the absolute value of audio samples within a configurable analysis window. It outputs this slope when triggered, enabling segmentation of sound events into attack, decay, and sustain phases based on amplitude changes. This descriptor can be used as a feature for real-time timbre classification.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>waveSlope~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/zeroCrossing/","title":"zeroCrossing","text":"<p>The <code>zeroCrossing</code> object calculates the zero-crossing rate of a specified audio array or a segment of it. It can normalize the result by window size and suggests applying an amplitude threshold to filter out noise. This object is designed for offline analysis, with a real-time counterpart <code>zeroCrossing~</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>zeroCrossing</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/zeroCrossing~/","title":"zeroCrossing~","text":"<p>The <code>zeroCrossing~</code> object measures the noisiness or frequency-related characteristics of an audio signal by counting how many times it crosses the zero amplitude point within a specified window. It outputs this count as a numerical feature, often used as a crude timbre descriptor. Users can set the analysis window size via a creation argument or a 'window' message, and it's recommended to apply an amplitude threshold before measurement to avoid low-level noise interference.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>timbreIDLib</code> and install it. Then create an object with <code>declare -lib timbreIDLib -path timbreIDLib</code>. Finally, use <code>zeroCrossing~</code> or any other object from <code>timbreIDLib</code>.</p></li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/zerocross~/","title":"zerocross~","text":"<p>The <code>zerocross~</code> object detects zero crossings in an audio signal. It outputs an impulse when the signal crosses from non-positive to positive, positive to non-positive, or either direction, depending on its configuration. This is useful for analyzing the timing of signal changes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>zerocross~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/descriptors/zerox~/","title":"zerox~","text":"<p>The <code>zerox~</code> object detects and counts zero crossings in an audio signal. Its left outlet outputs the number of zero crossings per signal block, which can be used for transient detection or frequency estimation. The right outlet sends an impulse whenever a zero crossing is detected, with the impulse value configurable via the <code>set</code> message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>zerox~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/distortion/circuit~/","title":"circuit~","text":"<p>The <code>circuit~</code> object simulates analog electronic circuits from a text description, allowing users to model various audio effects and synthesis components. It takes a text-based circuit definition and can be modulated by input signals, with audio output generated from specified probes. This object is CPU intensive and may not perfectly replicate every real-world circuit.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>circuit~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/distortion/crusher.m~/","title":"crusher.m~","text":"<p><code>crusher.m~</code> is a multichannel wrapper for the <code>crusher~</code> object from the ELSE library. It applies bit crushing and sample rate reduction effects to audio signals, degrading their quality in a controlled manner. Users should refer to the <code>crusher~</code> help file for detailed usage.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>crusher.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/distortion/crusher~/","title":"crusher~","text":"<p><code>crusher~</code> is a Pure Data object that functions as a bit-crusher and decimator. It distorts an input audio signal by reducing its bit depth and downsampling its sample rate, generating aliasing effects. Parameters for bit reduction and decimation range from 0 (original sound) to 1 (maximum effect).</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>crusher~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/distortion/degrade~/","title":"degrade~","text":"<p>The <code>degrade~</code> object reduces the quality of an incoming audio signal by manipulating its sampling rate and bit depth. It takes a signal and two control inputs (sample rate from 0-1 and bit depth from 1-24) to produce a resampled and quantized output signal, effectively acting as a bitcrusher.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>degrade~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/distortion/digidistort/","title":"digidistort","text":"<p>The <code>digidistort</code> object provides digital distortion effects for audio signals. It includes <code>quantize~</code> for quantizing a signal with a variable step number and <code>swap~</code> for byte-swapping a signal after converting it to 16-bit. These functionalities are designed to create distinct \"digital\" sounding distortions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>digidistort</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/distortion/drive.m~/","title":"drive.m~","text":"<p><code>drive.m~</code> is a multichannel audio object that acts as a wrapper for the <code>drive~</code> object from the ELSE library, providing a distortion or saturation effect. It allows control over the drive amount, with a parameter range from 0.1 to 1000, to add harmonic richness or grit to audio signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>drive.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/distortion/drive~/","title":"drive~","text":"<p>The <code>drive~</code> object simulates analog \"soft clipping\" distortion by applying various non-linear transfer functions to an audio signal. It offers different modes, including a tanh function and threshold-based clipping, controlled by a drive factor. This object is primarily used to add harmonic saturation and warmth to audio.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>drive~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/distortion/fold~/","title":"fold~","text":"<p>The <code>fold~</code> object performs wavefolding, a waveshaping technique that mirrors out-of-bounds signal values back into a specified range. It takes an audio signal as input and folds it between a low and high value, which can be set via signal inlets or messages. This object supports multichannel audio, applying the folding operation across all channels.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>fold~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/distortion/kink~/","title":"kink~","text":"<p>The <code>kink~</code> object distorts a <code>phasor~</code> signal by applying a non-linear bend or \"kink\" to its phase. It takes a phase input and a slope, modifying the output based on whether the phase times the slope is above or below a 0.5 threshold. This results in a distorted phasor output, useful for various forms of phase modulation and waveshaping.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>kink~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/distortion/lookup~/","title":"lookup~","text":"<p>The <code>lookup~</code> object performs waveshaping distortion by mapping input signal values (from -1 to 1) to indices of an array or table, which acts as a transfer function. It can use any array in Pure Data, including <code>buffer~</code> objects (though it only reads the first channel of multichannel buffers), and allows control over the start and end points of the lookup range, even reversing the index scan if the start point exceeds the end point. This enables effects like turntable scratches when scanning audio samples.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>lookup~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/distortion/overdrive~/","title":"overdrive~","text":"<p>The <code>overdrive~</code> object simulates analog tube-based soft clipping, applying a non-linear transfer function to an incoming audio signal to create distortion. A \"drive factor\" controls the intensity of the effect, with values greater than 1 increasing distortion and values less than 1 producing a different type of distortion. Be cautious with drive factors less than 0, as they can lead to very loud output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>overdrive~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/distortion/rm.m~/","title":"rm.m~","text":"<p><code>rm.m~</code> is a wrapper around the <code>rm~</code> object from the ELSE library, designed for ring modulation. It functions as a simple audio effect module, akin to a pedal, for altering sound signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rm.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/distortion/rubber/","title":"rubber","text":"<p>The <code>rubber</code> object is a GEM object that renders and distorts a square. When a vertex is 'grabbed' by a bang, it can be moved, causing adjacent vertices to follow inertly, creating a rubber-like distortion effect. Another bang releases the vertex, returning it to its original position.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>rubber</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/dynamics/compress~/","title":"compress~","text":"<p>The <code>compress~</code> object is an audio compressor that attenuates an input signal when its amplitude exceeds a specified threshold. It allows control over parameters such as threshold (in dB), attenuation ratio, attack and release times (in ms), output gain, and RMS averaging size. This object is used for dynamic range processing of audio signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>compress~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/dynamics/duck~/","title":"duck~","text":"<p>The <code>duck~</code> object is an audio dynamics processor that automatically reduces the volume of an input signal when a separate control signal exceeds a defined threshold. It provides adjustable parameters for threshold, attenuation ratio, and the attack and release times of the ducking effect.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>duck~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/dynamics/expand~/","title":"expand~","text":"<p><code>expand~</code> is an audio expander that attenuates an input signal when its level falls below a specified threshold. It allows control over the threshold (in dB), attenuation ratio, and the attack and release times (in ms) for dynamic processing of audio signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>expand~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/dynamics/fluid.bufthresh/","title":"fluid.bufthresh","text":"<p>The <code>fluid.bufthresh</code> object processes a source buffer by replacing all values below a specified threshold with zero. The resulting modified data is then copied into a destination buffer. This object is useful for dynamic processing tasks such as noise gating or isolating specific signal components within an audio buffer.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufthresh</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/dynamics/flunson/","title":"flunson","text":"<p>The <code>flunson</code> object rescales audio amplitudes according to the Fletcher-Munson curves. Its purpose is to adjust the perceived loudness of audio signals, accounting for the human ear's varying sensitivity to different frequencies and amplitudes. This can be used for psychoacoustic processing or dynamic range adjustments.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>flunson</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/dynamics/level~/","title":"level~","text":"<p>The <code>level~</code> object adjusts the gain of an incoming signal in decibels (dB). It provides a range from -100 dB (silence) to +12 dB, with 0 dB representing unity gain. This object also supports multichannel signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>level~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/dynamics/limiter~/","title":"limiter~","text":"<p>The <code>limiter~</code> object in Pure Data functions as an audio dynamics processor, preventing signals from exceeding a specified output level to avoid clipping. It can operate as a single-threshold limiter, a two-threshold \"crack\" limiter, or a compressor, with all levels defined in dB. Due to its algorithm, it requires a small internal delay on the input signal for proper operation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>limiter~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/dynamics/noisegate~/","title":"noisegate~","text":"<p><code>noisegate~</code> is a noise gate abstraction that passes audio signals only when their RMS value exceeds a specified threshold (in dBFS). It includes configurable parameters for threshold, attack time, release time, and analysis window size.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>noisegate~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/dynamics/norm~/","title":"norm~","text":"<p><code>norm~</code> is an audio signal normalizer that adjusts the input signal's level to a specified decibel full scale (dBFS) value. It operates based on a moving RMS analysis, allowing users to define the analysis window size in samples. This object is useful for consistently setting the loudness of audio signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>norm~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/dynamics/pvcompand~/","title":"pvcompand~","text":"<p><code>pvcompand~</code> is a spectral compander that either expands or compresses the dynamic range of audio signals in the frequency domain. It operates on differences within the spectrum, allowing for dynamic processing based on a configurable threshold in decibels.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>pvcompand~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/dynamics/vca.m~/","title":"vca.m~","text":"<p>The <code>vca.m~</code> object functions as a mono Voltage Controlled Amplifier (VCA), allowing dynamic control over an audio signal's level via a Control Voltage (CV) input. It supports multichannel audio and includes a VU meter that displays the average sum of all channels.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>vca.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/adsr.m~/","title":"adsr.m~","text":"<p>The <code>adsr.m~</code> object is a polyphonic ADSR envelope generator designed for multichannel audio signals. It takes gate input in its left inlet and can be retriggered by impulses or a <code>bang</code> message. Attack, decay, and release times are specified in milliseconds, while the sustain point is a ratio of the gate input, with additional audio CV controls for these parameters.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>adsr.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/adsr~/","title":"adsr~","text":"<p>The <code>adsr~</code> object generates an Attack-Decay-Sustain-Release envelope signal, primarily used for amplitude or parameter control. It supports both control and signal rate gating, retriggering, and offers curve and lag modes for shaping the envelope. The object also provides a status outlet indicating when the envelope is active and supports multichannel operation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>adsr~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/asr~/","title":"asr~","text":"<p><code>asr~</code> is a gated attack/sustain/release envelope generator, functioning as a simplified version of <code>adsr~</code>. It produces an envelope signal based on a gate input, with configurable attack and release times in milliseconds, and offers options for linear, logarithmic, or 'lag' curves. The object also provides a status output indicating when the envelope is active, which is useful for controlling DSP processing, and supports multichannel operation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>asr~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/autofade2~/","title":"autofade2~","text":"<p>The <code>autofade2~</code> object provides automatic fade-in and fade-out functionality for multiple audio signals. It responds to a gate control, using internal lookup tables to apply various fade curves such as <code>quartic</code>, <code>sin</code>, or <code>hann</code>. This object is useful for smoothly transitioning audio signals based on a control signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>autofade2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/autofade~/","title":"autofade~","text":"<p><code>autofade~</code> provides automatic fade-in and fade-out functionality for multiple audio inputs. It uses a gate control to trigger fades and offers various fade curves like <code>quartic</code>, <code>sin</code>, and <code>lin</code>. This object is useful for smoothly transitioning audio signals based on input activity.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>autofade~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/decay~/","title":"decay~","text":"<p>The <code>decay~</code> object is a one-pole filter that generates an exponential decay from incoming impulses, similar to an envelope generator. The decay time, specified in milliseconds, controls how long the signal takes to drop by 60dB. It supports both control and signal rate inputs for triggering and setting decay time, and handles multichannel audio.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>decay~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/envelope~/","title":"envelope~","text":"<p>The <code>envelope~</code> object generates various envelope waveforms based on a phase input. It offers six different types, including <code>sin</code>, <code>hann</code>, <code>tri</code>, <code>vsaw</code>, <code>gauss</code>, and <code>trapezoid</code>, each with customizable parameters. This object is useful for shaping audio signals or control data with different amplitude contours.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>envelope~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/envgen~/","title":"envgen~","text":"<p><code>envgen~</code> is a versatile audio envelope and line generator that shapes signals over time using defined segments of duration and target values. It supports ADSR-like behavior with sustain points, legato retriggering, and various curve types (linear, exponential, sine, Hann). The object can be triggered by control messages or audio signals, and provides a status outlet for integration with other Pure Data objects like <code>switch~</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>envgen~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/envrms~/","title":"envrms~","text":"<p>The <code>envrms~</code> object is an envelope follower designed for audio signals. Unlike the standard <code>env~</code> object which outputs decibel values, <code>envrms~</code> directly calculates and outputs the Root Mean Square (RMS) amplitude of the incoming signal as a float. This simplifies patch design by providing a direct measurement of signal power, often eliminating the need for a separate <code>dbtorms</code> conversion.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>envrms~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/fluid.ampgate~/","title":"fluid.ampgate~","text":"<p><code>fluid.ampgate~</code> is a real-time absolute amplitude threshold gate detector for audio signals. It identifies onsets and offsets by comparing the signal's amplitude against configurable thresholds, allowing for lookahead/lookback and minimum gate durations. This object is useful for segmenting audio or controlling signal flow based on amplitude events.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.ampgate~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/function/","title":"function","text":"<p>The <code>function</code> object is a graphical user interface (GUI) for creating and manipulating breakpoint functions. It allows users to draw custom envelopes or waveforms by clicking and dragging points, which can then be used to control other Pure Data objects like <code>function~</code> or <code>envgen~</code>. It supports setting ranges, dimensions, colors, and can output the breakpoint data as a list or interpolate values based on an index.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>function</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/glide2/","title":"glide2","text":"<p>The <code>glide2</code> object generates a smooth glide or portamento effect for incoming float or signal values. It allows independent control over the glide-up and glide-down times in milliseconds, and an exponential factor can be applied to shape the transition curve. This object is useful for smoothing control signals or creating pitch glides.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>glide2</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/grain.live~/","title":"grain.live~","text":"<p><code>grain.live~</code> is a live input granulator that generates dynamic clouds of grains from an incoming audio signal. It offers control over various grain parameters such as size, amplitude, pan, and transposition, and can operate in either asynchronous (randomized) or synchronous (equally spaced) modes. Users can also specify different envelope types for the grains, including sine, Hann, triangle, and Gaussian shapes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>grain.live~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/grain.sampler~/","title":"grain.sampler~","text":"<p><code>grain.sampler~</code> is a sample-based granulator that generates clouds of grains from a loaded audio sample. It provides extensive control over grain parameters such as density, size, position, transposition, panning, and reversal probability. The object supports both asynchronous (random) and synchronous (evenly spaced) grain generation, and allows for custom grain envelopes and autotuning to specified scales.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>grain.sampler~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/line~/","title":"line~","text":"<p>The <code>line~</code> object generates linear signal ramps or envelopes. It smoothly transitions a signal from its current value to a target value over a specified duration in milliseconds. It can also be paused, resumed, or stopped, and sends a bang when the target value is reached.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>line~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/peak~/","title":"peak~","text":"<p>The <code>peak~</code> object analyzes an incoming audio signal to report its peak amplitude. Similar to <code>env~</code>, it calculates the peak value within a specified window size and outputs it as a float, either in linear scale or dBFS. It is useful for dynamic analysis and control based on signal loudness.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>peak~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/smooth/","title":"smooth","text":"<p>The <code>smooth~</code> object in Pure Data smooths control signal transitions over a specified time in milliseconds, using linear interpolation by default. It can also apply exponential curves, similar to the curve parameter in envelope generators like <code>asr~</code> and <code>adsr~</code>. This object is useful for creating glides or portamento effects on control signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>smooth</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/envelopes/smooth2/","title":"smooth2","text":"<p>The <code>smooth2</code> object smooths incoming control values, providing a gradual transition (portamento) between them. Unlike <code>smooth</code>, it allows for independent control over ramp-up and ramp-down times in milliseconds. Users can also define a curve factor for the smoothing, similar to the curve parameter found in <code>asr~</code> and <code>adsr~</code> objects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>smooth2</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/extensions/cyclone/","title":"cyclone","text":"<p>The <code>cyclone</code> object acts as an interface to the Cyclone library, a collection of common Pure Data objects, often with Max/MSP-compatible alphanumeric aliases. It accepts \"about\" and \"version\" messages to display library information and its version number. The <code>cyclone</code> library must be loaded to access its various utility, comparative, and mathematical objects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>cyclone</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/extensions/hello/","title":"hello","text":"<p>The <code>hello</code> object is an example Pure Data external written in Lua, loaded through the ELSE library. Its primary purpose is to demonstrate how developers can create and integrate help files for their custom externals. This object serves as a template for understanding the documentation process for Lua-based extensions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>hello</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/extensions/lua/","title":"lua","text":"<p>The <code>lua</code> object in Pure Data allows for inline scripting in Lua, enabling the creation and loading of Pure Data externals written in Lua. While currently experimental and not fully functional, it facilitates the integration of Lua-based objects like <code>circle</code> and <code>scope3d~</code> into Pure Data patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lua</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/freadln/","title":"freadln","text":"<p>The <code>freadln</code> object reads text files line by line, outputting each line as a list. It operates sequentially, providing a <code>bang</code> when the end of the file is reached, and does not load the entire file into memory, making it suitable for large files where random access is not required.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>freadln</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/fwriteln/","title":"fwriteln","text":"<p>The <code>fwriteln</code> object writes text files line by line, serving as a simplified version of <code>textfile</code>. It does not cache the file in its buffer and lacks random access capabilities. Users can open files, send messages to write lines, and close the file to ensure content is saved.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>fwriteln</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/glsl_vertex/","title":"glsl_vertex","text":"<p>The <code>glsl_vertex</code> object loads and compiles a GLSL vertex shader into a module. It outputs an ID for this module, which can then be linked with the <code>glsl_program</code> object to create custom OpenGL shaders. This object is essential for advanced graphics programming within GEM, requiring OpenGL 2.0 and GLSL support.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>glsl_vertex</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/model/","title":"model","text":"<p>The <code>model</code> object in Pure Data renders 3D models saved in the Alias/Wavefront OBJ format. It allows loading OBJ files and provides control over rendering properties such as scaling, smoothing, material usage, group visibility, and texture mapping. This object is primarily used for displaying 3D graphics within GEM patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>model</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/modelfiler/","title":"modelfiler","text":"<p>The <code>modelfiler</code> object loads 3D model data from Alias/Wavefront OBJ files into Pure Data tables. It allows users to specify tables for vertex positions, colors, normals, and texture coordinates, making the model's geometric data accessible for further manipulation and rendering, typically with other GEM objects like <code>gemvertexbuffer</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>modelfiler</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/msgfile/","title":"msgfile","text":"<p>The <code>msgfile</code> object reads and writes messages to text files, extending the functionality of <code>textfile</code>. It allows for in-place editing of file content, including inserting, appending, deleting, and replacing lines. It also provides navigation, searching, and debugging features, and can handle CSV files.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>msgfile</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/multimodel/","title":"multimodel","text":"<p>The <code>multimodel</code> object loads and renders multiple 3D Alias/Wavefront (<code>.obj</code>) models. It uses a wildcard in the filename (e.g., <code>model*.obj</code>) to specify a sequence of numbered models to load. This object is a core component for displaying dynamic 3D graphics within the GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>multimodel</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/pix_buffer_filmopen/","title":"pix_buffer_filmopen","text":"<p>The <code>pix_buffer_filmopen</code> object reads a movie file into a named <code>pix_buffer</code> for subsequent image processing within GEM. It is primarily intended for initialization, requiring a GEM window to be active. Upon successful loading, it outputs the movie's dimensions and a bang.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_buffer_filmopen</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/pix_fiducialtrack/","title":"pix_fiducialtrack","text":"<p>The <code>pix_fiducialtrack</code> object detects and tracks fiducial markers in black and white grayscale images, utilizing a system similar to reacTable. It requires a dictionary file to identify the fiducials and outputs lists describing the detected markers. For optimal results, intelligent image thresholding is recommended.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_fiducialtrack</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/pix_film/","title":"pix_film","text":"<p>The <code>pix_film</code> object loads and plays digital video files, providing frames as textures for use within Pure Data's GEM environment. It supports various video formats via a plugin system and offers control over playback, frame selection, and color space decoding.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_film</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/pix_image/","title":"pix_image","text":"<p>The <code>pix_image</code> object loads image files (like TIFFs and JPEGs) into Pure Data, primarily for use as textures or for bitblitting operations within the GEM environment. It supports threaded image loading for smoother performance, which can be toggled via a <code>thread</code> message, and images can be loaded dynamically using the <code>open</code> message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_image</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/pix_imageInPlace/","title":"pix_imageInPlace","text":"<p>The <code>pix_imageInPlace</code> object efficiently loads multiple image files (TIFF, JPEG, PNG) into texture RAM, enabling very fast switching between them. It functions as a \"pix source\" within GEM, eliminating the need for a separate <code>pix_texture</code> object. Users can specify image files using a wildcard pattern and select which image to display via an integer index.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_imageInPlace</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/pix_movie/","title":"pix_movie","text":"<p>The <code>pix_movie</code> object loads and plays digital video files, making their frames available as textures for real-time graphics rendering within GEM. It combines the video playback capabilities of <code>pix_film</code> with the texture generation of <code>pix_texture</code>. Users can specify a movie file as an argument and control playback by setting the frame number.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_movie</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/pix_multiimage/","title":"pix_multiimage","text":"<p>The <code>pix_multiimage</code> object loads multiple image files (TIFF, JPEG, PNG) into memory, which can then be used as textures or for bitblitting within GEM. Images can be loaded via an argument with a wildcard or dynamically using the <code>open</code> message, and individual images are selected for display using a 0-indexed integer inlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_multiimage</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/pix_record/","title":"pix_record","text":"<p>The <code>pix_record</code> object in Pure Data is used to record sequences of video frames (pixes) to an output file, pipe, or video device. It allows users to specify the output file, select video codecs (optionally via a dialog), and control the recording process frame by frame using <code>bang</code> messages or automatically with the <code>auto</code> message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_record</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/pix_write/","title":"pix_write","text":"<p>The <code>pix_write</code> object captures a snapshot of the current GEM frame buffer and saves it to a file. It supports saving images as TIFF or JPEG, with options to specify the filename, quality, and the region (offset and dimensions) of the frame buffer to capture. A <code>bang</code> message triggers the snapshot and file writing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_write</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/pix_writer/","title":"pix_writer","text":"<p>The <code>pix_writer</code> object saves the current GEM texture (image) to a file on disk. It supports writing images in TIFF and JPEG formats, with options to specify the base filename and image type using the <code>file</code> message. This object is primarily used for capturing visual output as sequentially numbered image files.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_writer</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_i_o/sf-play_record/","title":"sf-play_record","text":"<p>The <code>sf-play_record</code> object provides a hard disk recording and playback system for Pure Data, enabling multi-track audio recordings. It uses <code>sfrecord</code> for recording in RAW format and <code>sfplay</code> for playback, which can skip file headers. The object also provides level monitoring and status output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>sf-play_record</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_io/batch.rec~/","title":"batch.rec~","text":"<p>The <code>batch.rec~</code> object is a convenient abstraction for batch recording audio signals to a sound file, leveraging <code>writesf~</code> internally. It allows users to specify the recording duration in milliseconds and the output filename, supporting up to 64 channels. A dialog box can be opened to select the save file, and a <code>bang</code> is output upon completion.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>batch.rec~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_io/capture~/","title":"capture~","text":"<p>The <code>capture~</code> object is a debugging and investigation tool that captures incoming audio signals (<code>signal</code>) and stores their samples. It can display these samples in a text window or write them to a specified file. Users can configure the number of samples to store, decimal precision, and choose between capturing the first N samples or continuously capturing the latest N samples for signal inspection.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>capture~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_io/dir/","title":"dir","text":"<p>The <code>dir</code> object in Pure Data is used for managing and querying directories and their contents. It allows users to open directories (relative or absolute paths), list files within them, filter by extension, and navigate through the file list. It can also determine the current patch's directory and handle abstraction depth.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>dir</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_io/fluid.concataudiofiles/","title":"fluid.concataudiofiles","text":"<p>The <code>fluid.concataudiofiles</code> object takes a list of paths to audio files, loads them, and concatenates them into a single audio buffer. It outputs a <code>bang</code> message upon completion, indicating that the concatenated files are ready for use.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.concataudiofiles</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_io/openfile/","title":"openfile","text":"<p>The <code>openfile</code> object allows users to open files, folders, or web links from within Pure Data. It can be triggered by a <code>bang</code> message or by providing a symbol message with the target path or URL. Additionally, the object can be set to a hyperlink mode, enabling direct interaction by clicking the object in the patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>openfile</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_io/pic/","title":"pic","text":"<p>The <code>pic</code> object loads and displays image files (<code>.gif</code>, <code>.ppm</code>, <code>.pgm</code>) within a Pure Data patch. It acts as a clickable GUI element, outputting a <code>bang</code> on click (or 1/0 in latch mode) and can report image dimensions. It's useful for creating interactive buttons or visual feedback.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pic</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_io/pvoc.player~/","title":"pvoc.player~","text":"<p><code>pvoc.player~</code> is a Pure Data object designed for playing back sound files with independent time stretching and pitch shifting capabilities, utilizing a phase vocoder. It supports various audio file formats and offers control over playback speed, transposition, looping, and sample range. Users should note that this object is CPU-intensive.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pvoc.player~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_io/rec.file~/","title":"rec.file~","text":"<p>The <code>rec.file~</code> object records incoming audio signals to a sound file, serving as a convenient wrapper around <code>writesf~</code>. It provides control over recording start/stop, filename, sample rate, and includes options for fade in/out and a maximum recording time. Upon completion, it outputs a bang.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rec.file~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_io/rec/","title":"rec","text":"<p>The <code>rec</code> object in Pure Data records and plays back any messages across multiple independent tracks (up to 64). It allows for controlling playback speed, muting, unmuting, and clearing individual or all tracks. Additionally, <code>rec</code> can save and load recorded message data to and from text files.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rec</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_io/scala/","title":"scala","text":"<p>The <code>scala</code> object imports musical scales from <code>.scl</code> files, converting them into a list of cents for use within Pure Data. It also provides metadata about the loaded scale, such as its file and scale names. The object can open a file dialog for selection or load a specified <code>.scl</code> file directly.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>scala</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_io/sfinfo/","title":"sfinfo","text":"<p>The <code>sfinfo</code> object queries information about sound files, supporting formats compatible with <code>sfload</code> and <code>play.file~</code>. It can retrieve the number of audio channels and, for AIFF files, detailed instrument metadata such as base note, velocity ranges, gain, and loop points. This object is currently experimental.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sfinfo</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/file_io/sfload/","title":"sfload","text":"<p>The <code>sfload</code> object is a versatile sound file loader for Pure Data, similar to <code>soundfiler</code> but supporting a wider range of audio formats (AAC, FLAC, MP3, WAV, etc.) and capable of loading into multichannel arrays. It can also download files directly from web links and offers a threaded mode for loading large files without choking Pd's audio.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sfload</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/allpass.2nd~/","title":"allpass.2nd~","text":"<p><code>allpass.2nd~</code> is a second-order allpass filter that shifts the phase of an incoming signal without altering its amplitude. It allows control over the center frequency, where the phase shift is 180 degrees, and the steepness of this shift via a Q or bandwidth parameter. This object is useful for phase manipulation, creating comb filtering effects when mixed with the original signal, or as a building block for more complex audio effects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>allpass.2nd~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/allpass.filt~/","title":"allpass.filt~","text":"<p><code>allpass.filt~</code> is an allpass filter abstraction that allows setting its order (a multiple of 2) as an argument. It processes an input signal, applying filtering based on a central frequency and resonance (Q) that can be controlled via inlets. This object is built by cascading multiple <code>allpass.2nd~</code> objects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>allpass.filt~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/allpass~/","title":"allpass~","text":"<p>The <code>allpass~</code> object implements an all-pass filter, which passes all frequencies without altering their gain but changes their phase. It is primarily used for filtering and delay effects, taking a signal input and outputting the processed signal. Parameters include maximum delay time, current delay time in milliseconds, and a gain coefficient.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>allpass~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/bandpass~/","title":"bandpass~","text":"<p>The <code>bandpass~</code> object is a 2nd order bandpass resonant filter for audio signals. It allows users to filter a signal by specifying a center frequency and resonance, which can be defined as either 'Q' or bandwidth in octaves. The filter maintains a constant 0dB gain at its resonant frequency and includes options to bypass the input or clear its internal memory.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bandpass~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/bandstop~/","title":"bandstop~","text":"<p><code>bandstop~</code> is a 2nd order band-reject filter, also known as a notch filter, designed to attenuate a specific range of frequencies while allowing others to pass. It calculates filter coefficients based on a center frequency and a resonance parameter (Q or bandwidth in octaves) to precisely shape the audio signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bandstop~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/bicoeff/","title":"bicoeff","text":"<p>The <code>bicoeff</code> object is a graphical user interface (GUI) that generates 5 biquad filter coefficients for vanilla's <code>biquad~</code> object. Users can interactively set filter parameters like frequency, bandwidth, and gain by clicking and dragging on the GUI, supporting various filter types such as <code>eq</code>, <code>lowpass</code>, and <code>highshelf</code>. It outputs a list of coefficients that can be directly fed into a <code>biquad~</code> object to create dynamic filters.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bicoeff</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/biquads~/","title":"biquads~","text":"<p>The <code>biquads~</code> object implements a series of cascaded biquad filters, designed to process and modify incoming audio signals. It accepts a signal to be filtered and can be configured with a list of biquad coefficients. Additionally, it provides messages to clear its internal memory and to bypass the filtering process.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>biquads~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/bpbank~/","title":"bpbank~","text":"<p><code>bpbank~</code> is a bank of <code>bandpass~</code> filters, allowing users to specify frequencies, amplitudes, Q values, and ramp times for each filter in the bank via lists. The number of filters is dynamically set by the size of the input parameter lists. It also supports multichannel output, where each filter's output can be sent to a separate channel.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bpbank~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/brickwall~/","title":"brickwall~","text":"<p>The <code>brickwall~</code> object is a 10th-order Butterworth lowpass filter primarily designed for anti-aliasing. It applies 16x oversampling to effectively remove high-frequency components from a signal. Its cutoff frequency can be controlled via its second inlet, defaulting to 0.75 times the global Nyquist frequency.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>brickwall~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/buffir~/","title":"buffir~","text":"<p>The <code>buffir~</code> object is a table/buffer-based Finite Impulse Response (FIR) filter that convolves an input signal with samples from a specified buffer. It can work with any array in Pure Data, though it only reads the first channel of multichannel <code>buffer~</code> objects. Users can configure the buffer using the <code>set</code> message, with a maximum buffer size of 4096 samples.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>buffir~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/burrow~/","title":"burrow~","text":"<p>The <code>burrow~</code> object performs cross-filtering on an audio input, using a second audio input as a filter source. It operates based on FFT information, allowing for dynamic filtering controlled by parameters like frequency, threshold (in dB), and a multiplier factor. It supports both normal and inverted filtering modes and can be configured with window size and overlap for its FFT analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>burrow~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/coeff2pz/","title":"coeff2pz","text":"<p>The <code>coeff2pz</code> object converts biquad filter coefficients into their pole-zero representation. It outputs the coordinates of two poles, two zeros, and the overall gain of the filter's frequency response. This is useful for analyzing or visualizing the characteristics of a biquad filter.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>coeff2pz</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/crossover~/","title":"crossover~","text":"<p>The <code>crossover~</code> object functions as a 3rd order Butterworth crossover filter, designed to split an incoming audio signal into distinct low-pass and high-pass components. It provides two outlets for these filtered signals and allows for dynamic control of the cutoff frequency via a float or signal input. The filter's internal memory can be reset using a 'clear' message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>crossover~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/cross~/","title":"cross~","text":"<p><code>cross~</code> is a 3rd order Butterworth crossover filter designed to split an incoming audio signal into lowpass and highpass components. It provides two outlets for these filtered signals, which can be used independently or combined to create a full crossover. The filter's cutoff frequency can be controlled via a float or signal input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>cross~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/dentist~/","title":"dentist~","text":"<p>The <code>dentist~</code> object functions as a \"spiky\" filter, selectively allowing certain partials to pass while attenuating others. It offers dynamic control over filter configurations, including the number of frequency bins, randomization of settings, and smooth interpolation between different filter states.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>dentist~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/drown~/","title":"drown~","text":"<p>The <code>drown~</code> object performs spectral noise floor manipulation on audio signals using FFT. It allows for reducing or increasing the energy of individual FFT bins based on a per-bin amplitude threshold and a gain factor. This object is useful for adaptive noise reduction or spectral enhancement.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>drown~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/eq~/","title":"eq~","text":"<p>The <code>eq~</code> object is a 2nd order parametric equalizer filter, capable of functioning as both a peak and a notch filter. It processes an input signal, allowing precise control over its frequency content through adjustable central frequency, resonance (Q or bandwidth), and gain in decibels. It also provides <code>clear</code> and <code>bypass</code> messages for control.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>eq~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/glide2~/","title":"glide2~","text":"<p>The <code>glide2~</code> object smooths incoming audio signals by applying distinct ramp-up and ramp-down times, effectively creating a portamento effect. It supports both linear and exponential glide curves and can handle multichannel signals, applying individual glide times per channel when provided.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>glide2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/highpass~/","title":"highpass~","text":"<p><code>highpass~</code> is a 2nd order highpass resonant filter designed for audio signals. It attenuates frequencies below a user-defined cutoff, with fixed zeroes at 0Hz and Nyquist, and its behavior is shaped by adjustable center frequency and resonance (Q or bandwidth) parameters. This object is based on standard biquad filter coefficient formulas.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>highpass~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/highshelf~/","title":"highshelf~","text":"<p>The <code>highshelf~</code> object implements a 2nd order highshelf filter, designed to modify the high-frequency content of an audio signal. It allows control over the shelving frequency, slope, and gain in decibels, and includes <code>clear</code> and <code>bypass</code> messages for operational control. Its internal calculations are based on standard biquad filter coefficient formulas.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>highshelf~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/hip.bw~/","title":"hip.bw~","text":"<p><code>hip.bw~</code> is a highpass Butterworth filter abstraction for Pure Data. It processes an incoming audio signal, allowing frequencies above a specified cutoff to pass through, while attenuating lower frequencies. The filter's characteristics can be adjusted by setting its cutoff frequency and order (from 2 to 100).</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>hip.bw~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/lag~/","title":"lag~","text":"<p><code>lag~</code> is a one-pole filter that applies an exponential glide or portamento to an incoming signal. It smooths signal changes over a specified lag time in milliseconds, which can be controlled by a float or signal. This object is useful for creating smooth transitions and preventing abrupt changes in audio or control signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lag~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/lop.bw~/","title":"lop.bw~","text":"<p><code>lop.bw~</code> is a lowpass Butterworth filter abstraction for Pure Data. It processes an incoming audio signal, allowing only frequencies below a specified cutoff to pass through. The filter's characteristics can be adjusted by setting the cutoff frequency and an order from 2 to 100.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lop.bw~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/lop2~/","title":"lop2~","text":"<p><code>lop2~</code> is a 1st order lowpass filter designed for audio signals. Unlike standard lowpass filters, it includes a fixed zero at -1 on the z-plane, ensuring that the Nyquist frequency is always filtered out. It takes an audio signal and a cutoff frequency (float or signal) as inputs, outputting the filtered signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lop2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/lores~/","title":"lores~","text":"<p>The <code>lores~</code> object implements an inexpensive resonant lowpass filter, designed to shape audio signals by attenuating frequencies above a specified cutoff. Its cutoff frequency and resonance can be controlled via inlets, allowing for dynamic filter sweeps. Users can send a 'clear' message to reset its internal state, which is helpful for managing its recursive filter behavior.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>lores~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/lowpass~/","title":"lowpass~","text":"<p><code>lowpass~</code> is a 2nd order resonant lowpass filter for audio signals. It allows control over the central frequency and resonance (Q or bandwidth), and can be bypassed or cleared. This biquad filter inherently filters out both 0Hz and Nyquist frequencies.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lowpass~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/lowshelf~/","title":"lowshelf~","text":"<p><code>lowshelf~</code> is a 2nd order lowshelf filter designed to modify the low-frequency content of an audio signal. It provides control over the shelving frequency, slope, and gain in dB, allowing for precise tonal shaping. The object also includes a <code>clear</code> message to reset its internal memory and a <code>bypass</code> inlet to toggle its effect.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lowshelf~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/mavg/","title":"mavg","text":"<p>The <code>mavg</code> object implements a moving average filter, smoothing incoming float values by averaging a specified number of recent samples. The second inlet sets the number of samples to include in the average, providing a simple way to reduce noise or smooth control signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>mavg</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/mindwarp~/","title":"mindwarp~","text":"<p>The <code>mindwarp~</code> object performs spectral envelope warping, primarily utilizing frequency shaping. It is designed to manipulate the spectral characteristics of a signal, often in conjunction with pitch-scaling or phase vocoder processes (like <code>pvoc~</code>). Users can control the warping effect using parameters such as \"warp factor\" and \"shape width\".</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>mindwarp~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/mov.avg~/","title":"mov.avg~","text":"<p>The <code>mov.avg~</code> object calculates a moving (or running) average of an incoming audio signal. It outputs the arithmetic mean over the last 'n' samples, where 'n' can be set as the first argument or via a <code>float</code> or <code>signal</code> input. The object also supports an \"absolute average\" mode and allows clearing its internal memory or setting a new maximum buffer size.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>mov.avg~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/multyq~/","title":"multyq~","text":"<p><code>multyq~</code> is a four-band spectral equalizer designed for audio processing. It allows for shaping the frequency content of an audio signal across four distinct bands. The object also features \"autosweep\" and \"sweep high end\" capabilities, suggesting dynamic or automated frequency adjustments.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>multyq~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/onepole~/","title":"onepole~","text":"<p><code>onepole~</code> is a highly efficient one-pole IIR low-pass filter that provides 6dB per octave attenuation. It is primarily used for gently rolling off high frequencies from audio signals or for smoothing control signals. The cutoff frequency can be set in Hertz, linearly (0-1), or in radians, offering flexible control over its behavior.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>onepole~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/phaseshift~/","title":"phaseshift~","text":"<p>The <code>phaseshift~</code> object is a 2nd order allpass filter that alters the phase of an audio signal without changing its gain. It shifts the phase from 0 to 360 degrees, with a specified frequency point where the shift is 180 degrees, and a 'Q' parameter controlling the steepness of this phase change. It can be used to create frequency cancellations when combined with the original signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>phaseshift~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/pix_convolve/","title":"pix_convolve","text":"<p>The <code>pix_convolve</code> object applies a convolution kernel to a GEM pix (image). It takes matrix dimensions as arguments and a convolution kernel as a list, along with an optional scale factor. This allows for various image processing effects like blurring, sharpening, or edge detection.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_convolve</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/pix_tIIR/","title":"pix_tIIR","text":"<p>The <code>pix_tIIR</code> object implements a time-based Infinite Impulse Response (IIR) filter for image processing within GEM. It applies feedback and feedforward coefficients to create temporal effects on visual data, similar to motion blur. Users can dynamically configure the filter's characteristics by providing coefficients through its inlets.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_tIIR</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/rampsmooth~/","title":"rampsmooth~","text":"<p>The <code>rampsmooth~</code> object linearly smooths an incoming audio signal over a specified number of samples. When the input value changes, it creates a linear ramp to the new value, making it useful for envelope following or as a lowpass filter.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>rampsmooth~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/resonator2~/","title":"resonator2~","text":"<p><code>resonator2~</code> is a resonant filter, similar to <code>vcf~</code> and <code>resonator~</code>, designed to be excited by impulses. It takes a frequency and a decay time to produce an oscillating output, with separate outlets for cosine and sine initial phases. This object can simulate a simplified spring model and is suitable for creating resonant textures or pitched feedback.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>resonator2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/resonator~/","title":"resonator~","text":"<p>The <code>resonator~</code> object is a resonant filter that allows for precise control over decay time using a <code>t60</code> parameter. It functions in bandpass (default), lowpass, or highpass modes, taking a resonance frequency and an excitation signal as inputs. This object can resemble an oscillator when excited by an impulse, making it suitable for physical modeling applications.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>resonator~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/resonbank2~/","title":"resonbank2~","text":"<p><code>resonbank2~</code> is a bank of resonant filters designed for sound synthesis, similar to <code>oscbank~</code> but focused on resonance. It takes an impulse excitation signal, a frequency multiplier, and a decay time multiplier to shape the sound. The object allows for dynamic control over its resonant filters through lists of partials, decay times, and amplitudes, and supports multichannel output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>resonbank2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/resonbank~/","title":"resonbank~","text":"<p><code>resonbank~</code> is a synthesis object that creates a bank of resonant filters, ideal for generating complex, harmonically rich sounds. It allows precise control over individual resonator frequencies (via partials and a fundamental), amplitudes, and decay times, responding to an excitation signal. The object supports multichannel output and smooth parameter transitions with a configurable ramp time.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>resonbank~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/reson~/","title":"reson~","text":"<p><code>reson~</code> is a bandpass resonant filter that processes audio signals. It allows control over gain, center frequency, and Q (resonance) via floats or signals. As a recursive filter, it includes a <code>clear</code> message to reset its internal buffer if instability occurs.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>reson~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/slide~/","title":"slide~","text":"<p>The <code>slide~</code> object logarithmically smooths an input audio signal, preventing abrupt changes and clicks. It provides independent control over \"slide up\" and \"slide down\" times in samples, making it useful for non-linear audio transitions, envelope following, and lowpass filtering.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>slide~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/svfilter~/","title":"svfilter~","text":"<p>The <code>svfilter~</code> object implements Chamberlin's state-variable filter, providing simultaneous lowpass, highpass, bandpass, and notch (bandstop) outputs. It takes an audio signal, a cutoff/center frequency, and a Q/resonance value as inputs, allowing for dynamic control over the filter characteristics. A <code>clear</code> message can be sent to reset the filter.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>svfilter~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/svf~/","title":"svf~","text":"<p>The <code>svf~</code> object implements a state-variable filter, simultaneously outputting lowpass, highpass, bandpass, and notch filtered signals. It allows control over cutoff/center frequency (in Hz, linear, or radians) and Q/resonance, making it a versatile tool for shaping audio.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>svf~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/vcf.m~/","title":"vcf.m~","text":"<p>The <code>vcf.m~</code> object is a single-channel lowpass filter module. It takes an audio input and allows control over its cutoff frequency (in Hz) and resonance (in Q). Both cutoff and resonance parameters can be modulated via dedicated CV inlets, which add to their respective knob-set values.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>vcf.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/vocoder~/","title":"vocoder~","text":"<p>The <code>vocoder~</code> object is a classic cross-synthesis channel vocoder. It processes a \"synth source\" signal by applying the spectral characteristics of a \"control source\" signal, producing a vocoded output. Users can define the number of channels, filter Q, and specific frequencies for each channel using MIDI values.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>vocoder~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/filters/xsyn~/","title":"xsyn~","text":"<p>The <code>xsyn~</code> object performs cross synthesis by filtering its first audio input with the spectral characteristics of its second audio input. This allows for the imposition of one sound's timbral qualities onto another.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>xsyn~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/accum/","title":"accum","text":"<p>The <code>accum</code> object maintains an internal numerical value, which can be initialized or set at any time. It allows for this value to be incremented by addition or multiplied by a given factor. The current accumulated value is outputted upon receiving a bang or when the value is set.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>accum</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/active/","title":"active","text":"<p>The <code>active</code> object outputs <code>1</code> when its parent patch canvas is the active, front-most window, and <code>0</code> when it is inactive. This is useful for dynamically adjusting a patch's behavior or UI elements, such as filtering input from <code>key</code> or <code>ctlin</code> objects, based on its window focus.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>active</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/any2symbol/","title":"any2symbol","text":"<p>The <code>any2symbol</code> object converts any incoming message into a symbol message. This utility is crucial for standardizing diverse data types into a common symbolic format, enabling consistent processing and routing within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>any2symbol</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/atof/","title":"atof","text":"<p>The <code>atof</code> object converts an ASCII symbol (text) into a floating-point number. It is part of the zexy library and is useful for parsing numerical data received as text.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>atof</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/bangbang/","title":"bangbang","text":"<p>The <code>bangbang</code> object emits multiple bang messages from its outlets in right-to-left order whenever it receives any input. The number of bangs (and outlets) is configurable via an argument, with a default of 2 and a maximum of 40. It serves as a simple utility to trigger several events simultaneously from a single input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>bangbang</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/bangdiv/","title":"bangdiv","text":"<p>The <code>bangdiv</code> object acts as a bang divider or counter. It outputs a bang for every N input bangs, where N is a configurable division value. It also provides a \"rest\" output, likely indicating when an input bang does not result in a divided output bang.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bangdiv</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/bitsafe~/","title":"bitsafe~","text":"<p>The <code>bitsafe~</code> object replaces NaN (Not a Number) and infinity values in an incoming signal with zero. It also filters out denormal numbers, converting them to zero, which is particularly useful when working with bitwise operations or other contexts where these values can cause issues.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>bitsafe~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/blocksize~/","title":"blocksize~","text":"<p>The <code>blocksize~</code> object reports and controls Pure Data's audio block size, which defines the number of samples processed at once. It allows querying and setting this crucial parameter in samples, milliseconds, or Hertz. This utility helps adapt patch behavior to the current DSP settings.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>blocksize~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/break/","title":"break","text":"<p>The <code>break</code> object splits incoming messages or lists into smaller parts. It can break a symbol message or a list using a specified symbol as a separator. This is useful for parsing argument lists, such as those received from the <code>args</code> object, into individual components.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>break</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/canvas.vis/","title":"canvas.vis","text":"<p>The <code>canvas.vis</code> object reports the visibility status of a Pure Data canvas window. It outputs a float (1 for visible, 0 for invisible) and can query the current window or parent canvases using a depth argument. This is useful for controlling patch behavior based on window visibility.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>canvas.vis</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/change~/","title":"change~","text":"<p>The <code>change~</code> object detects changes in an incoming audio signal and outputs its direction. It sends <code>1</code> for an increasing signal, <code>-1</code> for a decreasing signal, and <code>0</code> if the signal remains constant. This object is useful for triggering events or controlling parameters based on signal movement.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>change~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/chrono/","title":"chrono","text":"<p>The <code>chrono</code> object functions as either a stopwatch chronometer or a timer. It can be started, stopped, continued, and rewound using <code>bang</code> or <code>float</code> inputs. When configured as a timer with the <code>-t</code> flag, its duration can be set via a <code>list</code> input specifying minutes and seconds.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>chrono</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/counter/","title":"counter","text":"<p>The <code>counter</code> object increments or decrements an integer value within a specified minimum and maximum range. It supports counting up, down, or alternating directions, and offers configurable \"carry\" modes to signal when the counter reaches its limits. This object is useful for creating step sequencers, managing event counts, or controlling iterative processes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>counter</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/date/","title":"date","text":"<p>The <code>date</code> object retrieves the current system date and time. Upon receiving a <code>bang</code>, it outputs various components of the date, such as month, year, day of month, day of week, and day of year, as floats. It can provide this information for both local time and GMT.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>date</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/datetime/","title":"datetime","text":"<p>The <code>datetime</code> object provides the current local date and time as lists. When triggered by a <code>bang</code>, it outputs the time (hour, minute, second) from its left outlet and the date (year, month, day, weekday) from its right outlet. It can also output the number of seconds since the beginning of the month via a <code>seed</code> message, which can be used for time-based calculations or as a seed for other objects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>datetime</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/default/","title":"default","text":"<p>The <code>default</code> object stores a single message, which can be initialized with a creation argument. Sending a <code>bang</code> to its left inlet outputs the currently stored message. Any other message sent to the left inlet is passed through without being stored, while messages sent to the right inlet are stored as the new default.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>default</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/dollsym/","title":"dollsym","text":"<p>The <code>dollsym</code> object expands dollar arguments (e.g., <code>$0</code>, <code>$1</code>) within an input symbol, replacing them with their corresponding values from the current Pure Data abstraction's context. It can optionally take a depth argument to control the expansion scope, making it useful for managing unique identifiers and arguments within nested abstractions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>dollsym</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/else/","title":"else","text":"<p>The <code>else</code> object serves as a utility for the ELSE library, providing information such as its version and installation directory. It also facilitates the loading of the ELSE library, which is crucial for enabling Lua externals (<code>.pd_lua</code>) and integrating with the object browser plugins.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>else</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/fontsize/","title":"fontsize","text":"<p>The <code>fontsize</code> object reports the current font size of a Pure Data patch. It outputs the font size when it receives a <code>bang</code>. Optionally, a float argument can specify a \"depth\" level, allowing it to report the font size of parent patches, which is useful within abstractions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>fontsize</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/glide/","title":"glide","text":"<p>The <code>glide</code> object creates a smooth glide or portamento effect for incoming float values. It takes a float input and a specified glide time in milliseconds to gradually transition between values. Users can also adjust an exponential factor and a refresh rate to control the curve and smoothness of the glide.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>glide</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/group/","title":"group","text":"<p>The <code>group</code> object collects incoming messages and outputs them as a single list once a specified \"group size\" is reached. If an input list exceeds the group size, the remaining elements are carried over to the next group. A <code>bang</code> message can be sent to force the output of any pending, incomplete group.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>group</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/initmess/","title":"initmess","text":"<p>The <code>initmess</code> object functions similarly to a standard message box, but it automatically sends its contained message(s) upon patch loading. It supports comma and semicolon syntax for sequencing multiple messages, and its output can also be triggered by a <code>bang</code> message or by clicking on it.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>initmess</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/irmanip/","title":"irmanip","text":"<p><code>irmanip</code> is a utility object designed for comprehensive manipulation of Impulse Response (IR) data stored in buffers. It offers functionalities such as deconvolution with various control modes, phase adjustment, IR inversion, and averaging multiple IRs in the frequency domain. Additionally, it provides tools for trimming, fading, padding, and normalizing IRs, making it a versatile tool for preparing and processing IRs for audio applications.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>piro</code> and install it. Then create an object with <code>declare -lib piro -path piro</code>. Finally, use <code>irmanip</code> or any other object from <code>piro</code>.</p></li> <li> Library developed mainly by Marco Matteo Markidis.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/list2int/","title":"list2int","text":"<p>The <code>list2int</code> object converts all floating-point numbers within an incoming list to integers. It processes lists containing both floats and symbols, outputting a modified list where only the float values have been cast. This object is part of the <code>zexy</code> library and is useful for data type conversion within Pure Data lists.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>list2int</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/merge/","title":"merge","text":"<p>The <code>merge</code> object combines messages from multiple inlets into a single list message. It accepts any message type in its inlets, treating a bang input as an empty list. The output is a list containing the merged messages, or a bang if the resulting list is empty.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>merge</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/meter/","title":"meter","text":"<p>The <code>meter</code> object functions as a CPU load meter, providing real-time information about the system's CPU usage. It can be toggled on or off and outputs the current CPU load as a float value.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>meter</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/metronome/","title":"metronome","text":"<p>The <code>metronome</code> object provides precise timing and synchronization, outputting bangs at specified tempos and beat phases. It supports various time signatures, including complex and irrational ones, and allows for flexible beat length definitions. It outputs detailed timeline data (bar, sub-bar, beat, sub-beat counts) and a 0-1 beat phase, serving as a core timing engine for musical and event sequencing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>metronome</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/nop/","title":"nop","text":"<p>The <code>nop</code> object in Pure Data acts as a \"no operation\" pass-through. It simply forwards any message received at its inlet directly to its outlet without alteration. This can be useful for creating visual spacing in a patch or for debugging message flow.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>nop</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/operating_system/","title":"operating_system","text":"<p>The <code>operating_system</code> object outputs a symbol representing the operating system Pure Data is currently running on. It receives a <code>bang</code> to trigger the output, providing system information useful for conditional patching.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>operating_system</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/pick/","title":"pick","text":"<p>The <code>pick</code> object extracts a specific element from an incoming message based on a provided index. A float input determines the element's position, where negative values count from the end of the message. If the specified index is out of range, <code>pick</code> outputs nothing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pick</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/pipe2/","title":"pipe2","text":"<p>The <code>pipe2</code> object functions similarly to Pure Data's vanilla <code>pipe</code> object, delaying incoming messages. It accepts any type of message and outputs it after a specified delay time. The delay can be set as an argument during creation or dynamically via a float message in milliseconds.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pipe2</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/pulsediv~/","title":"pulsediv~","text":"<p><code>pulsediv~</code> is a signal-rate trigger divider that outputs an impulse on its left outlet after a specified number of input triggers. It can be configured with a division value and a starting count, and its internal counter can be reset by an impulse on its third inlet. This object is useful for creating rhythmic divisions or delayed triggers from a continuous stream of impulses.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pulsediv~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/rawprint/","title":"rawprint","text":"<p>The <code>rawprint</code> object, part of the <code>zexy</code> external library, provides a raw message printing functionality. It operates similarly to the built-in <code>print</code> object but outputs messages directly without additional formatting or triggering, accepting any message type in its inlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>rawprint</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/retrieve/","title":"retrieve","text":"<p>The <code>retrieve</code> object fetches data from other connected Pure Data objects or GUI elements. It can be configured with a <code>set &lt;symbol&gt;</code> message to specify a receive name, and a <code>bang</code> message triggers the retrieval of the current value. This object is useful for accessing and storing dynamic data within a patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>retrieve</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/reverse/","title":"reverse","text":"<p>The <code>reverse</code> object in Pure Data reverses the order of elements within incoming messages or lists. It takes any message or list as input and outputs the same message or list with its elements in reverse order. This is a fundamental utility for manipulating data flow and reordering sequences.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>reverse</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/sah~/","title":"sah~","text":"<p>The <code>sah~</code> object samples an input signal when a trigger signal crosses a specified threshold, then holds that sampled value until the trigger crosses the threshold again. It effectively synchronizes one signal's value to the events of another, acting as a sample-and-hold for audio signals. It is best used with impulse-like trigger signals rather than continuous ramps.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>sah~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/slew/","title":"slew","text":"<p>The <code>slew</code> object limits the rate of change of incoming numerical values, creating a smooth transition or \"portamento\" effect. It takes an amplitude limit per second and allows adjustment of its internal refresh rate to control the smoothness of the output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>slew</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/slice/","title":"slice","text":"<p>The <code>slice</code> object splits an incoming list into two parts based on a specified split point <code>n</code>. If <code>n</code> is positive, it outputs the first <code>n</code> elements to the left outlet and the rest to the right; if <code>n</code> is negative, it outputs the last <code>n</code> elements to the right and the rest to the left. This allows for flexible manipulation and routing of list data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>slice</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/sort/","title":"sort","text":"<p>The <code>sort</code> object sorts incoming messages, typically lists of numbers, in either ascending or descending order. It can output the sorted list itself or a list of indices representing the sorted order of the original input. This object is useful for organizing data streams based on numerical value.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sort</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/speedlim/","title":"speedlim","text":"<p>The <code>speedlim</code> object limits the rate at which messages are passed through. It only outputs a message if a specified time (in milliseconds) has elapsed since the last output. If multiple messages arrive within the time limit, only the last one received is sent after the delay, effectively filtering rapid message bursts.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>speedlim</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/substitute/","title":"substitute","text":"<p>The <code>substitute</code> object replaces elements within an incoming message. It can replace all occurrences of a specified element with another, or, if a third argument is provided, it will only replace the first occurrence. This object is useful for dynamically modifying message content in Pure Data patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>substitute</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/swap~/","title":"swap~","text":"<p>The <code>swap~</code> object processes incoming audio signals by first converting them to a 16-bit format. It then performs a byte-swap operation on this 16-bit signal. This object is useful for low-level manipulation of audio data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>swap~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/tempo~/","title":"tempo~","text":"<p>The <code>tempo~</code> object functions as a signal-rate metronome, generating impulses at a specified tempo in BPM, milliseconds, or Hertz. It supports external synchronization via impulses and includes a \"swing\" parameter to introduce rhythmic deviation, which can be controlled with a seed for pseudo-randomness.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>tempo~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/time/","title":"time","text":"<p>The <code>time</code> object outputs the current system time in milliseconds, seconds, minutes, and hours when triggered by a <code>bang</code>. Its counterpart, <code>time_GMT</code>, provides the same time information but adjusted to Greenwich Mean Time. These objects are useful for timestamping events or synchronizing processes within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>time</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/tosymbol/","title":"tosymbol","text":"<p>The <code>tosymbol</code> object converts any incoming message, including floats, lists, or other data types, into a single symbol message. It is particularly useful for consolidating multi-element messages into a single symbol, which is often not directly supported in Pure Data Vanilla. Users can specify a custom separator character via the <code>separator</code> message or <code>@separator</code> attribute to replace spaces in the original message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>tosymbol</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/trighold~/","title":"trighold~","text":"<p>The <code>trighold~</code> object holds the value of an incoming trigger signal. When a trigger occurs, its value is captured and maintained at the output. A <code>clear</code> message can reset the held value to zero.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>trighold~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/general_utilities/trough/","title":"trough","text":"<p>The <code>trough</code> object tracks a minimum (trough) value. It compares incoming floats to its current trough; if the input is smaller, it becomes the new trough and is output. It also provides outlets indicating whether a new trough was set or not, and can be initialized or updated with a list of two values.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>trough</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/granular/brane.m~/","title":"brane.m~","text":"<p>The <code>brane.m~</code> object is a comprehensive audio processing module that functions as a granulator, sampler, and harmonizer. It can record and play mono audio files, offering pitch shifting for root and harmony voices, and includes an autotuner with a built-in scale generator for pitch quantization. Key features include extensive looping, slicing, random playback settings, and a robust preset management system.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>brane.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/granular/grain.synth~/","title":"grain.synth~","text":"<p><code>grain.synth~</code> is a waveform-based granular synthesizer that generates clouds of pitched grains. It allows control over parameters such as grain duration, size, pitch, amplitude, and panning, and supports both synchronous and asynchronous modes. Users can also define custom grain envelopes and apply tuning scales.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>grain.synth~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/granular/gran.player~/","title":"gran.player~","text":"<p><code>gran.player~</code> is a Pure Data object designed for granular playback of audio files, offering independent control over time stretching and pitch shifting. It loads sound files, similar to <code>player~</code>, and provides messages to control playback (start, stop, pause, loop), set playback speed, transposition in cents, and grain size. It also supports multichannel audio output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gran.player~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/granular/pitch.shift~/","title":"pitch.shift~","text":"<p>The <code>pitch.shift~</code> object performs real-time pitch shifting on an audio signal using granulation. It allows users to control the transposition amount in cents and adjust the grain size in milliseconds for the granulation process. This enables altering the pitch of a sound without changing its duration.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pitch.shift~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/granular/plaits~/","title":"plaits~","text":"<p><code>plaits~</code> is a versatile Pure Data object based on Mutable Instruments' Plaits module, offering 24 distinct synthesis engines. It generates a wide array of sounds, from physical modeling and granular textures to classic waveforms and FM synthesis, often featuring a built-in Low-Pass Gate (LPG) for dynamic shaping. The object takes pitch, trigger, and level inputs, with extensive modulation capabilities for its 'Harmonics', 'Timbre', and 'Morph' parameters.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>plaits~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/granular/pvgrain~/","title":"pvgrain~","text":"<p><code>pvgrain~</code> is a spectral granulator that tracks an input sound and synthesizes grains based on its spectral characteristics. It allows control over parameters such as grain duration, frequency range, and the probability of grain generation per FFT frame. The object is designed for audio processing and assumes a 44100 Hz sample rate.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>pvgrain~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/granular/pvoc.live~/","title":"pvoc.live~","text":"<p>The <code>pvoc.live~</code> object performs real-time time stretching and pitch shifting on live audio input. It uses granulation to independently control the playback speed and transposition (in cents) of the incoming signal. This allows for dynamic manipulation of audio characteristics, similar to <code>pvoc.player~</code> but designed for live processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pvoc.live~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/granular/stretch.shift~/","title":"stretch.shift~","text":"<p><code>stretch.shift~</code> is a live audio processor that performs independent time stretching and pitch shifting using granulation. It functions similarly to <code>gran.player~</code> but is designed for real-time input. Users can control parameters such as grain size, playback speed, and pitch transposition in cents.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>stretch.shift~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/GEMgl/","title":"GEMgl","text":"<p>The <code>GEMgl</code> objects in Pure Data provide direct wrappers for OpenGL functions, enabling users to access low-level graphics rendering commands within their patches. Each OpenGL command, like <code>glBegin</code>, can be used as a Pure Data object by prepending \"GEM\" (e.g., <code>GEMglBegin</code>). These objects are essential for advanced visual programming and require familiarity with OpenGL.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>GEMgl</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/GLdefine/","title":"GLdefine","text":"<p>The <code>GLdefine</code> object retrieves the numerical value of an OpenGL configuration constant, specified by its name (e.g., <code>GL_LINES</code>, <code>GL_POLYGON</code>). It is used within the GEM environment to set up OpenGL rendering parameters, typically by sending its output to a <code>GEMglBegin</code> object.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>GLdefine</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/Gem/","title":"Gem","text":"<p>The <code>Gem</code> object serves as a meta-object for the Pure Data Graphics Environment for Multimedia (GEM). It manages common behaviors and debugging for other GEM objects, particularly for handling OpenGL errors and controlling per-object or global debugging modes. It also facilitates the passing of special <code>gem_state</code> messages within a graphics render chain.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>Gem</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/_textbbox/","title":"_textbbox","text":"<p>The <code>_textbbox</code> object is a helper for visualizing bounding box information generated by Pure Data's <code>text*</code> objects. It receives bounding box messages and renders a visual representation of the bounding box within a GEM OpenGL context. Users can select to display either the global bounding box for all text lines or the bounding box for a specific line.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>_textbbox</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/accumrotate/","title":"accumrotate","text":"<p>The <code>accumrotate</code> object is a GEM utility that applies accumulated rotations to a 3D transformation matrix. It takes delta-rotation values for the X, Y, and Z axes, which are continuously added to the current rotation. This allows for smooth, incremental rotation of graphical objects within a GEM patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>accumrotate</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/alpha/","title":"alpha","text":"<p>The <code>alpha</code> object in Pure Data enables and controls alpha blending for graphical rendering within GEM. It allows users to toggle alpha blending on/off and select various OpenGL blending functions via its inlets. Proper rendering order is crucial, as <code>alpha</code> should typically be applied after non-alpha blended objects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>alpha</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/ambient/","title":"ambient","text":"<p>The <code>ambient</code> object is a GEM manipulation object that sets the ambient color for all subsequent vertex operations in a 3D scene. It accepts a <code>gemList</code> and requires a list of 3 (RGB) or 4 (RGBA) float values to define the color. To observe its effect, lighting must be enabled in the GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>ambient</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/ambientRGB/","title":"ambientRGB","text":"<p>The <code>ambientRGB</code> object in Pure Data sets the ambient color for subsequent vertex operations within a GEM (Graphics Environment for Multimedia) patch. It accepts either a <code>gemList</code> of 3 or 4 float values (RGB or RGBA) or individual float values for red, green, blue, and alpha. This object is used to define how objects are lit by ambient light, requiring lighting to be enabled to see its effects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>ambientRGB</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/camera/","title":"camera","text":"<p>The <code>camera</code> object in Pure Data is used to access and control video camera input. It provides different modes, such as <code>local</code> for internal processing and <code>gemwin</code> for displaying the camera feed within a GEM window. This object is essential for incorporating live video into GEM patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>camera</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/color/","title":"color","text":"<p>The <code>color</code> object in Pure Data sets the color for all subsequent GEM (Graphics Environment for Multimedia) shape and vertex operations. It accepts a list of 3 (RGB) or 4 (RGBA) float values, defaulting to black and opaque. For alpha blending to be effective, an <code>alpha</code> object must also be used.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>color</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/colorRGB/","title":"colorRGB","text":"<p>The <code>colorRGB</code> object in Pure Data's GEM environment sets the color for subsequent graphical shapes and vertex operations. It accepts RGB or RGBA float values, either as a list argument or through individual inlets. For alpha blending (transparency), an <code>alpha</code> object must be used in conjunction with <code>colorRGB</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>colorRGB</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/colorSquare/","title":"colorSquare","text":"<p>The <code>colorSquare</code> object renders a square at the current position within a GEM (Graphics Environment for Multimedia) context. Its size can be adjusted via an inlet, and the colors of its four corners can be individually specified as RGB values, resulting in gradient fills. This object is primarily used for generating colored geometric shapes in real-time graphics.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>colorSquare</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/cone/","title":"cone","text":"<p>The <code>cone</code> object renders a 3D cone at the current OpenGL position using the current color. Its appearance can be modified via the <code>draw</code> message, allowing for wireframe, filled, or point rendering. The size and number of segments of the cone can be dynamically controlled through its inlets.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>cone</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/cube/","title":"cube","text":"<p>The <code>cube</code> object renders a 3D cube within the GEM (Graphics Environment for Multimedia) context. Its size can be dynamically adjusted via the second inlet, and it can be drawn as an outline, filled, or as points using messages to its first inlet. This object is fundamental for creating basic 3D geometric shapes in Pure Data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>cube</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/cuboid/","title":"cuboid","text":"<p>The <code>cuboid</code> object renders a 3D box within GEM (Graphics Environment for Multimedia) at the current position and with the current color. Its dimensions (length, height, depth) can be dynamically controlled via dedicated inlets, enabling flexible 3D shape generation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>cuboid</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/curve/","title":"curve","text":"<p>The <code>curve</code> object in Pure Data generates and renders a Bezier curve within the GEM environment. It requires an initial argument for the number of control points, which are then specified as 3D (XYZ) float lists via its subsequent inlets. The object outputs a <code>gemlist</code> and allows customization of its drawing mode, resolution, and line width through messages to its first inlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>curve</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/curve3d/","title":"curve3d","text":"<p>The <code>curve3d</code> object renders a 3D Bezier curve. Its shape is defined by a matrix of control points, which are not necessarily part of the curve itself. Users can control the draw style, set individual control point positions, and adjust the curve's resolution.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>curve3d</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/cylinder/","title":"cylinder","text":"<p>The <code>cylinder</code> object renders a 3D cylinder shape within the GEM environment, utilizing OpenGL. It allows users to control the cylinder's size and the number of segments for its rendering. Additionally, its visual appearance can be modified via a <code>draw</code> message to display it as lines, filled, or points.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>cylinder</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/depth/","title":"depth","text":"<p>The <code>depth</code> object controls OpenGL's depth testing (Z-buffering) within GEM. It can be used to create painting effects in single-buffer mode or to manage rendering order in double-buffered mode, especially when combined with objects like <code>gemhead</code>. By default, it disables depth buffering for subsequent objects in the rendering chain.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>depth</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/diffuse/","title":"diffuse","text":"<p>The <code>diffuse</code> object in Pure Data sets the diffuse color for subsequent vertex operations within a GEM (Graphics Environment for Multimedia) context. It accepts a <code>gemlist</code> in its first inlet and a list of 3 (RGB) or 4 (RGBA) float values in its second inlet to define the color. To observe its effect, lighting must be enabled in the GEM patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>diffuse</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/diffuseRGB/","title":"diffuseRGB","text":"<p>The <code>diffuseRGB</code> object in Pure Data sets the diffuse color for subsequent vertex operations within a GEM (Graphics Environment for Multimedia) context. It accepts a <code>gemlist</code> and can be configured with RGB or RGBA float values, requiring lighting to be enabled for its effects to be visible.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>diffuseRGB</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/disk/","title":"disk","text":"<p>The <code>disk</code> object renders a flat disk, optionally with a central hole, at the current GEM OpenGL position using the current color. Its appearance can be controlled via the <code>draw</code> message, and its outer and inner radii, as well as the number of segments, can be adjusted through its inlets. This object is primarily used for 2D graphical rendering within GEM.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>disk</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/emission/","title":"emission","text":"<p>The <code>emission</code> object in Pure Data, part of the GEM library, sets the emission color for subsequent OpenGL vertex operations. It accepts a <code>gemList</code> and a list of 3 (RGB) or 4 (RGBA) float values to define the emission color, which contributes to the self-illuminating appearance of 3D objects when lighting is enabled.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>emission</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/emissionRGB/","title":"emissionRGB","text":"<p>The <code>emissionRGB</code> object sets the emission color for subsequent vertex operations within a GEM (Graphics Environment for Multimedia) context. It accepts a <code>gemList</code> or individual float values for red, green, blue, and an optional alpha channel. To see its effect, lighting must be enabled in the GEM patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>emissionRGB</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/fragment_program/","title":"fragment_program","text":"<p>The <code>fragment_program</code> object loads and applies ARB or NV fragment shaders, which perform per-pixel operations within OpenGL. It requires a compatible OpenGL implementation and can dynamically load shader programs via its inlet. Users must manually configure shader parameter modifications using <code>GEMglProgramEnvParameter*</code> objects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>fragment_program</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemcocoawindow/","title":"gemcocoawindow","text":"<p>The <code>gemcocoawindow</code> object creates and manages a graphical window on macOS using the Cocoa framework, specifically for GEM (Graphics Environment for Multimedia). It allows control over window properties such as dimensions, position, title, buffering, anti-aliasing, and fullscreen mode. This object also activates an OpenGL context within the window for rendering and provides feedback on keyboard input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemcocoawindow</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemcubeframebuffer/","title":"gemcubeframebuffer","text":"<p>The <code>gemcubeframebuffer</code> object renders a 3D scene onto the faces of a GL cubemap texture. This allows for capturing a scene from a central point in all directions, which can then be used for environment mapping effects like equirectangular, sphere, or cube mapping.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemcubeframebuffer</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemframebuffer/","title":"gemframebuffer","text":"<p>The <code>gemframebuffer</code> object renders a graphical scene into an off-screen texture, which can then be used as an input for further rendering operations. It allows control over the framebuffer's type, dimensions, color format, and perspective. This is useful for advanced graphics techniques like post-processing effects or reflections within a GEM patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemframebuffer</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemglfw2window/","title":"gemglfw2window","text":"<p>The <code>gemglfw2window</code> object creates and manages a graphical window using GLFW (version 2) within Pure Data's GEM environment. It provides controls for window properties like dimensions, position, title, buffering, anti-aliasing, and fullscreen mode. Additionally, it outputs keyboard events, making it suitable for interactive graphical applications.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemglfw2window</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemglfw3window/","title":"gemglfw3window","text":"<p>The <code>gemglfw3window</code> object uses GLFW (version 3) to create and manage graphical windows within Pure Data, primarily for OpenGL rendering. It allows users to control window properties such as dimensions, position, title, fullscreen mode, and anti-aliasing. It also provides feedback and handles keyboard input, making it central to visual applications in Gem.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemglfw3window</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemglutwindow/","title":"gemglutwindow","text":"<p>The <code>gemglutwindow</code> object creates and manages an OpenGL rendering window using the GLUT (OpenGL Utility Toolkit) library. It provides messages to control window properties such as size, position, title, fullscreen mode, and buffering, and also handles keyboard input and right-click menus within the window. This object is fundamental for displaying graphical output in GEM patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemglutwindow</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemglxwindow/","title":"gemglxwindow","text":"<p><code>gemglxwindow</code> is a Gem object designed for direct interaction with the X-window system, enabling the creation and management of an OpenGL rendering window. It provides comprehensive control over window properties such as size, position, title, buffering, anti-aliasing, and fullscreen mode. Additionally, it outputs feedback about the window state and handles keyboard input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemglxwindow</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemhead/","title":"gemhead","text":"<p>The <code>gemhead</code> object initiates and manages a GEM (Graphics Environment for Multimedia) rendering chain. It connects GEM objects to the window manager, ensuring they receive render commands. Users can control the rendering order via a priority value and enable/disable rendering for the chain.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemhead</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemlist_info/","title":"gemlist_info","text":"<p>The <code>gemlist_info</code> object takes a <code>gemlist</code> as input and decomposes its current transformation matrix into basic transformations. It outputs the original <code>gemlist</code> along with separate lists for translation, rotation, scale, and shear components, allowing users to extract and analyze the geometric state of GEM objects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemlist_info</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemlist_matrix/","title":"gemlist_matrix","text":"<p><code>gemlist_matrix</code> is a Pure Data object within the GEM library that retrieves the current transformation matrix of an incoming <code>gemlist</code>. It outputs the original <code>gemlist</code> and the 16-float transformation matrix, enabling programmatic access and manipulation of 3D object transformations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemlist_matrix</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemmacoswindow/","title":"gemmacoswindow","text":"<p>The <code>gemmacoswindow</code> object is a macOS-specific Pure Data external that creates and manages graphical windows using Cocoa. It provides controls for window properties such as dimensions, position, title, fullscreen mode, and rendering options (e.g., anti-aliasing, buffering). It also handles user input like keystrokes and can toggle the macOS menubar.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemmacoswindow</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemmacwindow/","title":"gemmacwindow","text":"<p>The <code>gemmacwindow</code> object is a legacy Pure Data external designed for macOS (up to OSX 10.6) that creates and manages graphical windows using the Carbon API. It allows control over window properties such as dimensions, position, title, borders, full-screen mode, and anti-aliasing, and also provides feedback on window events including keyboard input. Users are advised to use <code>gemmacoswindow</code> for modern macOS environments.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemmacwindow</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemmanager/","title":"gemmanager","text":"<p>The <code>gemmanager</code> object is an internal helper designed to interact with Gem's global state. Its primary function is to allow setting global parameters, such as window dimensions using the <code>dimen &lt;w&gt; &lt;h&gt;</code> message. This object is generally not intended for direct use by end-users.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemmanager</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemorb/","title":"gemorb","text":"<p>The <code>gemorb</code> object connects to a SpaceOrb 3D controller via a specified serial port (comport). It outputs position and rotation data as float triplets, and button states as a 9-tuple. This object is essential for integrating SpaceOrb input into Pure Data patches, allowing for precise 3D control, especially within the GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemorb</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemrepeat/","title":"gemrepeat","text":"<p>The <code>gemrepeat</code> object is a GEM manipulation object designed to duplicate incoming <code>gemlist</code> messages. It generates multiple copies of a graphical object, with the number of repetitions specified as an argument or via its inlet. This object is primarily used for efficiently creating arrays or patterns of visual elements within the GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemrepeat</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemsdl2window/","title":"gemsdl2window","text":"<p>The <code>gemsdl2window</code> object creates and manages a graphical window using the SDL2 toolkit, providing an OpenGL context for rendering. It allows control over window properties like size, position, title, and fullscreen mode, and handles user input such as keyboard events, mouse confinement, and drag-and-drop. This object is fundamental for displaying visual output within Gem patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemsdl2window</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemsdlwindow/","title":"gemsdlwindow","text":"<p><code>gemsdlwindow</code> is a Pure Data object that utilizes the SDL (Simple DirectMedia Layer) toolkit to create and manage graphical windows. It allows for setting window properties like title, dimensions, position, and full-screen mode, and activates an OpenGL context for rendering. The object also provides feedback related to window events, including keyboard input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemsdlwindow</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemvertexbuffer/","title":"gemvertexbuffer","text":"<p>The <code>gemvertexbuffer</code> object efficiently renders geometric objects by managing a Vertex Buffer Object (VBO). It allows updating vertex positions, colors, textures, and normals from Pure Data tables, making it suitable for drawing a large number of points or complex shapes with dynamic data. It also supports GLSL programs and custom attributes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemvertexbuffer</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemw32window/","title":"gemw32window","text":"<p>The <code>gemw32window</code> object is a GEM (Graphics Environment for Multimedia) object specific to Microsoft Windows, used for creating and managing a graphical output window. It provides control over window properties such as dimensions, position, title, fullscreen mode, rendering buffers, and anti-aliasing. Additionally, it outputs keyboard events, allowing for interactive graphical applications.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemw32window</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/gemwin/","title":"gemwin","text":"<p>The <code>gemwin</code> object manages the output window for GEM (Graphics Environment for Multimedia), controlling its properties like size, fullscreen mode, and title. It also configures rendering aspects such as anti-aliasing, frame rate, lighting, and the camera's viewpoint for 3D scenes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemwin</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/glsl/","title":"glsl","text":"<p>The <code>glsl</code> object simplifies the creation of OpenGL Shading Language (GLSL) programs by wrapping various GLSL compilers and the linker into a single, easy-to-use interface. It automatically loads shader files (e.g., <code>.vert</code>, <code>.frag</code>) based on a provided basename, allowing users to compile and link custom shaders for real-time graphics rendering. It also provides an inlet to set uniform variables within the compiled shader program.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>glsl</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/glsl_fragment/","title":"glsl_fragment","text":"<p>The <code>glsl_fragment</code> object loads and compiles GLSL fragment shaders, outputting a module ID for use with <code>glsl_program</code>. It is essential for applying custom visual effects and processing within the GEM graphics environment, requiring OpenGL 2.0 or higher support.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>glsl_fragment</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/glsl_geometry/","title":"glsl_geometry","text":"<p>The <code>glsl_geometry</code> object loads and compiles a GLSL geometry shader from a specified file. It outputs a module ID that can be used to link with a <code>glsl_program</code> object, enabling advanced graphical effects within Pure Data's GEM environment. This object requires OpenGL 2.1 or higher support.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>glsl_geometry</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/glsl_program/","title":"glsl_program","text":"<p>The <code>glsl_program</code> object compiles and links GLSL shader modules (from <code>glsl_fragment</code>, <code>glsl_vertex</code>, and <code>glsl_geometry</code>) into an OpenGL 2.0 shader program. It allows dynamic control over shader uniform variables via messages, enabling real-time manipulation of visual effects. This object is crucial for advanced graphics rendering within Pure Data's GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>glsl_program</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/imageVert/","title":"imageVert","text":"<p>The <code>imageVert</code> object maps an input image (pix) to a 3D geometric representation. It generates a series of polygons where the height of each polygon is determined by the luminance (brightness) of the corresponding pixel in the input image. This allows for the creation of 3D shapes from 2D image data, useful for visual effects and data visualization within GEM.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>imageVert</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/light/","title":"light","text":"<p>The <code>light</code> object in GEM adds a local point-light source to a 3D scene, allowing for realistic lighting effects. It can be positioned using <code>rotate</code> and <code>translate</code> and its color can be set via an inlet. A debug mode is available to visualize the light source as a sphere.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>light</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/mesh_line/","title":"mesh_line","text":"<p>The <code>mesh_line</code> object renders a line mesh within the GEM environment, drawing it at the current position with the current color. Its size can be dynamically adjusted via a dedicated inlet, and it supports different drawing modes like <code>line</code>, <code>default</code>, or <code>point</code>. This object is particularly useful in conjunction with <code>vertex_shader</code> for advanced graphical manipulations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>mesh_line</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/mesh_square/","title":"mesh_square","text":"<p>The <code>mesh_square</code> object renders a square mesh at the current position and color, with its size controllable via the second inlet. It supports various drawing modes and allows dynamic adjustment of its grid resolution, making it useful for <code>vertex_shader</code> applications.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>mesh_square</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/ortho/","title":"ortho","text":"<p><code>ortho</code> is a GEM object in Pure Data that controls the rendering projection for subsequent graphical objects. It switches the viewing mode from perspective to orthographic, ensuring parallel lines remain parallel regardless of distance, making objects appear the same size irrespective of their depth. It can be toggled on/off and its aspect ratio adjusted via its inlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>ortho</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_color/","title":"part_color","text":"<p>The <code>part_color</code> object is a component of the GEM particle system, designed to define the visual color of particles. It allows users to specify two distinct colors, with individual particles randomly adopting one of the two provided color values. This object is crucial for customizing the appearance of particle effects within GEM.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_color</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_damp/","title":"part_damp","text":"<p>The <code>part_damp</code> object is a GEM particle system utility that modifies the velocity of particles. It takes a damping vector as input: values less than <code>1 1 1</code> slow particles down, while values greater than <code>1 1 1</code> accelerate them, providing dynamic control over particle movement.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_damp</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_draw/","title":"part_draw","text":"<p>The <code>part_draw</code> object is used to render a particle system within Pure Data's GEM environment. It takes a <code>gemlist</code> generated by <code>part_head</code> and other <code>part_</code> objects as input, serving as the final step in the particle system creation chain. Users can specify drawing modes such as <code>line</code> or <code>point</code> to control how the particles are visualized.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_draw</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_follow/","title":"part_follow","text":"<p>The <code>part_follow</code> object is a GEM particle system component that enables particles to follow each other, creating dynamic visual effects. It operates within the GEM environment, taking <code>gemlist</code> input (typically from <code>part_head</code>) to manipulate particle behavior.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_follow</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_gravity/","title":"part_gravity","text":"<p>The <code>part_gravity</code> object sets a gravitational vector for a particle system. It influences the movement of particles, causing them to follow the specified gravity vector regardless of their initial emission direction. This object is used to simulate gravitational forces within particle-based visual effects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_gravity</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_head/","title":"part_head","text":"<p>The <code>part_head</code> object initializes and manages a particle system within GEM. It acts as the central hub for a particle list, connecting particle generators (<code>part_source</code>), various <code>part_</code> modifiers, and a particle renderer (<code>part_draw</code>). It can be configured with a maximum number of particles and allows control over particle emission speed.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_head</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_info/","title":"part_info","text":"<p>The <code>part_info</code> object provides detailed information about each particle within a particle system, typically set up with <code>part_head</code> and other <code>part_</code> objects. It outputs data for every particle per rendering cycle. Notably, <code>part_info</code> also moves the particles, making it suitable for direct rendering control but potentially problematic when used alongside <code>part_draw</code> or <code>part_render</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_info</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_information/","title":"part_information","text":"<p>The <code>part_information</code> object provides detailed data for all particles within a particle system, typically set up using <code>part_head</code> and other <code>part_</code> objects. It outputs information for each particle per rendering cycle, without altering their positions, making it suitable for use alongside rendering objects like <code>part_draw</code> or <code>part_render</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_information</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_killold/","title":"part_killold","text":"<p>The <code>part_killold</code> object is a GEM particle system utility that removes particles older than a specified \"kill time.\" This allows for controlling the lifespan of particles, making them disappear after a set duration within a visual context.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_killold</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_killslow/","title":"part_killslow","text":"<p>The <code>part_killslow</code> object is a GEM particle system utility designed to manage particle populations. It removes particles from the system that are moving slower than a specified speed threshold, which defaults to 0.01. This is useful for culling static or slow-moving particles, thereby optimizing visual performance or refining particle system behavior.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_killslow</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_move/","title":"part_move","text":"<p>The <code>part_move</code> object is a core component of the GEM particle system. It is responsible for advancing particles based on their current velocity and defined constraints, while also updating their age. This object is typically used when <code>part_draw</code> or <code>part_render</code> are not handling particle movement automatically.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_move</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_orbitpoint/","title":"part_orbitpoint","text":"<p>The <code>part_orbitpoint</code> object is a GEM particle system object that causes particles to orbit a specified 3D position (x, y, z). It simulates a gravitational attraction, with the 'attraction' argument controlling the strength of this pull. This object is fundamental for creating dynamic particle behaviors within visual patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_orbitpoint</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_render/","title":"part_render","text":"<p>The <code>part_render</code> object is used within the GEM environment to draw particle systems. It takes a particle system, previously defined by objects like <code>part_head</code>, <code>part_color</code>, and <code>part_size</code>, and renders individual particles as <code>gemLists</code> (e.g., <code>sphere</code>). This object is the final step in visualizing particle effects in Pure Data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_render</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_sink/","title":"part_sink","text":"<p>The <code>part_sink</code> object defines a spatial region within a particle system where particles will be removed or \"vanish.\" Users can specify various geometric shapes (domains) such as points, lines, spheres, or boxes, along with their corresponding arguments (e.g., coordinates, radii). It also includes a toggle to enable or disable particle removal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_sink</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_size/","title":"part_size","text":"<p>The <code>part_size</code> object controls the size of particles within a particle system, typically used in graphical contexts like GEM. It allows for dynamic adjustment of particle size and can be initialized with an argument. The default particle size is 1.0f.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_size</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_source/","title":"part_source","text":"<p>The <code>part_source</code> object creates a source for particles within a particle system, emitting new particles at a specified rate per rendering frame. Particles are generated randomly within a user-defined 3D domain (e.g., point, line, sphere, box), which is configured via arguments. It is typically used with <code>part_killold</code> to manage particle system behavior.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_source</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_targetcolor/","title":"part_targetcolor","text":"<p>The <code>part_targetcolor</code> object is a GEM object designed for particle systems, enabling dynamic color changes for particles. It continuously adjusts particle colors towards a specified RGB or RGBA target color by applying a scale factor each frame, with a default scale of 0.05.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_targetcolor</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_velcone/","title":"part_velcone","text":"<p>The <code>part_velcone</code> object is a GEM object designed to set properties for a cone, likely within a particle system, by interacting with a <code>partList</code>. However, this object is explicitly marked as obsolete in the help patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_velcone</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_velocity/","title":"part_velocity","text":"<p>The <code>part_velocity</code> object in Pure Data, part of the GEM library, sets the initial velocity of newly emitted particles. It allows users to define a 3D domain (e.g., <code>point</code>, <code>line</code>, <code>sphere</code>, <code>box</code>) and associated arguments. Particles are then given a velocity directed towards a random point within this specified domain, with speed varying based on the distance to that point.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_velocity</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_velsphere/","title":"part_velsphere","text":"<p>The <code>part_velsphere</code> object is a GEM object designed to set a sphere with a specified radius for a particle list. This object is considered obsolete.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_velsphere</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/part_vertex/","title":"part_vertex","text":"<p>The <code>part_vertex</code> object is a core component for GEM-based particle systems. It adds a single particle at a specified <code>x y z</code> offset, essential for creating and managing particles within a visual particle system, especially when dealing with moving particle sources.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_vertex</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_2grey/","title":"pix_2grey","text":"<p>The <code>pix_2grey</code> object converts an incoming pixel image (represented as a <code>gemlist</code>) to grayscale. It achieves this by setting the R, G, and B values to be equal for RGBA images, or by setting chroma values to 127 for YUV images, without altering the original colorspace.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_2grey</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_a_2grey/","title":"pix_a_2grey","text":"<p>The <code>pix_a_2grey</code> object converts an input RGBA image to grayscale based on its alpha channel. It uses an <code>alpha-threshold</code> to selectively apply the conversion: pixels with alpha values above a positive threshold or below a negative threshold are affected. This object is designed for image manipulation within the GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_a_2grey</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_add/","title":"pix_add","text":"<p>The <code>pix_add</code> object combines two input images of the same size by adding their pixel values. It clamps the resulting values to remain within the valid image range, which can lead to a \"white out\" effect. This object is primarily used for basic image blending within the GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_add</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_aging/","title":"pix_aging","text":"<p>The <code>pix_aging</code> object applies a Super8-like aging effect to images or video streams, simulating the look of old film. It offers four customizable components: color aging, light dusts, dark pits, and vertical scratches, which can be individually enabled or disabled. Users can also control the maximum number of scratches via the <code>scratch</code> message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_aging</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_alpha/","title":"pix_alpha","text":"<p>The <code>pix_alpha</code> object in Pure Data modifies the alpha channel of an RGBA image based on RGB color thresholding. It sets the alpha value of pixels to a specified \"pass\" or \"other\" value depending on whether their RGB components fall within a defined high and low threshold range. This allows for selective transparency based on pixel color, primarily used with GEM for image manipulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_alpha</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_background/","title":"pix_background","text":"<p>The <code>pix_background</code> object removes a static background from an incoming video stream by comparing it to a stored reference image. It turns pixels within a specified color range black, effectively isolating new objects that enter the scene. This is useful for creating effects where only moving elements are visible against a black backdrop, or for chroma keying applications.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_background</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_backlight/","title":"pix_backlight","text":"<p>The <code>pix_backlight</code> object applies a backlighting effect to images by radially displacing pixels based on their luminance. Users can control the displacement amount using a scale factor, and define a luminance range (floor and ceiling) within which the displacement occurs. It takes a <code>gemlist</code> as input and outputs a modified <code>gemlist</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_backlight</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_biquad/","title":"pix_biquad","text":"<p>The <code>pix_biquad</code> object applies a time-based Infinite Impulse Response (IIR) filter to images, functioning similarly to the audio <code>biquad~</code> object but for visual data. It processes incoming images (<code>x(n)</code>) to produce filtered output images (<code>y(n)</code>) based on a set of six filter coefficients (fb0, fb1, fb2, ff1, ff2, ff3). Users can also reset the filter's internal buffers with a <code>set</code> message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_biquad</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_bitmask/","title":"pix_bitmask","text":"<p>The <code>pix_bitmask</code> object applies a bitmask to incoming image data (<code>gemlist</code>), allowing selective modification or filtering of pixels. It accepts either a single mask value for all channels or separate mask values for RGB/RGBA channels (0-255). Users should note that low mask values can reduce image luminance, potentially requiring adjustment with <code>pix_gain</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_bitmask</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_blob/","title":"pix_blob","text":"<p>The <code>pix_blob</code> object calculates the \"center of gravity\" of an image. It allows users to specify which color channels (e.g., red, green, blue, alpha) to use for weighting the position calculation, enabling flexible analysis of image content.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_blob</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_blur/","title":"pix_blur","text":"<p>The <code>pix_blur</code> object applies a blur effect to an image or video stream within Pure Data's GEM environment. However, this object is deprecated, and users should consider alternative methods for achieving blur effects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_blur</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_buf/","title":"pix_buf","text":"<p>The <code>pix_buf</code> object, also known as <code>pix_separator</code>, buffers image data (pixes) to store the results of time-consuming processing operations. It is most effective when buffering static images, as continuous upstream modifications will lead to inefficient pixel copying. This object can also separate <code>gemlist</code> streams processing the same image data, acting as a flow control utility within the GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_buf</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_buffer_read/","title":"pix_buffer_read","text":"<p>The <code>pix_buffer_read</code> object reads image data from a named <code>pix_buffer</code>. It allows specifying a particular frame index from the buffer via its second inlet. The buffer to read from can be dynamically changed using a <code>set</code> message in the first inlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_buffer_read</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_buffer_write/","title":"pix_buffer_write","text":"<p>The <code>pix_buffer_write</code> object writes incoming image data (a <code>gemlist</code>) into a specified <code>pix_buffer</code> at a given index. It is used in conjunction with the <code>pix_buffer</code> object to store and manage sequences of images, requiring a new index to be set for each subsequent write operation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_buffer_write</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_chroma_key/","title":"pix_chroma_key","text":"<p>The <code>pix_chroma_key</code> object performs real-time video compositing by comparing pixels from two input streams. It replaces pixels in a designated \"key-source\" stream that fall within a specified color range (RGB or YUV) with corresponding pixels from the other stream. This is commonly used for green/blue screen effects or dynamic background removal in live video processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_chroma_key</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_clearblock/","title":"pix_clearblock","text":"<p>The <code>pix_clearblock</code> object, part of the GEM (Graphics Environment for Multimedia) library, clears the visual content of an image while preserving its underlying texture information and setup. This allows for clearing an image without destroying its associated texture properties.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_clearblock</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_color/","title":"pix_color","text":"<p>The <code>pix_color</code> object sets the color of each pixel in an input image to a specified RGBA value. It functions as a <code>pix_fx</code> within the GEM library, requiring an image input and a list of 3 (RGB) or 4 (RGBA) color values. Users should be aware that this object performs CPU-based processing, making the <code>color</code> object a more performant alternative for GPU-accelerated coloring.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_color</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_coloralpha/","title":"pix_coloralpha","text":"<p>The <code>pix_coloralpha</code> object calculates and sets the alpha channel of an RGBA image. It computes the mean value of the RGB triple for each pixel and assigns this mean to the alpha channel, making it suitable for manipulating transparency in image streams.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_coloralpha</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_colorclassify/","title":"pix_colorclassify","text":"<p>The <code>pix_colorclassify</code> object analyzes an input RGBA image, classifying each pixel into one of six primary color categories (red, green, blue, yellow, black, white) or marking it as 'uncertain'. It outputs a new RGBA image where pixels are replaced by color representatives based on their detected class, useful for basic image analysis and segmentation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_colorclassify</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_colormatrix/","title":"pix_colormatrix","text":"<p>The <code>pix_colormatrix</code> object transforms pixel values using a matrix. It accepts either a 3x3 matrix for RGB values (setting alpha to 1) or a 4x4 matrix for RGBA values. This allows for various color manipulations and effects on images within Pure Data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_colormatrix</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_colorreduce/","title":"pix_colorreduce","text":"<p>The <code>pix_colorreduce</code> object reduces the number of colors in a <code>pixImage</code> based on its statistical information. It takes a <code>gemlist</code> as input and outputs a processed <code>gemlist</code>. Users can specify the target number of colors, palette persistency, and edge smoothing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_colorreduce</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_compare/","title":"pix_compare","text":"<p>The <code>pix_compare</code> object compares two input image streams pixel by pixel based on their luminance. It outputs a composite image where each pixel is chosen from either the brighter or dimmer of the corresponding input pixels, configurable via a <code>direction</code> message or argument. This object is primarily used for image mixing and manipulation, working best with YUV color space but also effective with RGB.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_compare</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_composite/","title":"pix_composite","text":"<p>The <code>pix_composite</code> object alpha-blends two input images (<code>gemlist</code>s) of the same size. It uses the alpha channel of the first image to determine the blending factor. The object outputs the resulting composite image as a <code>gemlist</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_composite</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_contrast/","title":"pix_contrast","text":"<p><code>pix_contrast</code> is a GEM object designed to adjust the contrast and saturation of an input image. It accepts an image via its first inlet and float values for contrast and saturation via its second and third inlets, respectively. For grayscale images, only contrast can be modified, and both parameters must be non-negative, with a value of 1.0 indicating no change.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_contrast</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_convert/","title":"pix_convert","text":"<p>The <code>pix_convert</code> object transforms the color space of an image within GEM. It takes an incoming image (gemlist) and converts it to a specified color space, such as RGBA, YUV, or grayscale, which can be set via an inlet. This is useful for optimizing image processing or adapting images to different display requirements.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_convert</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_coordinate/","title":"pix_coordinate","text":"<p><code>pix_coordinate</code> is a GEM object designed to set and remap the S and T texture coordinates for a <code>pix</code> object. This allows for advanced texture mapping effects, such as repeating a texture by adjusting its coordinate values beyond the default range. It is typically used in conjunction with <code>pix_texture</code> to fine-tune how textures are applied to visual elements.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_coordinate</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_crop/","title":"pix_crop","text":"<p>The <code>pix_crop</code> object is a GEM utility that extracts a sub-image from an incoming image. It allows users to define a rectangular selection by specifying its dimensions and an offset from the lower-left corner in pixels. The object then outputs only this selected portion of the original image.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_crop</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_curve/","title":"pix_curve","text":"<p>The <code>pix_curve</code> object applies color curves to an image, modifying its RGBA channels. It uses lookup tables (arrays) to define these curves, which can be specified per channel or for all channels simultaneously. This GEM object is designed for graphical image processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_curve</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_data/","title":"pix_data","text":"<p>The <code>pix_data</code> object retrieves the color of a specified pixel within an image when triggered. It outputs the pixel's color as a normalized RGB list and a normalized grayscale value. Users can specify pixel coordinates, choose between normalized (0.0-1.0) or absolute (0-width/height) coordinate systems, and enable or disable 2D interpolation for pixel sampling.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_data</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_deinterlace/","title":"pix_deinterlace","text":"<p>The <code>pix_deinterlace</code> object applies a deinterlacing algorithm to incoming images, primarily by averaging neighboring rows. It can operate in an automatic mode (<code>0</code>) that detects interlacing or a forced mode (<code>1</code>) that always deinterlaces the image. This object is useful for processing interlaced video frames within GEM.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_deinterlace</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_diff/","title":"pix_diff","text":"<p>The <code>pix_diff</code> object calculates the absolute difference between two input images, which must be of the same size. It outputs a new image highlighting these differences. This object is part of the GEM library for graphics manipulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_diff</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_dot/","title":"pix_dot","text":"<p>The <code>pix_dot</code> object simplifies an input image by segmenting it and representing each segment with a white dot. The size of each dot is determined by the luminance of the original image segment. This allows for the creation of \"dotty\" or pixelated image effects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_dot</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_draw/","title":"pix_draw","text":"<p>The <code>pix_draw</code> object directly draws pixels onto the screen without applying any texture mapping. It is primarily used for blasting raw pixel data, meaning 3D transformations like Z-axis rotations or translations will not affect its output. Users should note that <code>pix_draw</code> is generally much slower than <code>pix_texture</code> on systems with graphics accelerators.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_draw</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_drum/","title":"pix_drum","text":"<p>The <code>pix_drum</code> object analyzes incoming video streams, specifically detecting black pixels from the top of the image. It generates a histogram of black pixel distribution, identifies primary and secondary peaks, and performs a convexity test to extract detailed information about these visual events. This object is designed for visual analysis, potentially for triggering or control based on detected visual patterns.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_drum</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_dump/","title":"pix_dump","text":"<p>The <code>pix_dump</code> object processes an incoming GEM image and outputs its raw pixel data as a single, long list of color component values. For an RGBA image, this list will contain R, G, B, and A values for each pixel in sequence. It can be triggered by a <code>bang</code> message and offers a <code>bytemode</code> inlet to control normalization.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_dump</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_duotone/","title":"pix_duotone","text":"<p>The <code>pix_duotone</code> object processes a <code>pixImage</code> to reduce its colors to a duotone palette. It takes an input image, a threshold, and two color lists. Pixels above the threshold are set to the first color, while those below are set to the second, effectively creating a two-color image based on intensity.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_duotone</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_equal/","title":"pix_equal","text":"<p>The <code>pix_equal</code> object processes an input RGBA image, generating a binary output image. Pixels whose RGBA values fall within a specified lower and upper bound (for each channel) are marked white, while all other pixels are marked black. This object is useful for isolating specific color ranges or 'blobs' within an image.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_equal</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_flip/","title":"pix_flip","text":"<p>The <code>pix_flip</code> object is a GEM object designed to flip images along a specified axis. It can mirror an image horizontally, vertically, or both, controlled by incoming messages. This object is useful for reorienting visual elements within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_flip</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_freeframe/","title":"pix_freeframe","text":"<p>The <code>pix_freeframe</code> object loads and applies FreeFrame video effects in real-time. It acts as a wrapper for FreeFrame plugins, allowing users to dynamically load effects and control their parameters via inlets. This object is designed for processing video within the GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_freeframe</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_frei0r/","title":"pix_frei0r","text":"<p>The <code>pix_frei0r</code> object loads and applies Frei0r video effects, a minimalistic plugin API for real-time video processing. It can load a specific plugin at creation or dynamically via a 'load' message. Parameters of the loaded effect can be controlled through additional inlets, allowing for real-time manipulation of the video output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_frei0r</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_gain/","title":"pix_gain","text":"<p>The <code>pix_gain</code> object applies a gain multiplier to the pixel values of an image (pix). It can use a single float for all color channels or a list of values for individual RGB/RGBA channels. Note that <code>pix_gain</code> operates on the CPU, and for GPU-based coloring, the <code>color</code> object might be a more efficient alternative.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_gain</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_grey/","title":"pix_grey","text":"<p>The <code>pix_grey</code> object converts the color space of an incoming image to grayscale. It processes various image formats, outputting a <code>gemlist</code> containing the grayscale image data. This conversion is useful for reducing memory and CPU usage when color information is not required.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_grey</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_halftone/","title":"pix_halftone","text":"<p>The <code>pix_halftone</code> object applies a halftone effect to an incoming image, transforming it into patterns of dots or diamonds, similar to those found in newspaper prints. Users can customize the halftone style, pattern size, orientation, and smoothness. It functions as a visual effect within the GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_halftone</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_histo/","title":"pix_histo","text":"<p><code>pix_histo</code> calculates the histogram (density function) of an input image, storing the results in Pure Data tables. It can generate a grayscale histogram in one table, or RGB/RGBA histograms across three or four tables respectively. The output histogram values are scaled to sum to 1.0.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_histo</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_hit/","title":"pix_hit","text":"<p>The <code>pix_hit</code> object performs hit tests on incoming GEM pixel data, allowing users to define specific areas (circles, lines, rectangles) within an image or video stream. It detects if a minimum number of pixels within these defined areas exceed a luminance threshold, outputting hit information for each area. This is useful for interactive visual applications or motion detection.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_hit</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_hsv2rgb/","title":"pix_hsv2rgb","text":"<p>The <code>pix_hsv2rgb</code> object converts an image's color representation from HSV (Hue, Saturation, Value) to RGB (Red, Green, Blue). It virtually transforms the image, interpreting the Red channel as Hue values for the conversion. This object is primarily used for manipulating image color spaces within the GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_hsv2rgb</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_indycam/","title":"pix_indycam","text":"<p>The <code>pix_indycam</code> object captures video signals from an SGI video camera, outputting them as pixel data within Pure Data. It is specifically designed for SGI video workstations. Users can control video properties such as dimensions, zoom, brightness, contrast, hue, and saturation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_indycam</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_info/","title":"pix_info","text":"<p>The <code>pix_info</code> object retrieves metadata about the current image in GEM, such as its dimensions, pixel size, color space (format), and a pointer to the image data. It can operate in a default \"raw\" mode with multiple outlets or a \"message\" mode (activated by the <code>-m</code> flag) that outputs all information as a series of messages. Users can also request symbolic representation of OpenGL format constants.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_info</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_invert/","title":"pix_invert","text":"<p>The <code>pix_invert</code> object inverts the colors of an input image, transforming black pixels to white and vice-versa. It operates on GEM image streams, allowing for dynamic control over the inversion process via its second inlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_invert</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_kaleidoscope/","title":"pix_kaleidoscope","text":"<p>The <code>pix_kaleidoscope</code> object applies a visual kaleidoscope effect to an input image, reflecting a selected portion multiple times around a central point. It allows precise control over the number of segments, rotation, and the source and output center positions, enabling the creation of intricate and dynamic visual patterns. This object is a core component for image manipulation within the GEM graphics environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_kaleidoscope</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_levels/","title":"pix_levels","text":"<p>The <code>pix_levels</code> object performs image level adjustments, similar to brightness and contrast controls. It allows for uniform adjustments across all color channels or independent control for red, green, and blue channels, by mapping input value ranges to output value ranges. An auto-mode is also available, which adjusts levels based on specified low and high percentiles of the image data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_levels</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_lumaoffset/","title":"pix_lumaoffset","text":"<p>The <code>pix_lumaoffset</code> object offsets pixels in the y-direction based on their luminance, creating a visual effect where brighter areas are shifted more. Users can control the offset amount and the spacing between the resulting lines. It also offers options to fill the gaps between lines and smooth the transitions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_lumaoffset</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_mano/","title":"pix_mano","text":"<p>The <code>pix_mano</code> object tracks light-reflecting objects within a video stream by applying a threshold and analyzing their contours. It outputs detailed information about the detected contours, including smoothed contours, peaks, and valleys, based on configurable parameters like threshold, minimum entry size, and perimeter. This object is designed for applications like hand tracking.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_mano</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_mask/","title":"pix_mask","text":"<p>The <code>pix_mask</code> object applies a mask to an image using the luminance of a second image. Where the mask image contains black pixels, the corresponding areas in the primary image will become transparent. This allows for dynamic alpha masking based on image content, requiring both input images to be of the same size and the primary image to be in RGBA format.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_mask</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_mean_color/","title":"pix_mean_color","text":"<p>The <code>pix_mean_color</code> object calculates the average color of an incoming image. It outputs the mean color as RGBA values, which can be used for further image processing or analysis within GEM. This object is useful for quickly getting a representative color from a visual input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_mean_color</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_metaimage/","title":"pix_metaimage","text":"<p>The <code>pix_metaimage</code> object processes an input image to create an output composed of many smaller, scaled versions of the original, each altered to match the color of its corresponding area. It offers parameters like <code>cheap</code> for faster, less smooth processing and <code>distance</code> to control scaling based on a simulated 3D perspective.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_metaimage</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_mix/","title":"pix_mix","text":"<p>The <code>pix_mix</code> object functions as a video mixer, blending two input images based on provided mixing factors. Users can specify individual gain values for each image (A and B) or a single crossfading factor (A), where the second image's gain is automatically calculated as (1-A). The output is a <code>gemlist</code> representing the mixed image.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_mix</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_motionblur/","title":"pix_motionblur","text":"<p>The <code>pix_motionblur</code> object applies a simple and fast motion blur effect to an incoming image stream. It achieves this by blending the current image with a historical image, controlled by a <code>blur-factor</code> float inlet. This object is designed for time-based visual effects within GEM.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_motionblur</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_movement/","title":"pix_movement","text":"<p>The <code>pix_movement</code> object is a time-based IIR filter that detects movement between consecutive video frames. It stores the detected motion in the alpha channel for RGBA images or the luminance channel for YUV/Grayscale images, ignoring pixel changes below a specified threshold. This object is useful for creating movement detectors, often used in conjunction with <code>pix_blob</code> to analyze the resulting alpha channel.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_movement</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_movement2/","title":"pix_movement2","text":"<p>The <code>pix_movement2</code> object is a time-based IIR filter designed for motion detection in video streams. It analyzes the current frame against two previous frames and a user-defined background image, outputting a greyscale image highlighting detected movement. It includes adjustable threshold parameters (<code>lo_threshold</code>, <code>initial_threshold</code>) to filter out image noise and dynamically adapt to changing conditions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_movement2</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_multiply/","title":"pix_multiply","text":"<p>The <code>pix_multiply</code> object in Pure Data multiplies two input images (pixes) together, requiring them to be of the same size. This operation results in an output image where, for example, if any corresponding pixel in either input image is black, the resulting pixel will also be black. It is primarily used for image manipulation within the GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_multiply</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_multitexture/","title":"pix_multitexture","text":"<p>The <code>pix_multitexture</code> object applies multiple texture mappings within a GEM (Graphics Environment for Multimedia) network. It takes a <code>gemlist</code> and multiple texture IDs as input, allowing for the application of various textures to the current graphics chain. This object is particularly useful when working with shaders to achieve complex visual effects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_multitexture</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_normalize/","title":"pix_normalize","text":"<p>The <code>pix_normalize</code> object processes image data to enhance visual contrast. It normalizes an input image (received as a <code>gemlist</code>), making contrasts appear sharper, and outputs the processed image as a <code>gemlist</code>. The normalization can be toggled on or off via its inlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_normalize</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_offset/","title":"pix_offset","text":"<p>The <code>pix_offset</code> object adds an offset to the color channels of an incoming image (gemlist). It can apply a single float offset to all channels or a list of offsets to individual channels. An optional <code>saturate</code> inlet controls whether color values are clipped (saturated) or allowed to wrap around the color space after the offset is applied.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_offset</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_pix2sig~/","title":"pix_pix2sig~","text":"<p>The <code>pix_pix2sig~</code> object converts incoming image data, typically from GEM, into audio signals. It outputs separate <code>signal~</code> streams for each color channel (red, green, blue, and alpha, or YUV/grey), allowing for various reading modes like 'clear', 'fill', 'line', and 'waterfall' to control how the image data is streamed into audio blocks.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_pix2sig~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_posterize/","title":"pix_posterize","text":"<p><code>pix_posterize</code> applies a posterization effect to images within the GEM environment. It takes a GEM list as input, along with a float for the posterization factor and an integer for the limit mode. Currently, it primarily supports YUV images, requiring conversion from other color spaces like RGBA.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_posterize</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_puzzle/","title":"pix_puzzle","text":"<p>The <code>pix_puzzle</code> object shuffles an input image by cutting it into rectangular pieces and rearranging them. Users can control the number of pieces per row and column using the <code>size</code> message, and trigger a re-shuffle with a <code>bang</code>. It also includes a game mode where individual pieces can be moved.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_puzzle</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_rds/","title":"pix_rds","text":"<p>The <code>pix_rds</code> object generates black and white random dot stereograms, commonly known as \"magic eye\" images. It allows users to create these images for both cross-eyed and wall-eyed viewing methods, with adjustable dot <code>stride</code> (distance). The object processes and outputs <code>gemlist</code> data, making it suitable for visual applications within Pure Data's GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_rds</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_rectangle/","title":"pix_rectangle","text":"<p><code>pix_rectangle</code> is a GEM object that renders a rectangle onto an existing image buffer (pix-buffer). It takes four float values to define the two corners of the rectangle for position and size, and optional RGB or RGBA float values to set its color. This object is used for drawing graphical primitives within the GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_rectangle</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_refraction/","title":"pix_refraction","text":"<p>The <code>pix_refraction</code> object processes an input image by dividing it into rectangular cells and scaling the image content within each cell. This creates a visual effect similar to viewing the image through a wall of glass bricks, where each brick acts as a magnifying or shrinking lens. It allows control over the scaling amount, cell dimensions, and whether expansion beyond the original size is prevented.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_refraction</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_resize/","title":"pix_resize","text":"<p>The <code>pix_resize</code> object resizes an image to specified dimensions. If no dimensions are provided, it automatically resizes the image to the next power of 2. Dimensions can also be set dynamically using the <code>dimen</code> message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_resize</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_rgb2hsv/","title":"pix_rgb2hsv","text":"<p>The <code>pix_rgb2hsv</code> object converts an RGB (Red, Green, Blue) image into the HSV (Hue, Saturation, Value) color space. This transformation can simplify color detection tasks. Internally, the image data remains RGBA, with the Red channel being populated by Hue values after conversion.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_rgb2hsv</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_rgba/","title":"pix_rgba","text":"<p>The <code>pix_rgba</code> object converts the color space of an incoming image to RGBA format, which is the native color space for GEM. It can convert images from various formats like grayscale or YUV to RGBA, and also allows toggling the conversion on or off. This object is primarily used for preparing images for display or further processing within the GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_rgba</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_roi/","title":"pix_roi","text":"<p>The <code>pix_roi</code> object sets a region of interest (ROI) on an image using normalized coordinates. This defined ROI then dictates which portion of the image subsequent <code>pix</code> objects will process. It allows for operations to be applied to a specific sub-image.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_roi</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_roll/","title":"pix_roll","text":"<p>The <code>pix_roll</code> object scrolls or rolls an image, wrapping its content around the edges. It allows control over the scroll axis (horizontal or vertical) and the pixel offset, creating a visual effect similar to adjusting the vertical or horizontal hold on an old television. This can be used to create looping visual effects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_roll</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_rtx/","title":"pix_rtx","text":"<p>The <code>pix_rtx</code> object performs a real-time \"Time-X transformation\" on incoming video frames, effectively swapping the time axis with the x-axis of the image. This creates a visual effect similar to <code>tx-transform</code> but operates dynamically. It requires substantial memory for its internal buffer and processes video input, outputting a <code>gemlist</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_rtx</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_scanline/","title":"pix_scanline","text":"<p>The <code>pix_scanline</code> object processes image rows, either duplicating or removing them. It functions as an image resolution decimator in mode 0, or as an interlacer in mode 1, allowing for manipulation of image display and resolution.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_scanline</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_set/","title":"pix_set","text":"<p>The <code>pix_set</code> object allows you to create or modify image data by providing a flat list of pixel values. It supports RGBA, RGB, and GREY modes for interpreting the input list, and the image size can be configured via creation arguments or the <code>set</code> message. The object outputs a <code>gemlist</code> representing the image, which is always in RGBA color space.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_set</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_share_read/","title":"pix_share_read","text":"<p>The <code>pix_share_read</code> object reads pixel data from a shared memory region, identified by a unique ID. It works in conjunction with a <code>pix_share_write</code> object, which writes data to the same shared memory. This allows for inter-patch or inter-instance communication of image data, requiring prior knowledge of image dimensions and color space.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_share_read</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_share_write/","title":"pix_share_write","text":"<p>The <code>pix_share_write</code> object writes pixel data to a shared memory region, identified by a unique ID, width, height, and colorspace. This allows other <code>pix_share_read</code> objects, potentially in different Pure Data instances on the same machine, to access and utilize the same image data. It facilitates inter-process communication of graphical information.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_share_write</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_sig2pix~/","title":"pix_sig2pix~","text":"<p><code>pix_sig2pix~</code> converts up to four incoming audio signals into an image, treating each signal as a color channel (red, green, blue, alpha). It allows control over image dimensions, data type, and how the signals map to the image pixels, enabling real-time visualization of audio data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_sig2pix~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_snap/","title":"pix_snap","text":"<p>The <code>pix_snap</code> object captures the current content of the GEM (Graphics Environment for Multimedia) rendering buffer, effectively taking a screenshot. It converts this captured image into a <code>pix</code> object, which can then be further manipulated or displayed within Pure Data. It can be triggered by a <code>bang</code> or <code>snap</code> message and allows specifying an offset and dimensions for the captured region.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_snap</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_snap2tex/","title":"pix_snap2tex","text":"<p>The <code>pix_snap2tex</code> object captures a snapshot of the current GEM render buffer and applies it as a texture to attached geometric objects. It allows specifying a region of the buffer to capture using offset and dimension parameters, enabling close-ups or partial screenshots for dynamic texturing based on real-time rendering.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_snap2tex</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_subtract/","title":"pix_subtract","text":"<p>The <code>pix_subtract</code> object subtracts the pixel values of one image from another, requiring both input images to be of the same size. It clamps the resulting pixel values at zero, which can lead to black areas if subtraction results in negative values. This object is primarily used for image manipulation within the GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_subtract</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_takealpha/","title":"pix_takealpha","text":"<p>The <code>pix_takealpha</code> object transfers the alpha channel from a second input image to a first input image. It requires both images to be of the same size, and the first image must be in RGBA color space. If the second image lacks an alpha channel, its luminance value is used instead.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_takealpha</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_test/","title":"pix_test","text":"<p>The <code>pix_test</code> object generates test images, primarily featuring SMPTE colorbars and black/white gradients. It allows customization of image dimensions, colorspace, and can optionally include grey noise at the bottom. This object is useful for testing and calibrating visual setups within Pure Data's GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_test</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_texture/","title":"pix_texture","text":"<p>The <code>pix_texture</code> object applies texture mapping to GEM graphics. It uses current <code>pix</code> values as textures, allowing control over quality, repetition, and texture environment modes. It can also load image files (JPEG, TIFF, etc.) to be used as textures.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_texture</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_threshold/","title":"pix_threshold","text":"<p>The <code>pix_threshold</code> object applies a threshold filter to incoming image data. Pixels with values above the specified threshold are passed through, while those below are zeroed out. It supports thresholding all channels with a single float or individual RGB/RGBA channels using a list.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_threshold</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_threshold_bernsen/","title":"pix_threshold_bernsen","text":"<p><code>pix_threshold_bernsen</code> applies a dynamic tiled threshold filter to greyscale images for binarization. It calculates a threshold for each tile based on the mean of the min and max pixel values within a surrounding square, setting pixels above the threshold to 1 and others to 0. This object is useful for converting greyscale images into binary (black and white) images with adaptive local contrast.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_threshold_bernsen</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_video/","title":"pix_video","text":"<p>The <code>pix_video</code> object captures live video input from various cameras (USB, FireWire, capture cards) supported by the operating system. It outputs the video stream as a <code>gemlist</code> and provides an <code>info</code> outlet for device enumeration and property management. Users can control device selection, backend, colorspace, and dimensions, making it a versatile tool for integrating live camera feeds into Pure Data patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_video</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_yuv/","title":"pix_yuv","text":"<p>The <code>pix_yuv</code> object converts the colorspace of an image to the YUV format. This format is more memory-efficient and faster to process than RGBA, making it suitable for video applications. The conversion can be toggled on or off via its second inlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_yuv</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pix_zoom/","title":"pix_zoom","text":"<p>The <code>pix_zoom</code> object, part of the GEM library, allows for magnifying or minifying pixels. It utilizes OpenGL's <code>glPixelZoom</code> function to achieve pixel-level zooming effects, useful for visual transformations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_zoom</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/polygon/","title":"polygon","text":"<p>The <code>polygon</code> object in Pure Data renders a polygon graphic within the GEM environment. It requires an initial argument specifying the number of control points, with subsequent inlets accepting XYZ coordinates for each point. The object also responds to messages for setting line width and various drawing modes such as <code>line</code>, <code>fill</code>, or <code>tri</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>polygon</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/polygon_smooth/","title":"polygon_smooth","text":"<p>The <code>polygon_smooth</code> object controls antialiasing for polygons within GEM, effectively smoothing their edges. It accepts a float (1 for on, 0 for off, -1 for no change) to toggle this visual effect. Be aware that enabling smoothing can be CPU-intensive without hardware acceleration.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>polygon_smooth</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/pqtorusknots/","title":"pqtorusknots","text":"<p>The <code>pqtorusknots</code> object renders a customizable 3D torus knot within a GEM (Graphics Environment for Multimedia) context. Users can control its appearance by adjusting parameters such as the number of steps, facets, thickness, and winding, as well as applying texture scaling. It receives GEM list messages for drawing commands and outputs GEM lists.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pqtorusknots</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/primTri/","title":"primTri","text":"<p>The <code>primTri</code> object renders a triangle with gradient colors. Its corner points can be precisely defined by XYZ coordinates and individual RGB or RGBA color values. It takes a <code>gemlist</code> as input and outputs a <code>gemlist</code>, making it suitable for integration into GEM graphics rendering chains.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>primTri</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/rectangle/","title":"rectangle","text":"<p>The <code>rectangle</code> object is a GEM (Graphics Environment for Multimedia) object that renders a rectangular shape. It draws a rectangle at the current position using the current color, with its width and height controllable via arguments or its second and third inlets. Note that the actual rendered size is double the specified width and height, spanning from <code>(-width|-height)</code> to <code>(+width|+height)</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>rectangle</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/render_trigger/","title":"render_trigger","text":"<p>The <code>render_trigger</code> object provides timing signals related to the rendering process within a <code>gemlist</code>. It outputs a bang before any actions in the <code>gemlist</code> are rendered and another bang after all rendering actions have completed. Note that this object is now obsolete, as the standard <code>trigger</code> object can achieve the same functionality.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>render_trigger</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/ripple/","title":"ripple","text":"<p>The <code>ripple</code> object is a GEM geometric object that renders and distorts a square. When triggered, it creates a visual ripple effect by accelerating the square's vertices towards a specified center point, which then gradually return to their original positions. It takes arguments for the square's segments and inlets for size, amount of excursion, and the center position for the ripple.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>ripple</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/rotateXYZ/","title":"rotateXYZ","text":"<p>The <code>rotateXYZ</code> object in GEM applies a 3D rotation to the current transformation matrix. It allows independent control over rotation around the X, Y, and Z axes, specified either as arguments or dynamically through its inlets. This object is primarily used for manipulating the orientation of graphical elements within a GEM patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>rotateXYZ</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/scaleXYZ/","title":"scaleXYZ","text":"<p>The <code>scaleXYZ</code> object scales a GEM (Graphics Environment for Multimedia) object along its X, Y, and Z axes. It accepts a <code>gemlist</code> to modify the current transformation matrix, with individual scaling factors for each axis controllable via separate float inlets.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>scaleXYZ</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/scope3d~/","title":"scope3d~","text":"<p>The <code>scope3d~</code> object visualizes audio signals in a three-dimensional space, allowing users to observe the interplay of up to three input signals (X, Y, Z axes). It supports interactive rotation via mouse drag and offers customizable display settings such as buffer size, refresh rate, colors, and perspective. This experimental Lua-coded object is ideal for advanced signal analysis and visual feedback.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>scope3d~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/scopeXYZ~/","title":"scopeXYZ~","text":"<p>The <code>scopeXYZ~</code> object functions as a 3-dimensional oscilloscope, visualizing three input signals as excursions along the X, Y, and Z axes. It is commonly used to generate and display Lissajous patterns. The object takes an argument to specify the number of signal points to store for rendering the trace.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>scopeXYZ~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/separator/","title":"separator","text":"<p>The <code>separator</code> object in Pure Data's GEM library isolates transformation effects between parallel rendering chains. It achieves this by pushing and popping OpenGL matrices (modelview, color, texture, projection) to save and restore the rendering state, preventing unintended side-effects like rotations or translations from affecting other branches. This ensures independent visual transformations within a complex rendering graph.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>separator</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/shearXY/","title":"shearXY","text":"<p>The <code>shearXY</code> object applies a shear transformation to graphical objects within GEM (Graphics Environment for Multimedia). It takes a <code>gemlist</code> and a float shear factor, modifying the current transformation matrix so that the X translation depends on the Y position. This allows for visual distortion and manipulation of rendered graphics.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>shearXY</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/shearXZ/","title":"shearXZ","text":"<p>The <code>shearXZ</code> object applies a shear transformation to a GEM list, modifying the current OpenGL transformation matrix. It causes the X translation of objects to depend on their Z position and a specified shear factor. This object is primarily used for manipulating 3D graphics within GEM, allowing for visual distortions along the X and Z axes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>shearXZ</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/shearYX/","title":"shearYX","text":"<p>The <code>shearYX</code> object applies a shear transformation to a GEM object's current transformation matrix. It takes a <code>gemlist</code> as input and outputs a modified <code>gemlist</code>. The X translation of the transformation depends on the Y position and a specified shear factor, which can be set as an argument or via the second inlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>shearYX</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/shearYZ/","title":"shearYZ","text":"<p>The <code>shearYZ</code> object applies a shear transformation to the current OpenGL transformation matrix, affecting subsequent graphical rendering. It modifies the Y translation of objects based on their Z position and a given shear factor. This allows for visual distortion along the Y-Z plane.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>shearYZ</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/shearZX/","title":"shearZX","text":"<p>The <code>shearZX</code> object is a GEM manipulation object that applies a shear transformation to the current transformation matrix. It accepts a <code>gemList</code> and modifies the Z translation of graphical elements based on their X position and a specified shear factor. This allows for skewing objects along the ZX plane.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>shearZX</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/shearZY/","title":"shearZY","text":"<p>The <code>shearYZ</code> object applies a shear transformation to a <code>gemlist</code>, modifying the current OpenGL transformation matrix. It adjusts the Y-coordinate of graphical elements based on their Z-position and a given float shear factor. This object is used for creating specific visual distortions in 3D graphics.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>shearZY</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/shininess/","title":"shininess","text":"<p>The <code>shininess</code> object in GEM sets the shininess property of materials for subsequent OpenGL vertex operations. It accepts a <code>gemlist</code> to pass through the graphics pipeline, or an integer value (0-128) to define the shininess. This object is crucial for controlling the reflective appearance of 3D objects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>shininess</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/slideSquares/","title":"slideSquares","text":"<p>The <code>slideSquares</code> object renders a series of sliding rectangles within a GEM patch. Its dimensions (width and height) can be dynamically controlled via its inlets, allowing for animated visual effects. It accepts <code>gemlist</code> input and can be instructed to draw as lines, fills, or points.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>slideSquares</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/specular/","title":"specular","text":"<p>The <code>specular</code> object sets the specular color for subsequent 3D vertex operations within a GEM (Graphics Environment for Multimedia) context. It accepts a <code>gemlist</code> and a list of RGB or RGBA float values, modifying the graphics state to apply specular lighting effects when lighting is enabled.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>specular</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/specularRGB/","title":"specularRGB","text":"<p>The <code>specularRGB</code> object in GEM sets the specular color for subsequent OpenGL vertex operations. It accepts a <code>gemlist</code> or individual float values for Red, Green, Blue, and Alpha to define the color. To observe its effect, lighting must be enabled in the GEM environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>specularRGB</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/sphere/","title":"sphere","text":"<p>The <code>sphere</code> object renders a 3D sphere within the GEM (Graphics Environment for Multimedia) context. Its visual style can be controlled using <code>draw</code> messages, while its size and segmentation can be dynamically adjusted via dedicated inlets. This object is fundamental for creating geometric shapes in 3D graphics.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>sphere</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/sphere3d/","title":"sphere3d","text":"<p>The <code>sphere3d</code> object renders a deformable 3D sphere within GEM. It allows control over its drawing style (line, fill, point) and overall size. Uniquely, users can manipulate individual points on the sphere using <code>setCartesian</code> and <code>setSpherical</code> messages, enabling complex 3D shape transformations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>sphere3d</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/spline_path/","title":"spline_path","text":"<p>The <code>spline_path</code> object reads interpolated values from a multi-dimensional table, treating it as a spline. It allows specifying a normalized reading point (0.0 to 1.0) to retrieve data, and the table itself can be loaded via an \"open\" message. This object is part of the GEM library, indicating its use in graphics for defining and traversing paths or curves.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>spline_path</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/spot_light/","title":"spot_light","text":"<p>The <code>spot_light</code> object adds a customizable spot-light to a GEM scene, allowing control over its position, color (via RGB list), and properties like linear attenuation, cone cutoff angle, and decay at edges. It can be adjusted with objects like <code>rotate</code> and includes a debug mode to visualize the light source. For frame-accurate rendering, its attributes should be set early in the <code>gemhead</code> order.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>spot_light</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/square/","title":"square","text":"<p>The <code>square</code> object renders a square within the GEM graphical environment. Its size can be dynamically adjusted via its second inlet, and its rendering mode (line, fill, or point) can be controlled via the first inlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>square</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/surface3d/","title":"surface3d","text":"<p>The <code>surface3d</code> object renders a 3D bicubic curve, with its shape controlled by a matrix of control points. It allows users to define the curve's resolution, set individual control point positions, and specify the drawing style (e.g., line, fill, point). This object is part of the GEM library, focusing on OpenGL graphics.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>surface3d</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/teapot/","title":"teapot","text":"<p>The <code>teapot</code> object renders a 3D teapot shape within a GEM patch. It allows control over the teapot's size via its second inlet and the number of slices (detail) via its third inlet. It can also receive <code>draw</code> messages to specify rendering mode (line, fill, or points).</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>teapot</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/text2d/","title":"text2d","text":"<p>The <code>text2d</code> object in Pure Data renders a line of text using TrueType fonts within a GEM environment. It allows customization of the displayed text, font, anti-aliasing, and horizontal/vertical justification. Unlike other GEM objects, <code>text2d</code> does not apply 3D transformations to the rendered text.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>text2d</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/text3d/","title":"text3d","text":"<p>The <code>text3d</code> object in Pure Data renders a single line of text within a 3D graphical environment, leveraging GEM's transformations. It supports loading TrueType fonts and allows for customization of text content, size, and justification. This object is primarily used for displaying dynamic text as part of a 3D visual scene.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>text3d</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/textextruded/","title":"textextruded","text":"<p>The <code>textextruded</code> object renders a single line of extruded text within the GEM environment, applying current color and 3D transformations. It supports TrueType fonts, allowing users to load custom fonts and control text justification (horizontal and vertical), size, and extrusion depth. This object is primarily for visual text display in 3D graphics.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>textextruded</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/textoutline/","title":"textoutline","text":"<p>The <code>textoutline</code> object renders a single line of outlined text within a GEM (Graphics Environment for Multimedia) context. It supports TrueType fonts, allowing customization of text content, size, color, 3D transformations, and justification. It outputs a <code>gemlist</code> for rendering and provides bounding box information about the rendered text.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>textoutline</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/torus/","title":"torus","text":"<p>The <code>torus</code> object renders a 3D torus (doughnut shape) within a GEM environment. It allows dynamic control over its size, number of slices, and thickness via its inlets, enabling real-time manipulation of the rendered geometric primitive.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>torus</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/translate/","title":"translate","text":"<p>The <code>translate</code> object in Pure Data is a GEM manipulation object that applies a translation to the current transformation matrix. It takes a <code>gemlist</code> as input and outputs a modified <code>gemlist</code>, effectively moving graphical objects in 3D space. Translation can be controlled by arguments for scale and XYZ axis, or via its inlets.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>translate</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/translateXYZ/","title":"translateXYZ","text":"<p>The <code>translateXYZ</code> object applies a 3D translation to the current transformation matrix within GEM (Graphics Environment for Multimedia). It accepts a <code>gemList</code> and modifies it based on a specified X, Y, Z vector, which can be set via arguments or individual float inlets. This object is fundamental for positioning graphical elements in a 3D scene.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>translateXYZ</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/trapezoid/","title":"trapezoid","text":"<p>The <code>trapezoid</code> object in Pure Data renders a trapezoidal shape in a graphical environment, taking its position and color from the current rendering state. Its dimensions and the relative length of its top line can be dynamically adjusted via its inlets. It supports drawing as lines, filled, or as points.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>trapezoid</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/triangle/","title":"triangle","text":"<p>The <code>triangle</code> object in Pure Data is a GEM (Graphics Environment for Multimedia) object that renders an isosceles triangle. It can draw the triangle as an outline, filled, or as a point, and its size can be dynamically adjusted via its second inlet. This object is primarily used for generating basic geometric shapes within a visual patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>triangle</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/tube/","title":"tube","text":"<p>The <code>tube</code> object in Pure Data renders a 3D tube shape. It defines the tube using two circles, which can be independently translated and rotated to create various complex forms. This object is part of the GEM library for graphical rendering.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>tube</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/vertex_program/","title":"vertex_program","text":"<p>The <code>vertex_program</code> object in Pure Data loads and applies an ARB or NV vertex shader, enabling custom vertex processing within GEM. It takes a filename via its <code>open</code> message to load the shader program. Users can modify shader parameters using <code>GEMglProgramEnvParameter*</code> objects, provided their OpenGL implementation supports the necessary extensions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>vertex_program</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/world_light/","title":"world_light","text":"<p><code>world_light</code> adds a directional light source to a GEM scene, simulating light rays from an infinite distance (parallel rays). It allows control over the light's on/off state and color using RGB or RGBA values. The light's direction can be adjusted using other GEM objects like <code>rotate</code>, and a debug mode helps visualize its position.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>world_light</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/graphics/yuv2rgb/","title":"yuv2rgb","text":"<p>The <code>yuv2rgb</code> object converts video signals between the YUV and RGB color spaces. It is a GEM object, primarily used for manipulating color information within a graphical context, enabling flexible color processing in visual patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>yuv2rgb</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/biplot/","title":"biplot","text":"<p>The <code>biplot</code> object visualizes the frequency response of a biquad filter. It takes a list of biquad coefficients, typically generated by objects like <code>bicoeff2</code>, and plots the corresponding filter curve, allowing for graphical inspection of filter characteristics.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>biplot</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/button/","title":"button","text":"<p>The <code>button</code> object is a graphical user interface element in Pure Data that functions as a clickable button. It supports three modes: <code>latch</code> (default), <code>toggle</code>, and <code>bang</code>, determining its behavior upon mouse clicks or bang/float inputs. It outputs bangs or 0/1 floats based on its state and mode, and its appearance can be customized with size and color messages.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>button</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/circle/","title":"circle","text":"<p>The <code>circle</code> object is a two-dimensional GUI slider abstraction with a circular area. It allows users to control x/y coordinates by clicking and dragging, clipping values within a defined range. It supports various display modes (cartesian, polar, single point), customizable size, line/grid visibility, and color settings.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>circle</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/click/","title":"click","text":"<p>The <code>click</code> object generates a <code>bang</code> message when its graphical representation is clicked within a parent patch or abstraction. By default, it operates in \"abstraction\" mode, making it ideal for creating interactive elements in reusable Pure Data modules. It can also be used within subpatches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>click</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/colors/","title":"colors","text":"<p>The <code>colors</code> object in Pure Data functions as a color picker and converter, allowing users to select colors via a GUI and convert between various color formats like RGB, Hex, CMYK, HSL, and HSV. It's particularly useful for managing and setting color properties for GUI objects (<code>iemguis</code>) and Data Structures within Pure Data patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>colors</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/comment/","title":"comment","text":"<p>The <code>comment</code> object is a GUI element in Pure Data used for displaying customizable text labels or notes within a patch. It allows extensive control over font, size, color, background, bold, italic, underline, and text justification, configurable via messages or attributes. This object is considered deprecated in favor of <code>else/note</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>comment</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/display/","title":"display","text":"<p>The <code>display</code> object in Pure Data functions similarly to <code>print</code>, showing messages directly within a patch. It can be configured with a fixed character limit, truncating longer messages, or it can auto-resize to fit the input. Additionally, it allows setting a refresh rate and includes a <code>-noflash</code> flag to prevent visual flickering.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>display</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/fluid.plotter/","title":"fluid.plotter","text":"<p>The <code>fluid.plotter</code> object provides a native graphical user interface for plotting and querying two-dimensional datasets. It allows users to visualize data points, customize their appearance, and interact with the plot through zooming and mouse input. The object also supports setting plot ranges and can be integrated with data analysis techniques like k-d tree querying and clustering.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.plotter</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/grab/","title":"grab","text":"<p>The <code>grab</code> object sends a message to another object and intercepts its output, routing it through <code>grab</code>'s own outlets. It can be configured with a float argument to match the number of outlets of the grabbed object, or with a symbol argument to grab output from a named <code>receive</code> object. <code>grab</code> is particularly useful for setting GUI values while simultaneously capturing their output, enabling preset management.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>grab</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/graph~/","title":"graph~","text":"<p><code>graph~</code> is a simple abstraction designed for visualizing audio signals. It plots incoming audio, allowing control over buffer size, skip rate, display range, dimensions, and colors. It can operate in an external mode, where plotting is triggered by a bang.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>graph~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/knob/","title":"knob","text":"<p>The <code>knob</code> object is a highly customizable graphical user interface (GUI) element that functions as a rotary control. It outputs float values, supports exponential and logarithmic scaling, and offers extensive visual and behavioral customization, including discrete steps, angular range, and color settings. It integrates with MIDI, allows state saving, and responds to various input methods like mouse dragging and keyboard navigation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>knob</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/messbox/","title":"messbox","text":"<p>The <code>messbox</code> object is an interactive GUI element that allows users to type and send messages during run mode, functioning similarly to a standard message box. It supports dynamic message construction using dollar-sign arguments (<code>$1</code>, <code>$2</code>), comma-separated messages, and semicolon-triggered send operations. Unlike a regular message box, <code>messbox</code> expands the <code>$0</code> argument and offers methods for setting its dimensions, font styles, and colors.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>messbox</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/meter2~/","title":"meter2~","text":"<p>The <code>meter2~</code> object functions as a stereo VU-meter, taking left and right audio signals and outputting their RMS and peak amplitude values in dBFS as a list. It also passes the input signals through its outlets, making it suitable for insertion into an audio signal chain. It can handle multichannel signals and allows setting window and hop sizes for its internal <code>vu~</code> objects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>meter2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/mtx.ctl/","title":"mtx.ctl","text":"<p>The <code>mtx.ctl</code> object provides a graphical user interface for a matrix grid where cells can be toggled on or off. It outputs a list containing the column, row, and status (on/off) of a clicked cell, making it ideal for controlling objects like <code>mtx~</code>. Users can dynamically set grid dimensions, cell size, and manage cell states via messages like <code>set</code>, <code>get</code>, <code>clear</code>, <code>export</code>, and <code>import</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>mtx.ctl</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/multi.vsl/","title":"multi.vsl","text":"<p>The <code>multi.vsl</code> object provides a graphical multi-slider interface for Pure Data, allowing users to control and visualize multiple numerical values. It stores these values in an internal array, offering customizable ranges, dimensions, and colors. Values can be set interactively, programmatically via messages, and output either as individual slider/value pairs or as a complete list.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>multi.vsl</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/note/","title":"note","text":"<p>The <code>note</code> object is a graphical user interface element in Pure Data designed for displaying text notes within a patch. It functions similarly to a standard comment box but offers extensive customization options for text formatting, including font, size, color, bold, italic, underline, justification, and background color. Its display properties can be dynamically controlled via incoming messages.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>note</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/number~/","title":"number~","text":"<p>The <code>number~</code> object in Pure Data serves as a dual-purpose GUI element, either monitoring an incoming audio signal's value or generating a ramped signal. When generating, it can produce a signal that ramps to a target value over a specified time, similar to <code>line~</code>. It also allows for setting display intervals and customizing its appearance.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>number~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/numbox~/","title":"numbox~","text":"<p>The <code>numbox~</code> object is a GUI number box designed for signal values. It can operate in two modes: either displaying/monitoring incoming audio signals at a specified refresh rate, or generating a constant signal value with an optional ramp time. Users can interact with it via mouse or keyboard to set values when in generation mode, and customize its appearance (font size, width, colors).</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>numbox~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/pad/","title":"pad","text":"<p>The <code>pad</code> object is a graphical user interface (GUI) element in Pure Data that reports the mouse coordinates (x, y) over its area and its click status. It can be configured with dimensions (width, height) and color, and it outputs mouse position and click events, even when dragging outside its visible area.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pad</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/popmenu/","title":"popmenu","text":"<p>The <code>popmenu</code> object is a graphical user interface element that displays a popup menu. It allows users to select from a list of items (floats or symbols), outputting the selected item's index, the item itself, or both. It supports various customization options for appearance, behavior, and communication with other Pure Data objects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>popmenu</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/range.hsl/","title":"range.hsl","text":"<p>The <code>range.hsl</code> object is a graphical user interface (GUI) horizontal slider designed for selecting or manipulating a numerical range. It allows users to define minimum and maximum values within a specified width and height, and supports various interaction modes like shifting or expanding the selected range. It outputs the current min/max range as a list.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>range.hsl</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/scope~/","title":"scope~","text":"<p>The <code>scope~</code> object visualizes audio signals in the style of an oscilloscope. It can display a single signal in Y-mode or plot two signals against each other in X-Y mode, useful for observing phase relationships and creating Lissajous figures. Its display parameters, including buffer size, colors, and trigger modes, are highly customizable.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>scope~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/setdsp~/","title":"setdsp~","text":"<p>The <code>setdsp~</code> object is an abstraction designed to display and control Pure Data's audio engine (DSP) state. It provides a toggle interface for users to easily switch the DSP on or off, and can also be controlled programmatically via float or bang messages. This utility is often included in documentation patches to manage the audio processing state.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>setdsp~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/slider2d/","title":"slider2d","text":"<p>The <code>slider2d</code> object is a graphical user interface (GUI) element that functions as a two-dimensional slider. It allows users to interactively select and output x/y coordinate values, with extensive configuration options for ranges, dimensions, background/foreground colors, and grid/line visibility.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>slider2d</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/gui/zbiplot/","title":"zbiplot","text":"<p>The <code>zbiplot</code> object visualizes biquad filter coefficients by plotting their poles and zeros in the complex plane. It takes a list of coefficients, typically from a <code>biquad~</code> object, and displays the corresponding pole and zero coordinates. This helps in understanding the frequency response characteristics of the filter.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>zbiplot</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/lfos/lfnoise/","title":"lfnoise","text":"<p>The <code>lfnoise</code> object generates low-frequency pseudo-random noise at a control rate, with an output range from 0 to 127. It supports setting a seed for reproducible sequences and can optionally use linear interpolation for smoother transitions between random values. This object is useful for generating control signals for modulation or other parameters.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lfnoise</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/lfos/lfo/","title":"lfo","text":"<p>The <code>lfo</code> object is a control-rate Low Frequency Oscillator that generates common waveforms such as sine, triangle, sawtooth, variable sawtooth, and square. It outputs values in the range of 0 to 127, and its frequency, phase, and refresh rate can be controlled via inlets or messages. This object is useful for generating modulation signals for various parameters.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lfo</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/lfos/lfo.m~/","title":"lfo.m~","text":"<p>The <code>lfo.m~</code> object is a versatile Low Frequency Oscillator module. It generates various waveforms including sine, triangle, saw, vsaw, and square, with an option for unipolar output. It features signal inlets for Frequency Modulation (FM) and Pulse Width Modulation (PWM) with attenuverters, and a sync inlet for impulse-based synchronization.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lfo.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/lfos/phasor/","title":"phasor","text":"<p>The <code>phasor</code> object generates a control-rate ramp signal, similar to <code>phasor~</code> but for control signals rather than audio. It can be configured by frequency in Hz or by a rate period in milliseconds, and its phase can be offset or synced. It outputs a phase value scaled from 0 to 127, making it suitable for MIDI or other control parameter modulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>phasor</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/lfos/train~/","title":"train~","text":"<p>The <code>train~</code> object generates a pulse signal that alternates between 1 and 0, with configurable period, pulse width, and onset phase offset. It outputs the pulse signal and sends a <code>bang</code> message upon each 0-to-1 transition, making it suitable for use as a metronome or for triggering events. The pulse width controls the duration of the \"on\" state, while the onset phase delays the start of the \"on\" portion.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>train~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/%26%26~/","title":"&amp;&amp;~","text":"<p>The <code>&amp;&amp;~</code> object performs a logical AND operation on two input signals. It outputs a signal based on the comparison of its two signal inlets. This is an abstraction, and an external version exists with better performance.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>&amp;&amp;~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/0x3c0x7e/","title":"0x3c0x7e","text":"<p>This Pure Data object, <code>0x3c0x7e</code>, is an abstraction for the signal comparison object <code>&lt;~</code>. It compares two incoming signals and outputs a signal indicating whether the first signal is less than the second. This abstraction does not support arguments and has worse performance than the external <code>zexy</code> version.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>0x3c0x7e</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/0x3e0x7e/","title":"0x3e0x7e","text":"<p>The <code>&gt;~</code> object compares two incoming audio signals, outputting a signal that is true (non-zero) when the first inlet's signal is greater than the second. This is an abstraction from the <code>zexy</code> library and does not support arguments, unlike its external counterpart.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>0x3e0x7e</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/0x7c0x7c0x7e/","title":"0x7c0x7c0x7e","text":"<p>The Pure Data object <code>||~</code> performs a logical OR operation on two incoming audio signals. It outputs a signal that is high (non-zero) if either of the input signals is high, and low (zero) only if both input signals are low. This object is an abstraction and does not support arguments.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>0x7c0x7c0x7e</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/%3D%3D~/","title":"==~","text":"<p>The <code>==~</code> object compares two incoming audio signals for equality, outputting a signal that indicates whether they are identical. This abstraction, part of the zexy library, does not accept creation arguments and may have reduced performance compared to its external version.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>==~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/above/","title":"above","text":"<p>The <code>above</code> object monitors an incoming float value, sending a bang from its left outlet when the value rises above a specified threshold. It also sends a bang from another outlet when the value falls back to or below the threshold. The threshold can be set dynamically or initialized.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>above</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/above~/","title":"above~","text":"<p>The <code>above~</code> object detects when an input signal crosses a specified threshold. It sends an impulse on its left output when the signal rises above the threshold and another impulse when it falls back below or to the threshold. This object is useful for triggering events or controlling processes based on signal amplitude.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>above~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/bitand~/","title":"bitand~","text":"<p>The <code>bitand~</code> object performs a bitwise AND operation on two input signals or a signal and a given bitmask. It compares the 32-bit representations of its inputs, setting bits to 1 only if both corresponding input bits are 1. The object supports various conversion modes for its inputs and can produce NaNs or INFs.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>bitand~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/bitnot~/","title":"bitnot~","text":"<p><code>bitnot~</code> performs a bitwise NOT operation (one's complement) on an incoming signal. It inverts all bits of the 32-bit floating-point signal, with an option to first convert the input to an integer. This object is useful for low-level signal manipulation and can be a building block for more complex digital signal processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>bitnot~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/bitor~/","title":"bitor~","text":"<p>The <code>bitor~</code> object performs a bitwise OR operation on two 32-bit values, either two audio signals or an audio signal and a bitmask. It compares corresponding bits, setting the output bit to 1 if either input bit is 1. The object offers various modes to control how floating-point signals are converted to integers before the bitwise operation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>bitor~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/bitxor~/","title":"bitxor~","text":"<p>The <code>bitxor~</code> object performs a bitwise exclusive OR (XOR) operation on two audio signals, or between an audio signal and a 32-bit integer bitmask. It offers multiple modes for converting floating-point signal values to integers before comparison, and the bitmask can be set via an argument, float input, or a <code>bits</code> message. This object is useful for low-level signal manipulation based on bitwise logic.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>bitxor~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/buddy/","title":"buddy","text":"<p>The <code>buddy</code> object synchronizes incoming messages across its inlets, outputting them only when all inlets have received a message. It ensures that all inputs are present before emitting them in right-to-left order, then clears its state. This is useful for coordinating data flow when message arrival order is uncertain.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>buddy</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/changed/","title":"changed","text":"<p>The <code>changed</code> object acts as a message filter, passing through any incoming message only if it differs from the previously received one. Unlike <code>change</code> from Pd Vanilla, it supports all message types. This is useful for triggering actions solely when a value genuinely changes, preventing redundant processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>changed</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/changed~/","title":"changed~","text":"<p>The <code>changed~</code> object detects changes in an incoming signal. When the signal's value changes by more than a specified threshold (defaulting to 0), it outputs an impulse. This is useful for triggering events only when a signal's state significantly alters.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>changed~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/equal/","title":"equal","text":"<p>The <code>equal</code> object compares two lists. It outputs <code>1</code> if the input list from the left inlet is identical to the list provided to its right inlet (or set as an argument), otherwise it outputs <code>0</code>. This object is useful for conditional logic based on list content.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>equal</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/equals~/","title":"equals~","text":"<p>The <code>equals~</code> (or <code>==~</code>) object performs a signal comparison, outputting a signal of 1 when its left inlet signal is equal to its right inlet signal or argument, and 0 otherwise. It functions as an \"is equal to\" operator for audio-rate signals, providing a binary (true/false) output based on the comparison.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>equals~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/fluid.datasetquery/","title":"fluid.datasetquery","text":"<p>The <code>fluid.datasetquery</code> object allows users to query and filter <code>FluidDataSet</code> objects. It enables the selection of specific columns and the application of logical conditions to match points within a dataset, serving as a powerful tool for searching and filtering databases of descriptors. It supports combining multiple operators and copying filtered data to a destination dataset.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.datasetquery</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/gate2imp~/","title":"gate2imp~","text":"<p>The <code>gate2imp~</code> object converts a gate signal into an impulse. It outputs a short, sharp signal (an impulse) whenever the input gate signal changes from off to on, effectively triggering an event or action.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gate2imp~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/gatedelay/","title":"gatedelay","text":"<p>The <code>gatedelay~</code> object delays the \"on\" value of a control gate by a specified time in milliseconds. However, it outputs the \"off\" value of the gate immediately without delay. This object is useful for precise timing control of events where the start needs to be delayed but the end should be instantaneous.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gatedelay</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/gaterelease/","title":"gaterelease","text":"<p>The <code>gaterelease</code> object manages the timed release of a gate signal. It holds an input gate value for a specified duration, then releases it over a configurable release time in milliseconds. This object is useful for precisely controlling the duration of gate signals, especially when dealing with overlapping events, as it resets if the gate closes before its release completes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gaterelease</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/greaterthaneq~/","title":"greaterthaneq~","text":"<p>The <code>greaterthaneq~</code> (or <code>&gt;=~</code>) object performs a \"greater than or equal to\" comparison for audio signals. It outputs a signal of 1 when its left inlet's signal is greater than or equal to the right inlet's signal or argument, and 0 otherwise. This object is useful for creating signal-based conditional logic.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>greaterthaneq~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/greaterthan~/","title":"greaterthan~","text":"<p>The <code>greaterthan~</code> (or <code>&gt;~</code>) object performs a sample-by-sample comparison between two signal inputs. It outputs a signal of 1 if the left inlet's signal is strictly greater than the right inlet's signal or argument, otherwise it outputs 0. This object is fundamental for implementing conditional logic within signal processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>greaterthan~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/lessthaneq~/","title":"lessthaneq~","text":"<p>The <code>lessthaneq~</code> (or <code>&lt;=~</code>) object performs a \"less than or equal to\" comparison on incoming audio signals. It outputs a signal of 1 when the left inlet's signal is less than or equal to the right inlet's signal or argument, and 0 otherwise, enabling signal-based conditional logic.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>lessthaneq~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/lessthan~/","title":"lessthan~","text":"<p>The <code>lessthan~</code> (or <code>&lt;~</code>) object performs a \"less than\" comparison for audio signals. It outputs a signal of 1 when its left input is strictly less than its right input or argument, and a 0 otherwise. This object is fundamental for creating binary control signals based on signal amplitude comparisons.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>lessthan~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/limit/","title":"limit","text":"<p>The <code>limit</code> object controls the rate at which messages are passed through, allowing a message only after a specified time (in milliseconds) has elapsed since the last output. If messages arrive faster than the limit, it either queues the last message to be sent after the delay or ignores/routes them based on configurable ignore modes. This object is useful for preventing message floods or creating timed message sequences.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>limit</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/match/","title":"match","text":"<p>The <code>match</code> object outputs data when its input matches its arguments. It can match either a portion of an input list or a sequence of single elements. The special symbol <code>nn</code> acts as a wildcard for any number, and the object can be configured with <code>set</code> or <code>clear</code> messages.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>match</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/match~/","title":"match~","text":"<p>The <code>match~</code> object compares an incoming signal to a list of predefined values. When the signal matches any of these values, it outputs an impulse from its left outlet; otherwise, it outputs an impulse from its right outlet. This object functions similarly to <code>select</code> but operates at signal rate, making it suitable for signal-based event detection and routing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>match~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/next/","title":"next","text":"<p>The <code>next</code> object in Pure Data determines if an incoming message belongs to the same \"logical event\" as the preceding message. It outputs a bang from its left outlet if the message is a new event (e.g., a single mouse click or a delayed bang), and from its right outlet if it's part of the same event stream (e.g., multiple bangs from <code>uzi</code>). This is useful for triggering actions once per distinct event or message dump.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>next</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/notequals~/","title":"notequals~","text":"<p>The <code>notequals~</code> (or <code>!=~</code>) object performs a \"not equal to\" comparison between its left signal input and either its right signal input or a creation argument. It outputs a <code>1</code> signal if the values are not equal, and a <code>0</code> signal if they are equal, making it a fundamental tool for conditional signal processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>notequals~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/onebang/","title":"onebang","text":"<p>The <code>onebang</code> object gates incoming bangs, allowing the first bang through its left outlet only after a bang has been received in its right inlet. Subsequent bangs, or bangs received before the right inlet is triggered, are sent to the right outlet. It can be reset to re-enable the gate.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>onebang</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/op/","title":"op","text":"<p>The <code>op</code> object in Pure Data provides a wide range of mathematical, comparative, bitwise, and logical operations. It can perform arithmetic calculations, compare values, manipulate bits, and apply logical conditions to incoming numbers or lists. This object is particularly useful for list processing, offering a consolidated way to apply various operations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>op</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/op~/","title":"op~","text":"<p>The <code>op~</code> object performs various signal operations, including comparative, logical, bitwise, and modulo calculations. It is designed for efficiency and supports multichannel signals, allowing for per-channel operations or applying a single value across multiple channels. This object provides a more optimized alternative to <code>expr~</code> for these specific operations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>op~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/past/","title":"past","text":"<p>The <code>past</code> object compares an incoming list of numbers against a list of thresholds. It outputs a <code>bang</code> only when all input values exceed their corresponding thresholds, and crucially, only if they were previously at or below those thresholds. This allows for stateful triggering when values \"pass\" a certain point after having been below it.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>past</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/schmitt/","title":"schmitt","text":"<p>The <code>schmitt</code> object implements a Schmitt trigger, a comparator with hysteresis. It takes an input value and outputs <code>1</code> or <code>0</code> based on whether the input crosses a high or low threshold. This is useful for debouncing noisy signals or converting analog signals into stable digital states.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>schmitt</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/schmitt~/","title":"schmitt~","text":"<p>The <code>schmitt~</code> object implements a Schmitt trigger, outputting a 1 or 0 signal based on whether its input crosses a high or low threshold. It is useful for converting noisy or fluctuating signals into clean binary (on/off) signals, with adjustable low and high threshold levels.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>schmitt~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/status~/","title":"status~","text":"<p>The <code>status~</code> object detects transitions in an audio signal. It outputs an impulse when the input signal changes from zero to non-zero, or from non-zero to zero. This allows for event triggering based on signal activity.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>status~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/strcmp/","title":"strcmp","text":"<p>The <code>strcmp</code> object compares two lists as if they were strings, similar to the <code>strcmp</code> function in C programming. It outputs a float indicating the comparison result, which can be used for logical operations based on string equality or order.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>strcmp</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/switch/","title":"switch","text":"<p>The <code>switch</code> object routes messages from one of its multiple data inlets to a single outlet. The active inlet is determined by a number sent to its control inlet, where 0 closes all inlets and positive integers select corresponding inlets. It functions as a conditional message pass-through for any message type.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>switch</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/tCube3D/","title":"tCube3D","text":"<p>The <code>tCube3D</code> object determines if a given 3D point (referred to as a \"mass\") is located within a user-defined 3D bounding box. It takes the X, Y, and Z coordinates of the mass as input and outputs <code>1</code> if the mass is inside the specified cube, and <code>0</code> if it is outside. This object is primarily used for spatial collision detection or position testing in 3D environments.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>tCube3D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/tSphere3D/","title":"tSphere3D","text":"<p>The <code>tSphere3D</code> object performs a spherical test to determine if a \"mass\" (likely a point or object) is located within a defined 3D spherical region. It takes the X, Y, Z coordinates of the sphere's center and its minimum and maximum radii as parameters. The object outputs a boolean (0 or 1) indicating whether the mass is inside the specified spherical boundaries.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>tSphere3D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/thresh~/","title":"thresh~","text":"<p>The <code>thresh~</code> object acts as a Schmitt trigger, detecting when an input signal crosses specified high and low thresholds. It outputs <code>1</code> when the signal reaches or exceeds the high threshold and switches to <code>0</code> when the signal falls to or below the low threshold, providing stable detection of signal levels.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>thresh~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/togedge/","title":"togedge","text":"<p>The <code>togedge</code> object detects transitions in numerical input. It outputs a <code>bang</code> from its left outlet when the input changes from zero to a non-zero value, and a <code>bang</code> from its right outlet when the input changes from a non-zero value back to zero. This allows for triggering events based on the state changes of a numerical signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>togedge</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/toggleff~/","title":"toggleff~","text":"<p>The <code>toggleff~</code> object is a signal-triggered toggle that switches its output between 0 and 1 each time it receives an input signal. It can be initialized to either 0 or 1 using an optional float argument.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>toggleff~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/trig2bang/","title":"trig2bang","text":"<p>The <code>trig2bang</code> object detects transitions from a zero to a non-zero float signal. Upon detecting such a transition, it outputs a bang message. This object is useful for triggering events or actions based on specific signal changes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>trig2bang</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/logic/zigbinops/","title":"zigbinops","text":"<p>The <code>zigbinops</code> help patch describes a collection of signal-rate Pure Data objects from the zexy library. These objects perform various mathematical operations like absolute value (<code>abs~</code>, <code>absgn~</code>) and signum (<code>sgn~</code>), as well as binary comparisons (<code>&lt;~</code>, <code>==~</code>, <code>&gt;~</code>) and logical operations (<code>&amp;&amp;~</code>, <code>||~</code>) on incoming signals. They are fundamental tools for signal processing within Pure Data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>zigbinops</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.bufflatten/","title":"fluid.bufflatten","text":"<p>The <code>fluid.bufflatten</code> object flattens a multi-channel buffer into a single-channel buffer. Its primary purpose is to prepare analysis data, often from objects like <code>fluid.bufstats~</code> or <code>fluid.bufmfcc~</code>, for use with machine learning tools such as <code>fluid.dataset~</code>. It effectively transforms multi-dimensional data into a linear array suitable for further processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufflatten</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.bufnmf/","title":"fluid.bufnmf","text":"<p>The <code>fluid.bufnmf</code> object performs Non-Negative Matrix Factorisation (NMF) to decompose the spectrum of a sound into multiple components, represented by 'bases' (spectral profiles) and 'activations' (temporal envelopes). It supports multichannel audio and allows guiding the NMF process through attributes like <code>basesmode</code> and <code>actmode</code>, enabling iterative learning and real-time sound reconstruction.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufnmf</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.bufnmfcross/","title":"fluid.bufnmfcross","text":"<p><code>fluid.bufnmfcross</code> reconstructs a target sound by using components learned from a source sound through Non-negative Matrix Factorization (NMF). The output is a hybrid of the source and target, where the algorithm attempts to match the target's spectrum over time using the source's learned components. Parameters like <code>timesparsity</code>, <code>polyphony</code>, and <code>continuity</code> influence this cross-synthesis process.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufnmfcross</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.bufnmfseed/","title":"fluid.bufnmfseed","text":"<p>The <code>fluid.bufnmfseed</code> object computes initial bases and activations for Non-negative Matrix Factorization (NMF) from an input audio buffer. It allows users to specify a \"coverage\" amount to control the decomposition process, with the resulting bases usable for audio resynthesis or further analysis of individual components.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufnmfseed</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.kmeans/","title":"fluid.kmeans","text":"<p>The <code>fluid.kmeans</code> object implements the K-means clustering algorithm, used to group data points from a <code>fluid.dataset</code> into a specified number of clusters. It can incrementally fit data, predict cluster assignments, and retrieve cluster centroids (means), allowing for both unsupervised learning and biased clustering through initial mean seeding.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.kmeans</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.knnclassifier/","title":"fluid.knnclassifier","text":"<p>The <code>fluid.knnclassifier</code> object implements a K-Nearest Neighbors classifier, leveraging a <code>fluid.kdtree</code> for efficient data searching. It is designed to classify data, such as audio features (e.g., MFCCs), stored within a <code>fluid.dataset~</code> by training on existing labeled examples and then predicting the class of new inputs.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.knnclassifier</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.knnregressor/","title":"fluid.knnregressor","text":"<p>The <code>fluid.knnregressor</code> object performs K-Nearest Neighbours regression, enabling the prediction of outputs by finding the weighted average of neighboring data points within datasets. It is used to establish a regression mapping between two <code>fluid.dataset~</code> objects, allowing for data fitting and subsequent output prediction based on an input dataset.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.knnregressor</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.labelset/","title":"fluid.labelset","text":"<p>The <code>fluid.labelset</code> object is a container that associates string identifiers with corresponding labels, primarily used in conjunction with <code>fluid.dataset~</code> for machine learning tasks. It allows adding, setting, updating, deleting, and merging labels, and can store/retrieve its contents from disk or text objects. This object is crucial for managing training labels for algorithms like <code>fluid.mlpclassifier~</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.labelset</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.ls2text/","title":"fluid.ls2text","text":"<p><code>fluid.ls2text</code> is a utility object designed to convert a <code>fluid.labelset</code> from a <code>fluid.dataset</code> into a text object. It facilitates the textual representation of label entries and their identifiers, making it useful for displaying or processing data labels within Pure Data patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.ls2text</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.mds/","title":"fluid.mds","text":"<p>The <code>fluid.mds</code> object performs Multidimensional Scaling (MDS) for dimensionality reduction on a <code>fluid.dataset</code>. It is used to analyze and visualize high-dimensional data, such as MFCCs from audio buffers, by projecting them into a lower-dimensional space. The object also allows for comparison of various distance metrics during the scaling process.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.mds</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.mlpclassifier/","title":"fluid.mlpclassifier","text":"<p>The <code>fluid.mlpclassifier</code> object performs classification using a Multi-Layer Perceptron (MLP) neural network. It trains on a <code>fluid.dataset</code> and <code>fluid.labelset</code> to learn patterns, then predicts classifications for new data points or entire datasets. This allows for tasks like mapping learned quadrant separations onto new data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.mlpclassifier</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.mlpregressor/","title":"fluid.mlpregressor","text":"<p>The <code>fluid.mlpregressor</code> object performs regression using a Multi-Layer Perceptron (MLP) neural network. It is designed to train and predict relationships between <code>fluid.datasets</code>, allowing for complex data mapping and analysis within Pure Data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.mlpregressor</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.nmffilter~/","title":"fluid.nmffilter~","text":"<p>The <code>fluid.nmffilter~</code> object decomposes and resynthesizes an audio signal by filtering it against spectral templates, or \"bases,\" typically generated by <code>fluid.bufnmf~</code>. It allows for selective resynthesis of components, including the ability to delay components with a low spectral centroid, effectively acting as a spectral filter based on learned characteristics.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.nmffilter~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.nmfmatch~/","title":"fluid.nmfmatch~","text":"<p>The <code>fluid.nmfmatch~</code> object matches an incoming audio signal against a set of spectral templates, typically derived using Non-negative Matrix Factorization (NMF). It outputs activation levels that indicate the presence of these learned components, enabling real-time feature detection and control applications, such as dynamically controlling effects or creating adaptive filter banks.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.nmfmatch~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.nmfmorph~/","title":"fluid.nmfmorph~","text":"<p>The <code>fluid.nmfmorph~</code> object performs cross-synthesis between two audio sources using Nonnegative Matrix Factorization (NMF) and Optimal Transport (OT). It decomposes source and target sounds into spectral bases and activations, allowing for interpolation between their sonic characteristics. This enables morphing one sound's spectral content with another's temporal evolution.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.nmfmorph~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.normalize/","title":"fluid.normalize","text":"<p>The <code>fluid.normalize</code> object normalizes a <code>fluid.dataset</code> or a single data point. It scales data according to learned minimum and maximum values, remapping extrema between 0 and 1 to make different data dimensions comparable.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.normalize</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.pca/","title":"fluid.pca","text":"<p><code>fluid.pca</code> performs Principal Component Analysis (PCA) on a <code>fluid.dataset</code> to reduce dimensionality, such as transforming 13 MFCC values into 2. It helps create a perceptually meaningful space for data clustering and offers a 'whitening' option to enforce unit variance among principal components.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.pca</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.robustscale/","title":"fluid.robustscale","text":"<p>The <code>fluid.robustscale</code> object applies robust scaling to <code>fluid.dataset</code> objects. It transforms data such that each dimension has a median centered on 0 and a range of 1 between specified percentiles, making it resilient to outliers compared to standard normalization or standardization methods. This is useful for preprocessing feature data, such as pitch and confidence, for machine learning applications.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.robustscale</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.skmeans/","title":"fluid.skmeans","text":"<p><code>fluid.skmeans</code> implements the K-means clustering algorithm with cosine similarity. It allows users to incrementally fit datasets to learn clusters, predict cluster assignments for data points, and retrieve the calculated cluster centroids. This object is useful for data analysis and pattern recognition within datasets.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.skmeans</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.standardize/","title":"fluid.standardize","text":"<p>The <code>fluid.standardize</code> object rescales a <code>FluidDataSet</code> by transforming its data to have a mean of 0 and a standard deviation of 1 for each dimension. This process, often applied to feature data like pitch and confidence, makes different data dimensions more comparable for further analysis. It's a crucial preprocessing step for many machine learning and statistical tasks.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.standardize</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/fluid.umap/","title":"fluid.umap","text":"<p>The <code>fluid.umap</code> object performs Uniform Manifold Approximation and Projection (UMAP) for dimensionality reduction on a <code>fluid.dataset</code>. It transforms high-dimensional data (e.g., 26 values from sound segments) into a lower-dimensional representation, useful for visualization or further analysis. Parameters like <code>numneighbours</code> and <code>mindist</code> control the embedding, influencing how global or local structures are preserved.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.umap</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/machine_learning/onnx/","title":"onnx","text":"<p><code>onnx</code> is a lightweight Pure Data external that lets you run ONNX models directly inside Pd. Its small size makes it particularly suitable for pd4web projects where minimal memory footprint and minimal size are essential.</p> <ul> <li> Download here.</li> <li> Library developed mainly by Charles K. Neimog.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Videos Similar <ul></ul> Comments Contributors"},{"location":"objects/math/a.sum/","title":"a.sum","text":"<p>The <code>a.sum</code> object in Pure Data sums the last <code>x</code> numbers of an array. It is useful for calculating averages of parameters or for smoothing signals to reduce noise.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>neimog</code> and install it. Then create an object with <code>declare -lib neimog -path neimog</code>. Finally, use <code>a.sum</code> or any other object from <code>neimog</code>.</p></li> <li> Library developed mainly by Charles K. Neimog.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/absgn~/","title":"absgn~","text":"<p>The <code>absgn~</code> object calculates the absolute value and the signum of an incoming audio signal. It takes a signal as input and outputs two signals: one for the absolute value and another for the signum. This object is part of the <code>zexy</code> library and is an abstraction, meaning an external version might offer better performance.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>absgn~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/abs~/","title":"abs~","text":"<p>The <code>abs~</code> object calculates the absolute value of an incoming audio signal. It converts all negative signal values to their positive counterparts, effectively rectifying the signal. This is useful for ensuring signal values are always non-negative.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>abs~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/acos/","title":"acos","text":"<p>The <code>acos</code> object calculates the arc-cosine (inverse cosine) of a given number. It takes a float as input, computes its arc-cosine, and outputs the result as a float. This object is part of the control data trigonometric functions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>acos</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/acosh/","title":"acosh","text":"<p>The <code>acosh</code> object calculates the hyperbolic arc-cosine of a given floating-point number. It takes a float as input, which is stored, and a bang message triggers the calculation to output the result. This object provides a mathematical function, similar to other trigonometric functions found in Pure Data's Cyclone library or as Vanilla alternatives.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>acosh</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/acosh~/","title":"acosh~","text":"<p>The <code>acosh~</code> object calculates the hyperbolic arc-cosine of an incoming signal, sample by sample. Primarily intended for mathematical operations, it outputs zero for any input values less than 1.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>acosh~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/acos~/","title":"acos~","text":"<p>The <code>acos~</code> object calculates the arc-cosine of an incoming signal, sample by sample. It expects input values within the range of -1 to 1, producing a signal output between 0 and pi. Inputs outside this valid range will result in a zero output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>acos~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/add/","title":"add","text":"<p>The <code>add</code> object accumulates incoming float values, outputting the current sum. Its internal sum can be reset to its initial state via a <code>bang</code> message or explicitly set to a specific float value using the <code>set</code> message. This object is fundamental for maintaining a running total of numerical inputs in a patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>add</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/add~/","title":"add~","text":"<p>The <code>add~</code> object continuously accumulates incoming signal or float values, adding them to a running sum. It can be initialized with a starting sum, and the accumulation can be reset to this starting sum via a bang message or an impulse signal in its right inlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>add~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/amean/","title":"amean","text":"<p>The <code>amean</code> object generates a list of arithmetic means. It takes a starting value, an ending value, and the number of steps between them. The number of steps determines the length of the output list, where the list length is <code>steps + 1</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>amean</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/asin/","title":"asin","text":"<p>The <code>asin</code> object calculates the arc-sine of a given float input. It is a control-rate trigonometric function from the Cyclone library, providing mathematical operations on numerical data. Sending a <code>bang</code> message outputs the arc-sine of the currently stored value.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>asin</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/asinh/","title":"asinh","text":"<p>The <code>asinh</code> object calculates the hyperbolic arc-sine of a given floating-point number. It takes a float as input, which is stored, and outputs the result. A <code>bang</code> message can also trigger the calculation with the currently stored input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>asinh</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/asinh~/","title":"asinh~","text":"<p>The <code>asinh~</code> object computes the hyperbolic arc-sine of an incoming audio signal, sample by sample. It takes a signal as input and outputs a signal representing the hyperbolic arc-sine of that input. This object is primarily useful for mathematical calculations within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>asinh~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/asin~/","title":"asin~","text":"<p>The <code>asin~</code> object calculates the arc-sine of each input audio sample. It expects input values between -1 and 1, producing an output ranging from -pi/2 to pi/2. Inputs outside this range will result in an output of zero.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>asin~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/atan2~/","title":"atan2~","text":"<p>The <code>atan2~</code> object calculates the arc-tangent of two signal-rate input values, 'a' and 'b', as <code>atan(a/b)</code>. It correctly determines the quadrant of the resulting angle by considering the signs of both inputs, making it useful for converting Cartesian coordinates to polar coordinates (e.g., finding the phase). The output is in radians.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>atan2~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/atanh/","title":"atanh","text":"<p>The <code>atanh</code> object calculates the hyperbolic arc-tangent of a given float input. It stores the input value, and a bang message triggers the calculation to output the result. This object is primarily used for mathematical operations on control data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>atanh</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/atanh~/","title":"atanh~","text":"<p>The <code>atanh~</code> object calculates the hyperbolic arc-tangent of an incoming signal. It processes each sample individually, making it suitable for mathematical signal manipulations. Notably, for input values less than or equal to -1 or greater than or equal to 1, the output will be zero.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>atanh~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/atan~/","title":"atan~","text":"<p>The <code>atan~</code> object calculates the arc-tangent of each incoming audio sample. It is a signal-level trigonometric function primarily used for mathematical calculations within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>atan~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/atodb/","title":"atodb","text":"<p>The <code>atodb</code> object converts linear amplitude values to their decibel full scale (dBFS) equivalents. It takes linear amplitude as input and outputs the corresponding dBFS value, treating negative inputs as zero (resulting in -inf dBFS). This is useful for working with audio levels in a logarithmic scale.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>atodb</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/atodb~/","title":"atodb~","text":"<p>The <code>atodb~</code> object converts a linear amplitude signal to its equivalent in decibels full scale (dBFS). This is useful for representing audio levels logarithmically, where 0 dBFS typically signifies the maximum amplitude without clipping. It performs the calculation <code>dbFS = log10(amp) * 20</code>, with a minimum output of -999.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>atodb~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/autotune2/","title":"autotune2","text":"<p>The <code>autotune2</code> object quantizes incoming pitch values, expressed in cents, to the closest step within a user-defined scale. The scale itself is provided as a list of cents values. It can process single cents values or lists of cents, and includes a bypass mode.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>autotune2</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/average~/","title":"average~","text":"<p><code>average~</code> calculates a moving average of an audio signal over a specified number of recent samples. It supports three modes: bipolar (arithmetic mean), absolute (mean of absolute values), and RMS (root mean square). In its default bipolar mode, <code>average~</code> can also function as a low-pass filter.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>average~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/avg/","title":"avg","text":"<p>The <code>avg</code> object calculates the mean average of all incoming numbers. It outputs the current average and the total count of values processed. A <code>clear</code> message resets the internal memory, allowing for a new average calculation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>avg</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/avg~/","title":"avg~","text":"<p>The <code>avg~</code> object calculates the absolute average of an input signal. It accumulates the sum of absolute signal values and the count of elapsed samples, outputting the average as a float when it receives a <code>bang</code>. This allows for dynamic measurement of signal intensity over user-defined intervals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>avg~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/balance~/","title":"balance~","text":"<p>The <code>balance~</code> object performs equal power (sin/cos) stereo balancing. It takes left and right audio signals and a control value (from -1 for full left to 1 for full right) to pan the stereo image. This object is useful for dynamically positioning a stereo sound source within a stereo field, and can output multichannel audio with a flag.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>balance~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/bark2hz/","title":"bark2hz","text":"<p>The <code>bark2hz</code> object converts a value from the Bark scale to Hertz. It provides a 'vanilla' implementation for this psychoacoustic frequency conversion, useful for mapping perceived pitch to actual frequency.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>bark2hz</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/bicoeff2/","title":"bicoeff2","text":"<p>The <code>bicoeff2</code> object generates coefficients for Pure Data's vanilla <code>biquad~</code> object, which implements various audio filters. It takes parameters such as frequency, Q/slope, gain, and filter type (e.g., lowpass, highpass, bandpass, notch, allpass, lowshelf, highshelf) to calculate the necessary filter coefficients. This object simplifies the setup of biquad filters by providing a convenient way to control their characteristics.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bicoeff2</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/bpm/","title":"bpm","text":"<p>The <code>bpm</code> object calculates conversions to and from beats per minute (BPM). It can convert various time-related values into BPM, and vice-versa. Additionally, it supports conversions involving samples when the <code>-samps</code> flag is used.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bpm</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/car2pol/","title":"car2pol","text":"<p>The <code>car2pol</code> object converts Cartesian coordinates (real and imaginary parts) into their polar form (amplitude and phase). It takes two floats representing the real and imaginary components as input, and outputs the corresponding amplitude and phase (in both radians and degrees). This is useful for mathematical transformations in signal processing or control.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>car2pol</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/car2pol~/","title":"car2pol~","text":"<p>The <code>car2pol~</code> object converts Cartesian coordinates (real and imaginary parts) of an audio signal into polar coordinates (amplitude and phase). It is essential for spectral processing, enabling Fast Fourier Transform (FFT) and inverse FFT (iFFT) operations by transforming signals into a more intuitive polar representation. This object also supports multichannel signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>car2pol~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/cart2pol/","title":"cart2pol","text":"<p>The <code>cart2pol</code> object converts 3D Cartesian coordinates (x, y, z) into 3D polar coordinates. It takes three float inputs representing the x, y, and z components, and outputs three floats representing the corresponding polar coordinates, with all angles expressed in radians. This object is useful for transformations between coordinate systems in control or mathematical contexts.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>cart2pol</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/cart2sph/","title":"cart2sph","text":"<p>The <code>cart2sph</code> object converts 3D Cartesian coordinates (x, y, z) into spherical coordinates (radius, azimuth, elevation). All output angles are in radians. This object is useful for transforming spatial data between different coordinate systems.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>cart2sph</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/cartopol/","title":"cartopol","text":"<p>The <code>cartopol~</code> object converts Cartesian coordinates (real and imaginary parts) from signal inputs into polar coordinates (amplitude and phase) as signal outputs. This fundamental mathematical transformation is crucial for various audio signal processing tasks, particularly in frequency domain analysis and synthesis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>cartopol</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/cartopol~/","title":"cartopol~","text":"<p>The <code>cartopol~</code> object converts a signal from Cartesian coordinates (real and imaginary parts) to polar coordinates (amplitude and phase). It is primarily used in spectral processing, particularly for Fast Fourier Transform (FFT) and inverse FFT (iFFT) operations, allowing for more intuitive manipulation of spectral data. If the phase outlet is not connected, the object optimizes CPU usage by not computing the phase.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>cartopol~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/ceil/","title":"ceil","text":"<p>The <code>ceil</code> object is a mathematical function that rounds a number up to the nearest integer. It can process single numerical inputs or lists of numbers, outputting the ceiling value for each.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>ceil</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/ceil~/","title":"ceil~","text":"<p>The <code>ceil~</code> object performs a ceiling mathematical operation on incoming audio signals. It rounds each sample of the input signal up to the nearest integer. This object also supports multichannel connections, allowing it to process multiple audio streams simultaneously.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>ceil~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/cents2frac/","title":"cents2frac","text":"<p>The <code>cents2frac</code> object converts musical intervals expressed in cents into fractional values, representing ratios. It can process single cents values or lists of cents. Users can specify a conversion resolution (maximum numerator) and output the fraction as a list using the <code>-list</code> flag.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>cents2frac</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/cents2ratio/","title":"cents2ratio","text":"<p>The <code>cents2ratio</code> object converts musical intervals expressed in cents into their corresponding frequency ratios, output as floating-point decimals. It applies the formula <code>ratio = 2^(cents/1200)</code>. This utility is useful for precise pitch manipulation and microtonal applications, accepting single float values or lists of cents for conversion.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>cents2ratio</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/cents2ratio~/","title":"cents2ratio~","text":"<p>The <code>cents2ratio~</code> object converts an audio signal representing an interval in cents into a decimal ratio. This is useful for pitch modulation, allowing for precise control over frequency relationships. It supports multichannel connections for complex signal processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>cents2ratio~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/cents2scale/","title":"cents2scale","text":"<p><code>cents2scale</code> converts a list of intervals expressed in cents into a musical scale represented by semitone steps. This object is useful for translating microtonal or custom tunings into a standard semitone-based scale, facilitating integration with other musical processes. It takes cents values as input and outputs the corresponding semitone values.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>cents2scale</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/clip/","title":"clip","text":"<p>The <code>clip</code> object (or <code>cyclone/clip~</code>) constrains incoming float or list values to a specified numerical range. It takes a minimum and maximum value, ensuring that all output values fall within these defined boundaries. The clipping range can be dynamically set using the <code>set &lt;min&gt; &lt;max&gt;</code> message or by sending individual floats to its inlets.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>clip</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/clip~/","title":"clip~","text":"<p>The <code>cyclone/clip~</code> object constrains an input audio signal to a specified minimum and maximum range. It ensures that the output signal's values do not exceed these bounds, effectively clipping any values outside the defined range. The object also intelligently handles cases where the maximum value is set lower than the minimum, swapping them to maintain correct functionality. However, the help patch suggests using the vanilla <code>clip~</code> object instead.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>clip~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/coordinates/","title":"coordinates","text":"<p>The <code>cart2pol</code>, <code>pol2sph</code>, <code>sph2cart</code>, <code>cart2sph</code>, <code>pol2cart</code>, and <code>sph2pol</code> objects convert between Cartesian, Polar, and Spherical coordinate systems. They take three float inputs and output three float values, with angles given in radians. These objects are fundamental for transforming spatial data representations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>coordinates</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/cosh/","title":"cosh","text":"<p>The <code>cosh</code> object calculates the hyperbolic cosine of a given floating-point number. It takes a float as input, stores it, and outputs the hyperbolic cosine when triggered by a <code>bang</code> or a new float. This object is part of the Cyclone library, providing control data trigonometric functions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>cosh</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/cosh~/","title":"cosh~","text":"<p>The <code>cosh~</code> object calculates the hyperbolic cosine of an input signal sample by sample. It is primarily used for mathematical computations within Pure Data signal processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>cosh~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/cosx~/","title":"cosx~","text":"<p>The <code>cosx~</code> object computes the cosine of an input signal, expecting values in radians. It is primarily intended for mathematical operations on signals rather than direct use with <code>phasor~</code> outputs (0-1 range), and it functions as a signal-rate cosine wavetable.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>cosx~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/count/","title":"count","text":"<p>The <code>count</code> object acts as a versatile counter, incrementing or decrementing a numerical value within specified minimum and maximum bounds. It can be reset, have its current value set, and its direction (up/down) or alternating mode controlled via messages. A <code>bang</code> input triggers the count, and it outputs the current count value, along with a <code>bang</code> when it reaches its limits.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>count</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/curve~/","title":"curve~","text":"<p><code>curve~</code> generates non-linear, curved ramp signals, offering an exponential curve factor to shape the transition between values. It functions similarly to <code>cyclone/line~</code> but produces curved rather than linear ramps. This object is useful for creating dynamic control signals, such as Attack-Release envelopes, by defining destination values, durations, and a curve factor ranging from -1 to 1.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>curve~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/db2lin/","title":"db2lin","text":"<p>The <code>db2lin</code> object converts amplitude values from decibels full scale (dBFS) to a linear scale. It uses the formula <code>amp = 10^(dBFS / 20)</code> for conversion, with a default minimum dBFS value of -100 mapping to zero. This object is useful for translating logarithmic decibel values into linear amplitude for audio processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>db2lin</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/db2lin~/","title":"db2lin~","text":"<p>The <code>db2lin~</code> object converts decibel full scale (dBFS) amplitude values to linear amplitude values using the formula <code>amp = 10^(dBFS / 20)</code>. It supports multichannel signals and allows setting a minimum dBFS value that maps to zero linear amplitude.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>db2lin~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/db2phon/","title":"db2phon","text":"<p>The <code>db2phon</code> object converts a decibel (dB) value into phons, a unit representing perceived loudness. It is used in the context of equal loudness curves, which illustrate how humans perceive sound intensity at various frequencies. This object is useful for psychoacoustic analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>db2phon</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/dbtoa/","title":"dbtoa","text":"<p>The <code>dbtoa</code> object converts decibel (dBFS) values into their corresponding linear amplitude using the formula <code>amp = pow(10, dBFS / 20)</code>. It accepts both single float values and lists, outputting the converted amplitude. A <code>bang</code> message re-outputs the last converted value, while <code>set</code> prepares a new value for conversion without immediate output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>dbtoa</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/dbtoa~/","title":"dbtoa~","text":"<p>The <code>dbtoa~</code> object converts a decibel full scale (dBFS) amplitude signal or float into its linear amplitude equivalent. It uses the formula <code>amp = 10^(dBFS / 20)</code> to translate logarithmic dBFS values into a linear amplitude signal, useful for various audio processing tasks.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>dbtoa~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/dec2frac/","title":"dec2frac","text":"<p>The <code>dec2frac</code> object converts decimal numbers into their fractional equivalents. It can output these fractions either as symbols or as a list containing the numerator and denominator. Users can control the approximation's resolution by setting a maximum numerator value.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>dec2frac</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/dec2hex/","title":"dec2hex","text":"<p>The <code>dec2hex</code> object converts incoming decimal numbers or lists of numbers into their hexadecimal string representations. The output is formatted with a \"0x\" prefix and uses uppercase letters for hexadecimal digits. It can convert values immediately upon reception or when triggered by a <code>bang</code> message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>dec2hex</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/deg2rad/","title":"deg2rad","text":"<p>The <code>deg2rad</code> object converts degree values (0 to 360) to their equivalent radian values. It takes a float as input, representing the degree value, and outputs a float representing the converted radian value. An optional <code>-pos</code> flag can be used to ensure the output is always positive.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>deg2rad</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/delta~/","title":"delta~","text":"<p>The <code>delta~</code> object calculates the difference between the current incoming audio sample and the previous sample. This effectively highlights changes in the signal, outputting the rate of change. It can be used to detect transients or analyze signal movement.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>delta~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/e/","title":"e","text":"<p>The <code>e</code> object calculates and outputs the mathematical constant 'e' (Euler's number). It can be configured with a multiplier via its first inlet or as an argument, and outputs the result upon patch loading or when receiving a <code>bang</code> or float message. The calculated value can also be stored and retrieved using a specified variable name, making it accessible to other objects like <code>value</code> or <code>expr</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>e</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/factor/","title":"factor","text":"<p>The <code>factor</code> object takes a float as input and outputs a list of its prime factors. This mathematical utility is useful for breaking down numbers into their constituent prime components within Pure Data patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>factor</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/fader~/","title":"fader~","text":"<p>The <code>fader~</code> object is a signal waveshaper designed for crossfading and amplitude modulation. It takes a signal input between 0 and 1 and applies one of seven predefined mathematical curves, such as <code>quartic</code>, <code>sin</code>, <code>sqrt</code>, <code>hann</code>, or linear, to shape its amplitude. This object is particularly useful for creating smooth transitions between audio signals and supports multichannel processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>fader~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/float2bits/","title":"float2bits","text":"<p>The <code>float2bits</code> object converts a decimal floating-point number (IEEE754 single precision) into its binary representation. It can output the full list of bits or, when receiving a <code>split</code> message, send the sign, exponent, and mantissa as separate values. This object is useful for low-level manipulation or analysis of floating-point data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>float2bits</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/floor/","title":"floor","text":"<p>The <code>floor</code> object implements a standard mathematical floor function, rounding a given number down to the nearest integer. It can process individual numbers or lists of numbers, outputting the corresponding floor values.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>floor</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/floor~/","title":"floor~","text":"<p>The <code>floor~</code> object applies the floor mathematical function to incoming audio signals, rounding each sample down to the nearest integer. This object is designed for signal processing and supports multichannel audio connections.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>floor~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/fluid.bufscale/","title":"fluid.bufscale","text":"<p>The <code>fluid.bufscale</code> object scales numerical values within a buffer from a specified input range to an output range. It processes values from input channels, performs the scaling calculation, and stores the results in a destination buffer, making it useful for data normalization or remapping.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufscale</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/fluid.gain~/","title":"fluid.gain~","text":"<p>The <code>fluid.gain~</code> object controls the amplitude of an audio signal. Given its <code>fluid</code> prefix, it likely offers advanced or adaptive gain manipulation, potentially leveraging analysis or machine learning techniques to dynamically adjust audio levels. It operates on audio signals, indicated by the <code>~</code> suffix.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.gain~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/fold/","title":"fold","text":"<p>The <code>fold</code> object mirrors an input value back into a specified low and high range. It acts like a mirroring function, ensuring that any value outside the defined boundaries is \"folded\" back into the range. This is useful for constraining values within a specific interval while preserving their relative position through reflection.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>fold</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/frac.add/","title":"frac.add","text":"<p>The <code>frac.add</code> object is used to add two fractional values. It takes two fractional inputs, one on the left and one on the right, and outputs their sum as a new fraction.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>frac.add</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/frac.mul/","title":"frac.mul","text":"<p>The <code>frac.mul</code> object multiplies two fractional values. It takes two fractional inputs, one on the left and one on the right, and outputs their product as a fractional value.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>frac.mul</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/frac2cents/","title":"frac2cents","text":"<p>The <code>frac2cents</code> object converts fractional interval values into cents. It takes a list of fractional values as input and outputs a corresponding list of cents values, useful for microtonal or precise pitch calculations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>frac2cents</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/frac2dec/","title":"frac2dec","text":"<p>The <code>frac2dec</code> object converts fractional representations (e.g., \"1/2\", \"3/4\") into their corresponding decimal floating-point numbers. It supports single fractions or lists, including those with non-integer components or nested fractional denominators/numerators, making it useful for ratio-based calculations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>frac2dec</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/framedelta~/","title":"framedelta~","text":"<p>The <code>framedelta~</code> object computes the difference between successive signal blocks, specifically designed for running phase deviation in FFT analysis. It subtracts values in each position of the previously received signal block from the current block. This object is particularly useful within an FFT subpatch to track phase changes over time, often used in conjunction with <code>phasewrap~</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>framedelta~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/freq2midi/","title":"freq2midi","text":"<p>The <code>freq2midi</code> object converts frequency values (in Hz) to MIDI note numbers, similar to the <code>ftom</code> object. It can process both single float values and lists of frequencies. Users can also set a custom A4 reference frequency, which defaults to 440 Hz.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>freq2midi</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/gbman~/","title":"gbman~","text":"<p><code>gbman~</code> is a chaotic audio generator based on the gingerbread man map difference equation, <code>y[n] = 1 + abs(y[n-1]) - y[n-2]</code>. It produces a filtered and rescaled audio signal, with its chaotic behavior controlled by a frequency input and initial feedback values for <code>y[n-1]</code> and <code>y[n-2]</code>. It supports multichannel operation and allows dynamic adjustment of its parameters.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gbman~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/gcd/","title":"gcd","text":"<p>The <code>gcd</code> object calculates the greatest common divisor (GCD) of two or more numbers. It accepts either two float inputs or a list of numbers, outputting the GCD as a float. The right inlet can be used to set a default value for the calculation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gcd</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/gmean/","title":"gmean","text":"<p>The <code>gmean</code> object generates a list of numbers that form a geometric progression between a specified start and end value. It calculates the geometric mean for a given number of steps, where the number of steps determines the length of the output list minus one. This object is useful for creating logarithmically spaced sequences.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gmean</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/harmonicity/","title":"harmonicity","text":"<p>The <code>harmonicity</code> object calculates Clarence Barlow's harmonicity measure for a given interval <code>p/q</code>. This measure, also referred to as 'indigestibility' of an integer, provides a value where negative polarity indicates a weighted interval. It is a vanilla Pure Data implementation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>harmonicity</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/hex2dec/","title":"hex2dec","text":"<p>The <code>hex2dec</code> object converts hexadecimal values to their decimal equivalents. It accepts hexadecimal numbers as symbols, supporting both lowercase and uppercase letters, and optional \"0x\" or \"0X\" prefixes. This object is useful for parsing and converting hexadecimal data within Pure Data patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>hex2dec</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/hsv2rgb/","title":"hsv2rgb","text":"<p>The <code>hsv2rgb</code> object converts color values from the Hue, Saturation, Value (HSV) color space to the Red, Green, Blue (RGB) color space. This is useful for manipulating colors in a more intuitive HSV model and then converting them for display in RGB.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>hsv2rgb</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/hz2bark/","title":"hz2bark","text":"<p>The <code>hz2bark</code> object converts a given frequency in Hertz (Hz) to its equivalent value on the Bark scale, a psychoacoustical scale for perceived pitch. This conversion is based on the suggestion by Clarence Barlow and is useful for analyzing or manipulating audio in a way that aligns with human hearing perception.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>hz2bark</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/hz2mel/","title":"hz2mel","text":"<p>The <code>hz2mel</code> object converts a frequency value, given in Hertz (Hz), into its corresponding value on the Mel scale. This is useful for psychoacoustic analysis or synthesis, as the Mel scale is a perceptual scale of pitches judged by listeners to be equal in distance from one another.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>hz2mel</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/hz2rad/","title":"hz2rad","text":"<p>The <code>hz2rad</code> object converts a frequency in Hertz (Hz) to radians per sample. This conversion is dependent on the current audio sample rate, using the formula <code>rad = (hz * 2*pi / sr)</code>. It is primarily used for calculations involving phase or angular velocity in digital signal processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>hz2rad</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/iAmbient2D/","title":"iAmbient2D","text":"<p>The <code>iAmbient2D</code> object simulates ambient interactions in a 2D space, applying constant, random, and damping forces to named \"masses.\" It also handles displacement if a mass moves outside a defined rectangular area. The object requires a bang to activate and its various force and position parameters can be configured via messages.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>iAmbient2D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/indigestibility/","title":"indigestibility","text":"<p>The <code>indigestibility</code> object calculates Clarence Barlow's 'indigestibility' measure for an integer. This object serves as a mathematical utility, providing a specific numerical property of an integer. It is typically used as a component within larger algorithmic or compositional systems rather than as a standalone module.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>indigestibility</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/interpolate/","title":"interpolate","text":"<p>The <code>interpolate</code> object smoothly transitions between a start value (or list of values) and a target value (or list of values) based on an input float between 0 and 1. It supports an exponential factor for non-linear interpolation. This object is useful for creating smooth parameter changes, often controlled by GUI elements like sliders.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>interpolate</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/iso226/","title":"iso226","text":"<p>The <code>iso226</code> object generates a list of 29 decibel (dB) values across a frequency range, corresponding to equal-loudness contours. It takes a 'phon' value as input and outputs the dB levels required to perceive the same loudness at different frequencies, based on the ISO 226 standard. This is useful for psychoacoustic modeling and dynamic equalization.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>iso226</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/latoocarfian~/","title":"latoocarfian~","text":"<p><code>latoocarfian~</code> is a chaotic signal generator that implements the Latoocarfian difference equations. It produces a chaotic output signal, which can also converge to a single value or oscillate in a cycle, based on configurable coefficients and initial values. This object is useful for generating complex, non-linear audio signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>latoocarfian~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/lcm/","title":"lcm","text":"<p>The <code>lcm</code> object calculates the least common multiple (LCM) of two or more floating-point numbers. It can receive two individual float inputs or a list of floats to compute their LCM. The result is output as a float.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lcm</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/lin2db/","title":"lin2db","text":"<p>The <code>lin2db</code> object converts a linear amplitude value to its equivalent decibel full scale (dBFS) representation. This is useful for displaying or working with audio levels in a standard logarithmic format.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lin2db</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/lin2db~/","title":"lin2db~","text":"<p>The <code>lin2db~</code> object converts linear amplitude values to decibels full scale (dBFS) using the formula <code>dbFS = log10(amp) * 20</code>. This utility object is essential for audio analysis and processing where decibel representation is required, and it supports multichannel signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lin2db~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/lincong~/","title":"lincong~","text":"<p>The <code>lincong~</code> object is a chaotic signal generator based on the linear congruential algorithm, similar to SuperCollider's <code>LincongN</code> UGEN. It produces a continuous chaotic signal at a specified frequency, which can be controlled via its first inlet. The object's chaotic behavior can be further shaped by setting parameters 'a', 'c', 'm', and an initial value through its other inlets or a list.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lincong~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/linedrive/","title":"linedrive","text":"<p>The <code>linedrive</code> object scales numbers from one range to another using an exponential curve, similar to <code>cyclone/scale</code>. It takes input and output ranges, an exponential factor (1 for linear, &gt;1 for exponential), and a time value. It is designed to work with <code>line~</code> objects for smoothly changing parameters like gain with an exponential response.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>linedrive</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/link/","title":"link","text":"<p>The <code>link</code> object calculates forces between two masses, simulating a physical connection with configurable rigidity and damping. It outputs the forces to be applied to each mass, enabling the creation of dynamic physical simulations. The object supports non-linear behaviors based on minimum and maximum link lengths, allowing for attractive or repulsive forces.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>link</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/list.inc/","title":"list.inc","text":"<p><code>list.inc</code> generates a numerical list based on a starting value, a step value, and the desired number of elements. It supports both linear incrementing (adding the step value) and a 'ratio' mode where the step value is multiplied.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>list.inc</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/logistic~/","title":"logistic~","text":"<p><code>logistic~</code> is a chaotic signal generator based on the logistic difference equation. It produces a chaotic output signal, controlled by a frequency parameter in Hertz and a 'p' parameter ranging from 0 to 1. This object is inspired by SuperCollider's Logistic UGEN.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>logistic~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/mag/","title":"mag","text":"<p>The <code>mag</code> object calculates the magnitude (amplitude) of a complex number, taking its real and imaginary parts as input. It is primarily used to derive the amplitude spectrum from the output of an FFT. An optional \"power\" argument allows it to output the power magnitude instead.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>mag</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/mass3D/","title":"mass3D","text":"<p>The <code>mass3D</code> object simulates a mass in a 3D space, calculating its position and velocity based on applied forces, weight, damping, and boundary conditions. It outputs the mass's current X, Y, Z position, velocity, and total applied force, making it suitable for physical modeling and interactive simulations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>mass3D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/maximum/","title":"maximum","text":"<p>The <code>maximum</code> object outputs the greatest value among two or more numbers. It can compare a float input with a value from its right inlet or argument, or find the maximum value within a given list. Additionally, it outputs the index of the maximum value when processing a list.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>maximum</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/maximum~/","title":"maximum~","text":"<p>The <code>maximum~</code> object outputs a signal representing the greater of two input signals, or the greater of an input signal and a numerical argument. This object is deprecated; users should instead use Pure Data Vanilla's <code>max~</code> object for this functionality.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>maximum~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/mean/","title":"mean","text":"<p>The <code>mean</code> object calculates a running or moving average of all received numbers. It outputs the current average and the total count of processed values. Sending a <code>clear</code> message resets its internal memory, while a <code>list</code> message clears memory and calculates the mean from the provided list of numbers.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>mean</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/median~/","title":"median~","text":"<p>The <code>median~</code> object calculates the median value of an incoming audio signal over a user-specified number of samples. It outputs this median as a signal, effectively smoothing the input while preserving sharp transients. This makes it useful for noise reduction or signal processing where edge preservation is desired.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>median~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/mel2hz/","title":"mel2hz","text":"<p>The <code>mel2hz</code> object converts a frequency value from the Mel scale to the linear Hertz scale. This is useful for psychoacoustic applications where perceived pitch is represented on the Mel scale, allowing conversion back to standard frequencies for audio synthesis or analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>mel2hz</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/midi2freq/","title":"midi2freq","text":"<p>The <code>midi2freq</code> object converts MIDI note numbers into their corresponding frequencies in Hertz. It functions similarly to <code>mtof</code> but allows for setting a custom A4 reference frequency. It can process both single MIDI values and lists of MIDI values.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>midi2freq</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/minimum/","title":"minimum","text":"<p>The <code>minimum</code> object outputs the smallest value from its inputs. It can compare two floats (from the left inlet and an argument or right inlet) or find the minimum value within a list. When processing a list, the left outlet outputs the minimum value, and the right outlet outputs its index.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>minimum</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/minimum~/","title":"minimum~","text":"<p>The <code>minimum~</code> object outputs the smaller of two input signals, or the smaller of an input signal and a numerical argument. This object is considered redundant and deprecated; users should instead use Pd Vanilla's <code>min~</code> object for the same functionality.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>minimum~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/minmax/","title":"minmax","text":"<p>The <code>minmax</code> object takes a list of floating-point numbers as input. It then calculates and outputs the minimum and maximum values found within that list, providing a simple way to analyze data ranges.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>minmax</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/minmax~/","title":"minmax~","text":"<p>The <code>minmax~</code> object continuously tracks the minimum and maximum amplitude values of an incoming audio signal. It outputs these extreme values as both signals and discrete floats, which can be reset at any time. This makes it useful for dynamic signal analysis, such as determining the range for normalization.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>minmax~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/modulo~/","title":"modulo~","text":"<p>The <code>modulo~</code> (or <code>%%~</code>) object is a signal remainder operator. It divides the incoming signal from its left inlet by the value provided to its right inlet (or argument) and outputs the remainder. This allows for signal wrapping or cyclic behavior based on a divisor.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>modulo~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/mov.avg/","title":"mov.avg","text":"<p>The <code>mov.avg</code> object calculates a running or moving average of incoming float values. It can be configured to average over a specified number of values (<code>n</code>) and can be reset using a <code>clear</code> message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>mov.avg</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/mov.rms~/","title":"mov.rms~","text":"<p>The <code>mov.rms~</code> object calculates a running Root Mean Square (RMS) of an audio signal over a specified time window (number of samples). It outputs the RMS value at each sample, which can be configured to be in dBFS or linear scale. This object is useful for analyzing the short-term energy or loudness of an audio signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>mov.rms~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/ms2samps/","title":"ms2samps","text":"<p>The <code>ms2samps</code> object is a simple abstraction that converts a time value in milliseconds to the equivalent number of audio samples. It uses the formula <code>samples = milliseconds * samplerate / 1000</code> to perform this conversion. This object is useful for precisely timing audio events or delays in terms of samples rather than milliseconds.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>ms2samps</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/ms2samps~/","title":"ms2samps~","text":"<p>The <code>ms2samps~</code> object converts time values from milliseconds to the corresponding number of audio samples. It performs this conversion using the formula <code>samples = milliseconds * samplerate / 1000</code>. This abstraction supports multichannel signals, making it suitable for various audio processing contexts.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>ms2samps~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/mstosamps~/","title":"mstosamps~","text":"<p>The <code>mstosamps~</code> object converts a time value in milliseconds into the corresponding number of audio samples, taking the current sample rate into account. It accepts both float and signal inputs for the millisecond value, outputting the sample count as a float and/or signal. This object is particularly useful for setting delay times in sample-based audio processing objects like <code>delay~</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>mstosamps~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/multiline~/","title":"multiline~","text":"<p>The <code>multiline~</code> object performs line-interpolated multiplication of multiple input signals. It can multiply all signals by a single gain value, or by individual gain values specified as creation arguments, dynamically creating inlets and outlets as needed.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>multiline~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/notedur2ratio/","title":"notedur2ratio","text":"<p>The <code>notedur2ratio</code> object converts symbolic musical note durations (e.g., <code>4n</code> for a quarter note) into numerical ratios, outputting them as either fractions or floats. It supports standard note values, dotted notes, various tuplets (using abbreviations like 'd', 't', 'q', 's', 'n' or <code>[x:y]</code> format), and tied notes. This utility is essential for precise timing calculations in musical contexts.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>notedur2ratio</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/pdf~/","title":"pdf~","text":"<p>The <code>pdf~</code> object calculates the probability density function of an incoming signal. It accepts a signal, bang, float, or 'clear' message, and outputs the calculated PDF as a list. The number of steps for the calculation can be set via a creation argument, defaulting to 64.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pdf~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/peak/","title":"peak","text":"<p>The <code>peak</code> object tracks and outputs the highest float value it has received. When a new input exceeds the current peak, it becomes the new peak and is output, while the middle outlet sends <code>1</code> to indicate a new peak. The right outlet sends <code>1</code> when an input does not set a new peak.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>peak</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/phasewrap~/","title":"phasewrap~","text":"<p>The <code>phasewrap~</code> object wraps an input signal's value between -\u03c0 and \u03c0. It converts a continuously increasing or decreasing signal into a sawtooth-like waveform within this range. This is particularly useful for managing phase values in audio synthesis and modulation contexts.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>phasewrap~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/phon2db/","title":"phon2db","text":"<p>The <code>phon2db</code> object converts a loudness value expressed in phons to decibels (dB). It takes a frequency in Hertz (Hz) as an argument, which is crucial for accurate conversion due to the non-linear nature of human hearing perception. This object is useful for working with equal loudness curves and psychoacoustic models.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>phon2db</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/phon2sone/","title":"phon2sone","text":"<p>The <code>phon2sone</code> object converts a loudness level expressed in phons to a perceived loudness value in sones. It accounts for the logarithmic relationship between decibels and loudness, where 1 sone is equivalent to 40 phons. This object is useful for psychoacoustic calculations related to sound perception.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>phon2sone</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/pi/","title":"pi","text":"<p>The <code>pi</code> object calculates and outputs the mathematical constant pi, optionally multiplied by a float value provided as an argument or via its second inlet. It outputs the result upon patch loading and when it receives a <code>bang</code> message. This object can also store its output in a named <code>value</code> for retrieval by other objects like <code>value</code>, <code>var</code>, or <code>expr</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pi</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/plusequals~/","title":"plusequals~","text":"<p>The <code>plusequals~</code> (or <code>+=~</code>) object is a signal accumulator that continuously sums its input samples, generating a running total. Its internal sum can be reset to zero by a <code>bang</code> or a non-zero signal in the right inlet, and can be initialized to a specific value using the <code>set &lt;float&gt;</code> message or a float in the left inlet. This object is useful for creating ramps or tracking cumulative signal changes in audio signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>plusequals~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/pmpd2d/","title":"pmpd2d","text":"<p>The <code>pmpd2d</code> object implements a 2D mass-spring-damper physical model, designed for particle-based simulations in Pure Data. It allows users to define and manipulate 'masses' (particles with mass, position, and mobility) and 'links' (connections between masses with properties like rigidity, damping, and length). The object calculates forces and updates the state of the physical system, providing data for external visualization or control.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>pmpd2d</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/pol2car/","title":"pol2car","text":"<p>The <code>pol2car</code> object converts polar coordinates (amplitude and phase) into their Cartesian equivalents (real and imaginary parts). It takes amplitude and phase (in radians) as inputs and outputs the corresponding real and imaginary components, which can be triggered by a <code>bang</code>. This object is useful for mathematical transformations of signals or data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pol2car</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/pol2cart/","title":"pol2cart","text":"<p>The <code>pol2cart</code> object converts 3D polar coordinates (radius <code>r</code>, azimuthal angle <code>phi</code>, and polar angle <code>theta</code>) into Cartesian coordinates (x, y, z). It takes three float inlets for <code>r</code>, <code>phi</code>, and <code>theta</code> (all angles in radians) and outputs the corresponding x, y, and z float values from its three outlets. This object is useful for transforming spatial data representations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pol2cart</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/pol2car~/","title":"pol2car~","text":"<p>The <code>pol2car~</code> object converts polar coordinates (amplitude and phase) into cartesian coordinates (real and imaginary parts). It is primarily used in spectral processing workflows, often in conjunction with <code>car2pol~</code>, to facilitate conversions between polar and cartesian forms required for FFT and iFFT operations in Pure Data. It supports multichannel signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pol2car~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/pol2sph/","title":"pol2sph","text":"<p>The <code>pol2sph</code> object converts 2D polar coordinates (radius, angle, and height) into 3D spherical coordinates. It takes three float inlets for <code>r</code> (radius), <code>phi</code> (angle in radians), and <code>z</code> (height), and outputs the corresponding spherical coordinates as three floats. This object is useful for transformations between different coordinate systems, particularly in control applications.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pol2sph</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/poltocar/","title":"poltocar","text":"<p>The <code>poltocar</code> object converts polar coordinates (amplitude and phase in radians) into cartesian coordinates (real and imaginary parts). It takes amplitude in its left inlet and phase in its right, outputting the real part from its left outlet and the imaginary part from its right. A <code>bang</code> can trigger the conversion of the last received coordinate pair.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>poltocar</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/poltocar~/","title":"poltocar~","text":"<p>The <code>poltocar~</code> object converts signal values from polar coordinates (amplitude and phase) to Cartesian coordinates (real and imaginary parts). It is primarily used in spectral processing to transform signals back into the Cartesian domain after operations performed in the more intuitive polar form, often following an FFT and preceding an iFFT.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>poltocar~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/polyfun/","title":"polyfun","text":"<p>The <code>polyfun</code> object evaluates a polynomial function. It takes a float as the variable 'x' in its left inlet and a list of coefficients (a0 to aN) in its right inlet, with the list's length determining the polynomial's order. This allows for dynamic calculation of various polynomial expressions, such as <code>y=2x+1</code> or <code>y=3-x^2</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>polyfun</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/pong/","title":"pong","text":"<p>The <code>pong</code> object limits input values by folding, wrapping, or clipping them within a specified low-high range. It can operate on single floats or lists, with its behavior determined by the <code>mode</code> message. This object is particularly useful for modulo arithmetic when in <code>wrap</code> mode.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>pong</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/pong~/","title":"pong~","text":"<p>The <code>pong~</code> object functions as a signal range limiter, enabling users to fold, wrap, or clip an input signal within a defined low-high range. It offers various modes for handling values outside this range, with the wrap mode being particularly useful for modulo arithmetic.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>pong~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/power~/","title":"power~","text":"<p>The <code>power~</code> object is a signal waveshaper that raises an input signal to a specified exponential factor. It extends standard exponentiation to correctly handle negative signal inputs, allowing for negative outputs and non-integer exponents on negative values. This enables flexible signal manipulation, often used for non-linear processing or distortion.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>power~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/pow~/","title":"pow~","text":"<p>The <code>cyclone/pow~</code> object calculates the power of a base value, raising it to the exponent. The right inlet sets the base, and the left inlet sets the exponent, both accepting signals or floats. It functions as a signal power utility, useful for generating curves, and outputs <code>0</code> for <code>inf/nan</code> results.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>pow~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/prime/","title":"prime","text":"<p>The <code>prime</code> object detects if an input number is prime. It takes a float as input and outputs <code>1</code> if the number is prime, or <code>0</code> otherwise. This object, part of the <code>zexy</code> external library, is useful for mathematical checks and control flow.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>prime</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/pz2coeff/","title":"pz2coeff","text":"<p>The <code>pz2coeff</code> object converts pole and zero coordinates, along with an overall gain, into biquad filter coefficients. These coefficients are formatted for use with objects like <code>biquad~</code>, enabling the creation of custom digital filters. It takes lists for pole/zero coordinates and a float for gain.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pz2coeff</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/quad~/","title":"quad~","text":"<p>The <code>quad~</code> object generates a chaotic audio signal using a general quadratic map. It allows control over the signal's frequency and the 'a', 'b', and 'c' coefficients of the quadratic equation, as well as an initial value. This object is useful for creating complex, non-linear sound textures.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>quad~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/quantizer/","title":"quantizer","text":"<p>The <code>quantizer</code> object approximates input float values or lists of floats to discrete step values. It supports various approximation modes, including rounding, truncating, flooring, and ceiling, allowing precise control over how values are snapped to the nearest step. This object is useful for discretizing continuous data streams.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>quantizer</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/quantizer~/","title":"quantizer~","text":"<p>The <code>quantizer~</code> object quantizes an incoming signal to discrete step values, offering five different approximation modes including round, truncate, floor, and ceil. It fully supports multichannel signals, allowing for per-channel quantization when a multichannel signal is provided to its right inlet. The quantization step and mode can be controlled via inlets or messages.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>quantizer~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/quantize~/","title":"quantize~","text":"<p>The <code>quantize~</code> object quantizes an incoming audio signal to a variable number of steps. It processes audio signals, allowing for control over the quantization level and providing an output signal. This object is useful for creating stepped or bit-crushed audio effects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>quantize~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rad2deg/","title":"rad2deg","text":"<p>The <code>rad2deg</code> object converts an input value from radians to degrees. It takes a float representing radians and outputs the corresponding float in degrees. An optional argument allows wrapping the output to positive values.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rad2deg</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rad2hz/","title":"rad2hz","text":"<p>The <code>rad2hz</code> object converts a frequency value from \"radians per sample\" to Hertz (Hz). It performs this conversion using the formula <code>hz = rad * sr / (2 * pi)</code>, where <code>sr</code> is the current patch's sample rate. This object is essential for translating internal Pure Data frequency representations into standard human-readable Hertz values.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rad2hz</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/ramp~/","title":"ramp~","text":"<p>The <code>ramp~</code> object generates a linear signal ramp between user-defined minimum and maximum values, automatically looping or clipping based on its mode. It is highly versatile, functioning as a control signal for tasks like driving <code>tabread4~</code> for sample playback at variable speeds, or as a basic oscillator similar to <code>phasor~</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>ramp~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rand.f/","title":"rand.f","text":"<p>The <code>rand.f</code> object generates pseudo-random floating-point numbers within a specified range when triggered by a <code>bang</code>. It allows setting a <code>seed</code> for reproducible sequences and can output multiple random values as a list.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rand.f</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rand.i~/","title":"rand.i~","text":"<p>The <code>rand.i~</code> object generates pseudo-random integer values within a specified range, outputting them as an audio signal. It is triggered by signal transitions or a <code>bang</code> message, and its output sequence can be made reproducible by setting a seed. It also supports multichannel operation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rand.i~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/ratio2cents/","title":"ratio2cents","text":"<p>The <code>ratio2cents</code> object converts musical intervals expressed as rational numbers (floating-point decimals) into cents. It performs this conversion using the formula <code>cents = log2(rational) * 1200</code>. Input values can be provided directly or set for conversion upon receiving a bang message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>ratio2cents</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/ratio2cents~/","title":"ratio2cents~","text":"<p>The <code>ratio2cents~</code> object converts a signal representing a rational interval into an interval expressed in cents. It performs this conversion using the formula <code>cents = log2(ratio) * 1200</code>. This object also supports multichannel signal connections.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>ratio2cents~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rdiv/","title":"rdiv","text":"<p><code>rdiv</code> performs division, similar to the <code>[/]</code> object, but with reversed inlet functionality. The left (hot) inlet receives the divisor, and the right (cold) inlet receives the dividend. It outputs the result of the division.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>rdiv</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rdiv~/","title":"rdiv~","text":"<p>The <code>rdiv~</code> object performs signal division, similar to <code>/~</code>, but with its inlets reversed. It divides a number (dividend) by the incoming signal or float (divisor) from its left inlet, outputting the result as a signal. The right inlet sets the dividend.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>rdiv~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rescale/","title":"rescale","text":"<p>The <code>rescale</code> object maps input values from one numerical range to another, allowing for linear, exponential, or logarithmic scaling. It supports configurable input and output ranges, and can optionally clip values to the defined output boundaries. This object is highly useful for adapting control signals, such as MIDI data, to different parameter ranges within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rescale</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rescale~/","title":"rescale~","text":"<p>The <code>rescale~</code> object transforms input signal values from one range to another, with configurable minimum and maximum input/output values. It supports linear, exponential, and logarithmic scaling, including a \"reverse log\" mode, and can optionally clip output values to the specified range. This object also handles multichannel signals, applying scaling parameters per channel.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rescale~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/resonant~/","title":"resonant~","text":"<p>The <code>resonant~</code> object is a bandpass resonator filter that allows for control over its center frequency and resonance. Unlike <code>bandpass~</code>, its gain increases with higher Q values, enabling it to act as a resonator that sustains sound after the input ceases. Resonance can be set using Q, decay time (t60), or bandwidth (bw).</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>resonant~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rgb2hsv/","title":"rgb2hsv","text":"<p>The <code>rgb2hsv</code> object converts color values from the RGB (Red, Green, Blue) color space to the HSV (Hue, Saturation, Value/Luminance) color space. This is particularly useful for manipulating colors in graphical contexts, such as within GEM, where HSV offers more intuitive control over color attributes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>rgb2hsv</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rgb2yuv/","title":"rgb2yuv","text":"<p>The <code>rgb2yuv</code> object converts color values from the RGB (Red, Green, Blue) color space to the YUV (Luma, Chroma) color space. It is primarily used within the GEM environment for graphics processing, enabling separate manipulation of luma and chroma components. This object is often paired with <code>yuv2rgb</code> for bidirectional color space conversion.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>rgb2yuv</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rint/","title":"rint","text":"<p>The <code>rint</code> object rounds floating-point numbers to the nearest integer value. It is useful for quantizing numerical data or preparing values for integer-only operations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rint</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rint~/","title":"rint~","text":"<p>The <code>rint~</code> object rounds an incoming signal to the nearest integer value. It takes a floating-point signal as input and outputs a signal with the rounded integer values, useful for quantizing signal values to discrete steps.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rint~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rminus/","title":"rminus","text":"<p>The <code>rminus</code> (or <code>!-</code>) object performs subtraction with its inlets reversed compared to the standard <code>[-]</code> object. The hot inlet receives the subtrahend, and the cold inlet receives the minuend. It outputs the difference of the two numbers, allowing for flexible control over subtraction order.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>rminus</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rminus~/","title":"rminus~","text":"<p>The <code>rminus~</code> (or <code>!-~</code>) object performs signal subtraction, similar to <code>~</code>, but with its inlets reversed. It subtracts the value received in its left (hot) inlet from the value received in its right (cold) inlet. This allows for flexible signal manipulation where the order of subtraction is inverted compared to the standard <code>~</code> object.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>rminus~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rms~/","title":"rms~","text":"<p>The <code>rms~</code> object calculates the Root Mean Square (RMS) value of an incoming audio signal, similar to <code>env~</code> but providing RMS in linear amplitude or dBFS. It allows configuration of analysis window and hop sizes, making it suitable for dynamic loudness analysis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rms~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/rm~/","title":"rm~","text":"<p><code>rm~</code> is a Pure Data abstraction that performs ring modulation on an input signal. It takes a modulation frequency as an argument or via its right inlet, with a 0 Hz modulation frequency bypassing the input signal. The object outputs the ring-modulated signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rm~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/round/","title":"round","text":"<p>The <code>round</code> object approximates input numbers (floats or lists) to the nearest integer multiple of a specified value. It supports two modes: rounding to the nearest multiple (default) or truncating to the nearest multiple. A \"round to\" value of 0 bypasses any approximation, outputting the original input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>round</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/round~/","title":"round~","text":"<p>The <code>round~</code> object quantizes incoming audio signals to an integer multiple of a specified value. It supports two modes: rounding to the nearest multiple or truncating the value. Setting the rounding multiple to 0 effectively bypasses the quantization, passing the original signal through.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>round~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/samps2ms/","title":"samps2ms","text":"<p>The <code>samps2ms</code> object is a simple utility that converts a time value from samples to milliseconds. It performs this conversion using the formula: <code>ms = 1000 * samples / samplerate</code>, where <code>samplerate</code> is the current audio sample rate. This object is useful for precise time calculations within Pure Data patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>samps2ms</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/samps2ms~/","title":"samps2ms~","text":"<p>The <code>samps2ms~</code> object converts a time value given in samples to milliseconds. It performs the calculation <code>ms = 1000 * samples / samplerate</code> and supports multichannel signals, making it useful for precise timing adjustments in audio processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>samps2ms~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/sampstoms~/","title":"sampstoms~","text":"<p>The <code>sampstoms~</code> object converts a time value from samples to milliseconds, taking the current sample rate into account. It accepts both float and signal inputs representing the number of samples. A float input produces both float and signal outputs in milliseconds, while a signal input only produces a signal output. This object is useful for tasks like setting period times for objects such as <code>train~</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>sampstoms~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/scalarmult/","title":"scalarmult","text":"<p>The <code>scalarmult</code> object performs scalar multiplication, also known as a \"dot product,\" on incoming lists of numbers. It takes two lists as input and outputs a single list containing the result. It can also multiply a list by a single float value, effectively casting the float to a list for the operation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>scalarmult</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/scale/","title":"scale","text":"<p>The <code>scale</code> object maps an input numerical range to an output numerical range, allowing for inversion and exponential scaling. It does not clip values that fall outside the input range, instead continuing to scale them proportionally. The modern exponential mode is recommended over the buggy \"classic\" mode.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>scale</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/scale2cents/","title":"scale2cents","text":"<p>The <code>scale2cents</code> object converts a musical scale defined by steps in semitones into corresponding cent values. It is useful for precise microtonal adjustments or when working with non-standard tunings.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>scale2cents</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/scale2freq/","title":"scale2freq","text":"<p>The <code>scale2freq</code> object converts a scale defined by a list of cents values into a list of frequencies (in Hz). It generates frequencies upwards and downwards from a base MIDI pitch (default 60) within a specified frequency range (default 20-20000 Hz). This object is useful for generating frequency lists for microtonal scales or for feeding data to objects like <code>resonbank~</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>scale2freq</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/scale~/","title":"scale~","text":"<p><code>scale~</code> maps an input signal range to an output signal range, allowing for linear, inverted, or exponential scaling. It does not clip values that fall outside the defined input range, continuing the scaling beyond those boundaries. While it offers a 'classic mode' for exponential scaling, the 'modern mode' is recommended due to known bugs in the classic implementation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>scale~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/sgn~/","title":"sgn~","text":"<p>The <code>sgn~</code> object calculates the signum of an incoming audio signal, outputting <code>1</code> for positive values, <code>-1</code> for negative values, and <code>0</code> for zero. Part of the zexy library, this is an abstraction; an external version is available for improved performance.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>sgn~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/shaper~/","title":"shaper~","text":"<p>The <code>shaper~</code> object performs waveshaping by mapping input signal values to a transfer function, which can be defined by an external array or an internal Chebyshev polynomial. It allows for dynamic control over the transfer function's normalization, DC offset, and includes an optional internal DC filter. This versatile object can be used for various audio effects, including harmonic generation and dynamic sample manipulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>shaper~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/sh~/","title":"sh~","text":"<p>The <code>sh~</code> object performs sample-and-hold on an audio signal, effectively downsampling it. It can operate in either \"gate\" mode, sampling based on a threshold, or \"trigger\" mode, sampling on an explicit trigger. The object also allows setting an initial held value and dynamically changing its mode.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sh~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/sinh/","title":"sinh","text":"<p>The <code>sinh</code> object calculates the hyperbolic sine of a given floating-point number. It stores the input value and computes the hyperbolic sine when a <code>bang</code> is received or the input float changes, outputting the result as a float. This object is part of the Cyclone library, providing control data trigonometric functions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>sinh</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/sinh~/","title":"sinh~","text":"<p>The <code>sinh~</code> object calculates the hyperbolic sine of an incoming signal, sample by sample. It is primarily intended for mathematical computations within Pure Data signal processing, offering a specialized function for advanced signal manipulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>sinh~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/sinx~/","title":"sinx~","text":"<p>The <code>sinx~</code> object calculates the sine of an incoming signal. Designed for mathematical operations, it expects its input to be in radians to compute the sine of each sample. This signal-rate object outputs the resulting sine value.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>sinx~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/sin~/","title":"sin~","text":"<p>The <code>sin~</code> object generates a sine wave by calculating the sine of its signal input, scaled by two pi. Similar to <code>cos~</code>, it is primarily used for audio signal generation and supports multichannel signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sin~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/sone2phon/","title":"sone2phon","text":"<p>The <code>sone2phon</code> object converts a loudness value expressed in sones to phons. It handles the logarithmic relationship between these units, noting that '1 sone is equivalent to 40 phons'. This object is useful for working with psychoacoustic loudness measurements in Pure Data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>sone2phon</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/sph2cart/","title":"sph2cart","text":"<p>The <code>sph2cart</code> object converts spherical coordinates (radius, azimuth, elevation) to Cartesian coordinates (x, y, z). All input angles are expected to be in radians. It takes three float inputs for radius, phi, and theta, and outputs three floats for the corresponding x, y, and z coordinates.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>sph2cart</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/sph2pol/","title":"sph2pol","text":"<p>The <code>sph2pol</code> object converts spherical coordinates (radius R, azimuthal angle phi, and polar angle theta) into polar coordinates. All input angles are expected to be in radians. This object is useful for transforming spatial data representations within Pure Data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>sph2pol</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/standard~/","title":"standard~","text":"<p>The <code>standard~</code> object is a chaotic signal generator based on the standard map equation. It produces a continuous audio signal whose behavior is determined by the <code>k</code> parameter and initial <code>x[n-1]</code> and <code>y[n-1]</code> values. This object is useful for creating complex, non-repeating waveforms for synthesis or modulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>standard~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/sum/","title":"sum","text":"<p>The <code>sum</code> object calculates the sum of a list of floating-point numbers. It takes a list as input and outputs a single float representing the total sum. A <code>bang</code> message can trigger the output of the sum of the last received list.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sum</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/tCylinder3D/","title":"tCylinder3D","text":"<p>The <code>tCylinder3D</code> object defines a 3D cylindrical volume and tests if a given 3D point (referred to as a \"mass\") is located within its boundaries. It outputs a boolean (0 or 1) indicating containment, along with the distance and speed of the mass relative to the cylinder's center. Parameters allow setting the cylinder's orientation, center, and its inner/outer radii and height limits.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>tCylinder3D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/tLine2D/","title":"tLine2D","text":"<p>The <code>tLine2D</code> object defines a 2D line segment using two points and tracks the position of a \"mass\" relative to it. It outputs the mass's distance from the segment, a related \"speed\" value, and a binary (0 or 1) indicator based on the mass's position. This object is primarily used for testing and interacting with 2D mass positions within a defined linear boundary.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>tLine2D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/tabgen/","title":"tabgen","text":"<p>The <code>tabgen</code> object is a Pure Data abstraction for generating and populating named tables (arrays) with various mathematical functions. It can create waveforms like sinusoids, Gaussian curves, sinc functions, noise, and FFT window functions such as Hanning and Kaiser. This versatile tool also allows applying these generated functions as envelopes to existing table data, making it useful for waveform synthesis and control signal shaping.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>tabgen</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/taint~/","title":"taint~","text":"<p>The <code>taint~</code> object performs spectral multiplication, combining the frequency spectra of two input audio signals. It includes parameters for an inverse threshold and a scaling exponent to control the effect. Users should be aware that this object can produce very loud output levels.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>taint~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/tanh/","title":"tanh","text":"<p>The <code>tanh</code> object calculates the hyperbolic tangent function of a given number. It can operate on both control data (floats) and signal data, making it useful for various mathematical operations within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>tanh</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/tanh~/","title":"tanh~","text":"<p><code>tanh~</code> calculates the hyperbolic tangent of an input signal. It is primarily used for waveshaping, simulating analog distortion through soft clipping by gently limiting signal values between -1 and 1. This produces a distortion characteristic similar to overdriven analog circuitry.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>tanh~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/tanx~/","title":"tanx~","text":"<p><code>tanx~</code> calculates the tangent of an incoming signal, expecting its input in radians. Designed for mathematical operations on audio signals, it outputs the tangent of each input sample. This object is part of a set of trigonometric functions for signal processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>tanx~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/tavg~/","title":"tavg~","text":"<p>The <code>tavg~</code> object calculates the arithmetic mean of an incoming audio signal. It takes a signal as input and outputs the computed average as a float, effectively converting a signal into a single numerical value. This object is part of the zexy library and is useful for basic signal analysis and conversion.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>tavg~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/tempo/","title":"tempo","text":"<p>The <code>tempo</code> object functions as a metronome, sending bangs at a specified rate in BPM, Hz, or milliseconds. It includes a swing parameter for rhythmic deviation, which can be controlled with a seed for reproducible pseudo-randomness. The object can be turned on/off and synced externally, also supporting tempo multiplication for subdivisions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>tempo</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/trunc/","title":"trunc","text":"<p>The <code>trunc</code> object truncates floating-point numbers and lists of numbers towards zero, effectively extracting only the integer part of each number. It functions similarly to Pure Data's built-in <code>int</code> object, providing a way to convert floats to integers by discarding the fractional component.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>trunc</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/trunc~/","title":"trunc~","text":"<p><code>trunc~</code> truncates an incoming audio signal towards zero, effectively retaining only the integer part of each sample. It supports multichannel connections and is compatible with MAX/MSP, making it useful for signal processing where integer-based values are desired.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>trunc~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/wrap/","title":"wrap","text":"<p>The <code>wrap</code> object functions as a float-capable modulo, constraining an input float value within specified limits. It can operate with no arguments (wrapping around 0), one argument (wrapping between 0 and the argument), or two arguments (wrapping between a lower and upper limit). The limits can also be set dynamically via its second inlet, with wrapping always inclusive of the lower limit and exclusive of the upper.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>wrap</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/wrap2/","title":"wrap2","text":"<p>The <code>wrap2</code> object wraps an input value within a specified minimum and maximum range. It can be configured with one or two float arguments to define its wrapping boundaries, or it defaults to a 0 to 1 range. This object is useful for constraining numerical values to a cyclical range, such as for phase accumulation or cyclical parameters.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>wrap2</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/math/wrap2~/","title":"wrap2~","text":"<p>The <code>wrap2~</code> object wraps an input signal's values within a specified low and high range. It accepts float or signal inputs for its range boundaries and supports multichannel audio. This object is useful for waveshaping and constraining signal values.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>wrap2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/autotune/","title":"autotune","text":"<p>The <code>autotune</code> object retunes incoming MIDI pitches to the closest step within a specified musical scale. It accepts a list of scale steps in cents and a base MIDI pitch, enabling custom microtonal or alternative tunings. An optional bypass input allows disabling the retuning functionality.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>autotune</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/bend.in/","title":"bend.in","text":"<p><code>bend.in</code> extracts MIDI Pitch Bend messages from either an internal MIDI device or an external raw MIDI data stream. It outputs pitch bend values as normalized floats (-1 to 1) by default, or as raw integers (0 to 16383) if specified. The object can filter by MIDI channel or operate in omni mode.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bend.in</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/bend.out/","title":"bend.out","text":"<p>The <code>bend.out</code> object formats and sends MIDI pitch bend messages. It converts normalized float values (-1 to 1) or raw integer values (0 to 16383) into MIDI pitch bend data, sending it to Pure Data's MIDI output or its outlet. This object is useful for controlling pitch bend on external MIDI devices or within Pure Data patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bend.out</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/bl.saw~/","title":"bl.saw~","text":"<p>bl.saw~ is a bandlimited, anti-aliased sawtooth oscillator designed for high-quality synthesis. It supports frequency input in Hertz or MIDI pitch, and features inlets for phase reset (hard or soft sync) and phase offset modulation. The object also provides robust multichannel signal support for complex sound design.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bl.saw~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/borax/","title":"borax","text":"<p>The <code>borax</code> object processes incoming MIDI note and velocity data, providing detailed reports on individual note events. It tracks active voices, note pitch, velocity, duration, and the time difference between note-on events, functioning similarly to <code>poly</code> for voice management.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>borax</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/ctl.in/","title":"ctl.in","text":"<p>The <code>ctl.in</code> object extracts MIDI Control Change (CC) information from either an automatically connected MIDI device or an external raw MIDI data stream. It can filter incoming CC messages by MIDI channel and control number, allowing for specific control data to be isolated. The object supports omni mode for all channels and can be configured to listen exclusively to external MIDI input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>ctl.in</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/ctl.out/","title":"ctl.out","text":"<p>The <code>ctl.out</code> object formats and sends raw MIDI control messages. It can output directly to Pure Data's configured MIDI device or to its outlet for further processing. Users can specify the MIDI channel and control number, with an optional flag to restrict output to the outlet only.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>ctl.out</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/flush/","title":"flush","text":"<p>The <code>flush</code> object acts as a \"panic button\" for MIDI notes. It tracks <code>Note-on</code> messages that haven't received a corresponding <code>Note-off</code> and sends <code>Note-off</code> messages for all hanging notes when it receives a <code>bang</code>. It can also clear its internal list of hanging notes with a <code>clear</code> message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>flush</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/gain2~/","title":"gain2~","text":"<p><code>gain2~</code> is a stereo gain control object for Pure Data, designed to adjust the amplitude of stereo audio signals. It offers flexible gain scaling modes (quartic, dB, and linear) and adjustable ramp times for smooth transitions. The object also supports multichannel input and can be controlled via MIDI learn functionality.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gain2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/histogram/","title":"histogram","text":"<p>The <code>histogram</code> object counts the occurrences of incoming positive integer values, storing them as indices in an internal table. It can also specifically record MIDI note-on pitches from list inputs. This utility allows users to query specific counts, export the collected data as a list, and dynamically resize or name its internal table for integration with other data manipulation objects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>histogram</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/keyboard/","title":"keyboard","text":"<p>The <code>keyboard</code> object provides an interactive graphical MIDI keyboard within Pure Data, allowing users to generate MIDI note and velocity messages through mouse clicks and drags. It features velocity sensitivity based on click position, a toggle mode for sustained notes, and configurable parameters such as key dimensions, octave range, and velocity normalization. The object can also be controlled programmatically via messages and supports internal communication through send/receive symbols.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>keyboard</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/keymap/","title":"keymap","text":"<p>The <code>keymap</code> object translates computer keyboard presses into MIDI note on/off messages, mapping keys to specific pitches across two rows (e.g., 'z' row for C3, 'q' row for C4). It supports octave shifting and transposition, and can operate in a 'toggle' mode for sustained notes. This object is primarily used to control synthesizers or other MIDI-aware modules directly from the computer keyboard.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>keymap</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/makenote2/","title":"makenote2","text":"<p>The <code>makenote2</code> object generates MIDI note-on and note-off messages from an input list containing pitch, velocity, and duration. It interprets duration in beats, with the BPM configurable via an argument or inlet, and can also handle symbolic pitches like 'C4'. Additional list elements can be used for MIDI channel or other parameters, and extra creation arguments are appended to the note-off message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>makenote2</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/midi.clock/","title":"midi.clock","text":"<p>The <code>midi.clock</code> object provides an abstraction for handling MIDI clock signals. It can operate as an internal clock, where a float input sets its BPM, or synchronize to an external MIDI clock source. It outputs a <code>bang</code> at each clock tick, useful for timing and synchronization within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>midi.clock</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/midi.in/","title":"midi.in","text":"<p>The <code>midi.in</code> object processes incoming MIDI data, converting raw MIDI streams into \"cooked\" data with type symbols, values, and channel information. It can receive MIDI from connected devices or an external source, and allows filtering by MIDI channel or operating in omni mode. This object is particularly useful for routing and managing various MIDI message types within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>midi.in</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/midi.learn/","title":"midi.learn","text":"<p>The <code>midi.learn</code> object dynamically learns and stores incoming MIDI messages, such as control changes, program changes, notes, and bends. It allows users to associate specific MIDI inputs with internal parameters, saving these mappings within the Pure Data patch. This enables flexible control setups where MIDI devices can be \"taught\" to control different aspects of a patch without manual configuration.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>midi.learn</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/midi/","title":"midi","text":"<p>The <code>midi</code> object in Pure Data is a versatile tool for handling MIDI data. It can play and record raw MIDI streams, including the ability to save and load MIDI files, and import/export data from/to text files. Additionally, it functions as a 3-voice polyphonic synthesizer and offers control over playback, looping, and synchronization with external clocks.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>midi</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/midi.out/","title":"midi.out","text":"<p>The <code>midi.out</code> object sends \"cooked\" MIDI messages (Note On/Off, Control Change, Program Change, Aftertouch, Pitch Bend) to a connected MIDI device, unlike <code>midiout</code> which handles raw data. It accepts symbol data types, values, and a channel, with an optional argument or right inlet to set the MIDI channel (0 for omni). An <code>-ext</code> flag or <code>ext</code> message can be used to direct output solely to its outlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>midi.out</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/midi2note/","title":"midi2note","text":"<p>The <code>midi2note</code> object converts MIDI pitch values (0-127) into standard musical note names (e.g., <code>Eb3</code>), supporting quarter tones and a range from octave 0 to 8. It can output note names with octave numbers, optionally using Unicode symbols for sharps/flats or as a list, and allows for custom scale definitions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>midi2note</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/midiflush/","title":"midiflush","text":"<p>The <code>midiflush</code> object acts as a \"panic button\" for raw MIDI data streams, preventing hanging notes. It tracks incoming MIDI Note-on messages and, upon receiving a <code>bang</code>, sends corresponding Note-off messages for any notes that haven't been switched off. It also accepts <code>float</code> for raw MIDI data and a <code>clear</code> message to reset its internal state.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>midiflush</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/midiformat/","title":"midiformat","text":"<p>The <code>midiformat</code> object receives various MIDI messages (note on/off, polyphonic aftertouch, control change, program change, channel aftertouch, pitch bend) through its inlets and formats them into a raw MIDI message output. It is the counterpart to the <code>midiparse</code> object and supports high-resolution 14-bit pitch bend messages via the <code>hires</code> message or attribute.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>midiformat</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/midiparse/","title":"midiparse","text":"<p>The <code>midiparse</code> object receives a raw MIDI data stream and parses it into various MIDI messages, such as note messages, control changes, program changes, and pitch bend. It is the counterpart to the <code>midiformat</code> object and can output pitch bend data with different resolutions (7-bit or 14-bit) via its <code>hires</code> attribute.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>midiparse</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/mono/","title":"mono","text":"<p><code>mono</code> is a Pure Data object designed to emulate monophonic synthesizer behavior from polyphonic MIDI note input. It manages active notes based on configurable priority modes (last, high, low) and supports legato playing. The object also allows for setting a glide time between notes, effectively controlling portamento.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>mono</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/mono~/","title":"mono~","text":"<p>The <code>mono~</code> object emulates monophonic synthesizer behavior, processing MIDI note messages to output pitch and velocity signals. It supports various note priority modes (last, high, low) and a legato mode, allowing for flexible control over monophonic voice allocation. Additionally, it can apply portamento (glide) to the pitch output, making it suitable for expressive melodic lines.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>mono~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/mpe.in/","title":"mpe.in","text":"<p>The <code>mpe.in</code> object processes raw MIDI data, specifically designed for MPE (MIDI Polyphonic Expression) input. It outputs common MIDI messages like Note On/Off, Channel Pressure, Slide, and Pitch Bend, prepended with a voice number for routing. It can receive input from an internal MIDI device or an external raw MIDI source, with an option to listen exclusively to the external input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>mpe.in</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/note.in/","title":"note.in","text":"<p><code>note.in</code> extracts MIDI pitch and velocity information from connected MIDI devices or external raw MIDI data streams. It handles both Note On and Note Off messages, including release velocity, and allows filtering by MIDI channel or operating in omni mode. The object automatically listens to internal MIDI devices but can be configured to only accept external MIDI input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>note.in</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/note.out/","title":"note.out","text":"<p>The <code>note.out</code> object formats and sends MIDI pitch messages, including Note On and Note Off events, to Pure Data's MIDI output or its outlet. It handles pitch, velocity, and channel inputs, and can optionally output release velocity. This object simplifies sending MIDI note data, acting as a direct interface to external MIDI devices or other MIDI-related Pure Data objects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>note.out</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/note2midi/","title":"note2midi","text":"<p>The <code>note2midi</code> object converts musical note names (e.g., <code>C4</code>, <code>G#5</code>, <code>Abb3</code>) into their corresponding MIDI pitch values. It supports enharmonic spellings, quarter tones, and can process input as symbols or lists. This utility is crucial for translating human-readable musical notation into numerical data for MIDI control.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>note2midi</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/noteinfo/","title":"noteinfo","text":"<p>The <code>noteinfo</code> object tracks active MIDI note events, outputting the MIDI pitch, velocity, and the total number of active voices. It also provides detailed information about individual note events, including voice number, event number, pitch, and velocity. A <code>bang</code> input resets its internal memory, sending note-offs for all tracked events.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>noteinfo</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/panic/","title":"panic","text":"<p>The <code>panic</code> object functions as a \"panic button\" for MIDI notes. It tracks raw MIDI Note-on messages and, upon receiving a <code>bang</code>, sends corresponding Note-off messages for any notes that were not switched off, effectively flushing \"hanging\" notes. It also allows clearing its internal list of tracked notes with a <code>clear</code> message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>panic</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/pgm.in/","title":"pgm.in","text":"<p>The <code>pgm.in</code> object extracts MIDI Program Change messages from either a connected MIDI device or an external raw MIDI data stream. It outputs program change values from 0 to 127, unlike vanilla Pure Data objects. The object can operate in omni mode, receiving from all channels, or be configured for a specific MIDI channel, with support for multiple MIDI ports via extended channel numbering.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pgm.in</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/pgm.out/","title":"pgm.out","text":"<p>The <code>pgm.out</code> object formats and sends MIDI program change messages (0-127) to Pd's configured MIDI output device. It can also output raw MIDI data to its outlet for further processing. The MIDI channel can be specified as an argument or via an inlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pgm.out</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/pluck.m~/","title":"pluck.m~","text":"<p>The <code>pluck.m~</code> object is a polyphonic wrapper for the <code>pluck~</code> object from the ELSE library, designed for physical modeling synthesis of plucked string sounds. It accepts MIDI input for pitch and triggering, and also supports signal input for these parameters, allowing for multi-voice operation with configurable cutoff and decay time.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pluck.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/pluck~/","title":"pluck~","text":"<p>The <code>pluck~</code> object implements the Karplus-Strong algorithm for plucked string synthesis, featuring a 1st order lowpass filter in its feedback loop. It takes frequency (Hz or MIDI), decay time, and filter cutoff frequency as parameters, and can be triggered by signal transitions or control-rate lists. An optional input allows for external excitation signals instead of its internal noise generator.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pluck~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/pm6.m~/","title":"pm6.m~","text":"<p>The <code>pm6.m~</code> object is a 6-operator phase modulation (FM) synthesizer, inspired by the Yamaha DX7, producing stereo audio. It allows users to configure a modulation matrix for self-feedback, feedforward, and feedback modulation, along with individual oscillator ratios, levels, and panning. It accepts MIDI pitch input and can be modulated by external signals like envelopes for dynamic control.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pm6.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/ptouch.in/","title":"ptouch.in","text":"<p>The <code>ptouch.in</code> object extracts MIDI polyphonic aftertouch messages from raw MIDI input. It can filter by a specific MIDI channel or operate in omni mode, outputting the key and aftertouch value as a list, along with the MIDI channel.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>ptouch.in</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/ptouch.out/","title":"ptouch.out","text":"<p>The <code>ptouch.out</code> object formats and sends raw MIDI polyphonic aftertouch messages. It outputs these messages to Pure Data's MIDI output and its outlet. An argument or message can set the MIDI channel, with channel 1 as the default.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>ptouch.out</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/rec2/","title":"rec2","text":"<p>The <code>rec2</code> object (or <code>record</code>) records sequences of musical events, specifically MIDI pitch and velocity, into a <code>[text]</code> object. This recorded data is formatted for use with objects like <code>[text sequence]</code> for playback. A <code>bang</code> message can reset the recording.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rec2</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/retune/","title":"retune","text":"<p>The <code>retune</code> object remaps incoming MIDI pitches to a custom scale. It takes a list of steps in cents defining the scale and a base MIDI pitch, then retunes subsequent MIDI pitch inputs according to this scale. This allows for microtonal adjustments or alternative tunings.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>retune</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/sendmidi/","title":"sendmidi","text":"<p>The <code>sendmidi</code> object is a helper abstraction designed to forward MIDI messages to a <code>pd~</code> sub-patch. This is particularly useful because <code>pd~</code> objects cannot directly receive MIDI input from connected devices, allowing <code>sendmidi</code> to bridge this communication gap.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sendmidi</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/sfont~/","title":"sfont~","text":"<p>The <code>sfont~</code> object is a sampler synthesizer that plays SoundFont (<code>.sf2</code> or <code>.sf3</code>) files, based on FluidLite. It generates stereo audio output and responds to a wide range of MIDI messages, including note, control change, pitch bend, program change, and system exclusive messages. It also features advanced microtonal capabilities, allowing for custom scales and pitch remapping.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sfont~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/sfz~/","title":"sfz~","text":"<p>The <code>sfz~</code> object is an SFZ player that loads and interprets SFZ instrument definitions, which can include samples, internal oscillators, and synthesis parameters like ADSR and filters. It responds to various MIDI messages for note playback, control changes, pitch bend, and aftertouch, and supports microtonal tuning.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sfz~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/suspedal/","title":"suspedal","text":"<p>The <code>suspedal</code> object in Pure Data holds MIDI Note Off messages when active, releasing them when deactivated. It offers 'regular' and 'tonal' sustain modes, mimicking a piano's sustain pedal, and includes four retriggering modes to manage repeated notes. This utility is designed to enhance MIDI control for polyphonic synthesis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>suspedal</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/sustain/","title":"sustain","text":"<p>The <code>sustain</code> object emulates a MIDI sustain pedal, holding <code>noteoff</code> messages while active and releasing them when deactivated. It processes MIDI pitch/velocity pairs, can be controlled by a MIDI sustain pedal input or messages, and offers different modes for handling repeated notes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>sustain</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/synth~/","title":"synth~","text":"<p><code>synth~</code> is a Pure Data object that simplifies the creation and management of polyphonic or monophonic synthesizers. It acts as a wrapper around <code>clone</code>, <code>mono</code>, and <code>voices</code>, loading synth abstractions and handling voice allocation. It accepts MIDI note messages for pitch and velocity, and allows custom messages to be sent to the loaded synth.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>synth~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/sysrt.in/","title":"sysrt.in","text":"<p>The <code>sysrt.in</code> object detects and outputs system and real-time MIDI messages. It provides a raw MIDI data stream as a float and sends bangs for specific MIDI events such as clock, start, continue, stop, active sensing, reset, and tick. This object is useful for synchronizing with external MIDI devices or processing MIDI timing information.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sysrt.in</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/sysrt.out/","title":"sysrt.out","text":"<p>The <code>sysrt.out</code> object formats and sends raw MIDI system and real-time messages. It can output various MIDI messages such as clock, tick, start, continue, stop, and active sensing. This object is useful for precise control over MIDI system-level events.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sysrt.out</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/touch.in/","title":"touch.in","text":"<p>The <code>touch.in</code> object extracts MIDI Aftertouch information from either a connected MIDI device or an external raw MIDI data stream. It can filter Aftertouch messages by MIDI channel, operating in an omni mode if no specific channel is set, and outputs the Aftertouch value and the corresponding MIDI channel.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>touch.in</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/touch.out/","title":"touch.out","text":"<p>The <code>touch.out</code> object formats and sends MIDI channel aftertouch messages. It automatically outputs to Pure Data's configured MIDI output device, but can also be configured to send messages only to its outlet for further processing by other MIDI objects. The MIDI channel can be set via an argument or inlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>touch.out</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/voices~/","title":"voices~","text":"<p>The <code>voices~</code> object is a polyphonic voice manager that generates multichannel signals for controlling pitch and gate. It takes MIDI note messages as input, along with parameters for setting the number of voices and release time. It outputs pitch values in MIDI and normalized gate values, enabling polyphonic control of sound synthesis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>voices~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/xbendin/","title":"xbendin","text":"<p>The <code>xbendin</code> object retrieves 14-bit pitch bend messages from raw MIDI input, outputting the pitch bend value (0-16383) and optionally the MIDI channel. This object is redundant, deprecated, and users are advised to use vanilla's <code>bendin</code> or <code>else/bend.in</code> instead.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>xbendin</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/xbendin2/","title":"xbendin2","text":"<p>The <code>xbendin2</code> object parses incoming raw MIDI data to extract the Most Significant Byte (MSB) and Least Significant Byte (LSB) of pitch bend messages, which can be combined to form a 14-bit value. It also outputs the MIDI channel number and can filter messages by channel. This object is considered redundant and deprecated, with <code>bendin</code> or <code>else/bend.in</code> being recommended alternatives.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>xbendin2</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/xbendout/","title":"xbendout","text":"<p>The <code>xbendout</code> object formats and sends 14-bit MIDI pitch bend messages, ranging from 0 to 16383, to a specified MIDI channel. It also outputs a raw MIDI data stream. This object is considered redundant and deprecated; users should prefer <code>bendout</code>, <code>cyclone/midiformat</code>, or <code>else/bend.out</code> for similar functionality.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>xbendout</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/xbendout2/","title":"xbendout2","text":"<p>The <code>xbendout2</code> object formats and sends 14-bit pitch bend messages as two 7-bit values: a Most Significant Byte (MSB) and a Least Significant Byte (LSB). It takes float values for MSB and LSB (0-127) and can also set the MIDI channel.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>xbendout2</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/xnotein/","title":"xnotein","text":"<p>The <code>xnotein</code> object processes raw MIDI data streams, providing more detailed information than <code>notein</code>. It outputs MIDI note number (pitch), Note On/Off velocity, and the Note On/Off state (1 for On, 0 for Off), including release velocity. It can also filter by or output the MIDI channel number.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>xnotein</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/midi/xnoteout/","title":"xnoteout","text":"<p>The <code>xnoteout</code> object sends MIDI Note On and Note Off messages, uniquely supporting both Note On and Note Off (release) velocities for enhanced control. It accepts inputs for MIDI pitch, velocity, note state (on/off), and channel, providing a more comprehensive MIDI output solution than the standard <code>noteout</code> object. It can also output a raw MIDI data stream.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>xnoteout</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/autofade.mc~/","title":"autofade.mc~","text":"<p><code>autofade.mc~</code> provides automatic fade-in and fade-out functionality for multichannel audio signals. It responds to a gate control signal, applying various configurable fade curves (e.g., <code>quartic</code>, <code>sin</code>, <code>lin</code>) over a specified duration. This object is useful for smoothly transitioning audio signals based on a gate's state.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>autofade.mc~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/autofade2.mc~/","title":"autofade2.mc~","text":"<p>The <code>autofade2.mc~</code> object provides automatic fade-in and fade-out functionality for multichannel audio signals. It uses a gate control to trigger fades, with configurable fade times and various fade curve types (e.g., <code>quartic</code>, <code>sin</code>, <code>hann</code>).</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>autofade2.mc~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/bitnormal~/","title":"bitnormal~","text":"<p>The <code>bitnormal~</code> object filters an incoming audio signal, replacing any NaN (Not a Number), infinity, or denormal values with zero. This ensures that only \"normal\" floating-point numbers pass through. It is particularly useful when working with bitwise operations or other contexts where such problematic numerical values might occur, and it supports multichannel signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bitnormal~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/cusp~/","title":"cusp~","text":"<p><code>cusp~</code> is a chaotic signal generator that implements the difference equation y[n] = a - b * sqrt(abs(y[n-1])). It produces a signal whose output rate can be controlled by a frequency input. This object supports multichannel operation and allows setting its internal parameters 'a', 'b', and initial value y[n-1] via messages.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>cusp~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/dbgain~/","title":"dbgain~","text":"<p>The <code>dbgain~</code> object adjusts the gain of an audio signal in decibels. Similar to <code>level~</code> but without a GUI, it supports multichannel input, allowing individual dB adjustments for each channel when a multichannel signal is provided to its right inlet. It outputs the gain-adjusted signal(s).</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>dbgain~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/delace~/","title":"delace~","text":"<p>The <code>delace~</code> object deinterleaves a multichannel signal, distributing its channels across multiple outlets. The number of outlets determines how the signal is split. An optional <code>-z</code> flag can be used to pad output multichannel signals with zeros if they are not of the same size, ensuring all outputs match the channel count of the largest signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>delace~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/f2s~/","title":"f2s~","text":"<p>The <code>f2s~</code> (or <code>float2sig~</code>) object converts float values or lists of floats into audio signals, using <code>vline~</code> for smooth, ramped transitions. It allows specifying a ramp time in milliseconds for the conversion, enabling gradual changes. This object supports multichannel connections, making it suitable for dynamic control of multiple audio parameters.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>f2s~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/float2sig~/","title":"float2sig~","text":"<p>The <code>float2sig~</code> (or <code>f2s~</code>) object converts incoming float or list messages into audio signals. It uses a ramp time, similar to <code>vline~</code>, to smoothly transition between values, preventing clicks or abrupt changes. This object supports multichannel operation, allowing for simultaneous conversion of multiple values to signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>float2sig~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/fluid.waveform/","title":"fluid.waveform","text":"<p>The <code>fluid.waveform</code> object visualizes multichannel audio waveforms, feature data, slices, and spectrograms within Pure Data. It supports displaying features as stacked lines, plotting 3D data, and offers customization for colors and dimensions. Users can interact with the display by clicking and dragging to report x-y values.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.waveform</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/gain~/","title":"gain~","text":"<p>The <code>gain~</code> object is a convenient mono gain abstraction for adjusting the amplitude of an incoming signal. It features configurable ramp times and various scaling modes (quartic, dB, linear) for its internal slider. This object supports multichannel signals and can be controlled via MIDI.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gain~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/gatedelay~/","title":"gatedelay~","text":"<p>The <code>gatedelay~</code> object delays the \"gate on\" value of an incoming signal or float, while immediately outputting the \"gate off\" value. It supports multichannel signals, where a single delay time can apply to all channels, or individual delay times can be applied per channel if the right inlet is also multichannel. The delay time is specified in milliseconds.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gatedelay~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/gatehold~/","title":"gatehold~","text":"<p>The <code>gatehold~</code> object extends the duration of an incoming gate signal by holding its value for a specified time in milliseconds after the gate closes. If a new gate arrives before the hold time expires, the object re-triggers, effectively restarting the hold period. This object supports multichannel signals and is useful for controlling parameters with different durations from a single gate.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gatehold~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/gaterelease~/","title":"gaterelease~","text":"<p>The <code>gaterelease~</code> object in Pure Data controls the release of gate signals. It holds a gate value open for a specified duration (in milliseconds) after it initially opens, releasing it only after this time has elapsed. This object supports multichannel operation and resets if the gate closes before the release time.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gaterelease~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/glide~/","title":"glide~","text":"<p>The <code>glide~</code> object generates a smooth glide or portamento effect on incoming audio signals, smoothing out sudden changes in value over a specified time in milliseconds. It supports multichannel signals and allows for setting an exponential factor to control the curve of the glide.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>glide~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/lace~/","title":"lace~","text":"<p>The <code>lace~</code> object interleaves two or more multichannel audio signals into a single multichannel output. It can take a float argument to specify the number of inlets, with a minimum of two. An optional <code>-z</code> flag can be used to pad shorter multichannel signals with zeros to match the channel count of the largest input, ensuring consistent output size.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lace~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/lag2~/","title":"lag2~","text":"<p>The <code>lag2~</code> object smooths incoming audio signals by applying independent ramp-up and ramp-down times, effectively creating a portamento or slew effect. It allows precise control over how quickly a signal converges to a new target value, with separate millisecond-based settings for rising and falling ramps. This object also supports multichannel operation, applying lag times per channel if provided.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lag2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/level.m~/","title":"level.m~","text":"<p><code>level.m~</code> is a simple multi-channel gain module designed to adjust the audio level in decibels. It is particularly useful for controlling the amplitude of multi-channel audio signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>level.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/mag~/","title":"mag~","text":"<p>The <code>mag~</code> object calculates the magnitude (amplitude) of a signal from its real and imaginary components, functioning similarly to the amplitude output of <code>car2pol~</code>. It can also compute the power magnitude spectrum. This object is useful for spectral processing that does not require phase information and supports multichannel audio connections.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>mag~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/merge~/","title":"merge~","text":"<p>The <code>merge~</code> object combines multiple audio signals of varying channel lengths into a single multichannel output signal. The number of input inlets can be configured via an argument, with a minimum of two. This object is useful for consolidating several audio streams into one for further processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>merge~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/meter4~/","title":"meter4~","text":"<p><code>meter4~</code> is a convenient quadraphonic VU-meter abstraction that measures the RMS and peak amplitude (in dBFS) of four incoming audio channels. It passes the input signals through and outputs the VU values as a list. Users can configure the window and hop sizes for the internal <code>vu~</code> objects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>meter4~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/meter8~/","title":"meter8~","text":"<p>The <code>else/meter8~</code> object functions as an 8-channel VU meter, providing RMS and peak amplitude values in dBFS for incoming audio signals. It passes the input signals through its output and allows configuration of window and hop sizes for its internal <code>vu~</code> objects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>meter8~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/nchs~/","title":"nchs~","text":"<p>The <code>nchs~</code> object retrieves the number of channels from a multi-channel audio connection, such as those provided by <code>snake~ in</code> or <code>clone</code>. It outputs this value whenever the DSP chain updates, or when triggered by a <code>bang</code> message. This object is useful for dynamically adapting patches to the number of active audio channels.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>nchs~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/out8~/","title":"out8~","text":"<p><code>out8~</code> is an octaphonic (8-channel) audio output abstraction for Pure Data, providing click-free control over the DSP engine, mute/unmute, and output gain. It features adjustable ramp times and three scaling modes (quartic, dB, linear) for its internal gain slider, allowing precise control over multi-channel audio output. Users must configure at least 8 audio output channels in their Pure Data preferences.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>out8~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/out~/","title":"out~","text":"<p>The <code>out~</code> object is a convenient audio output abstraction for Pure Data, providing click-free control over DSP engine state, <code>dac~</code> output, and muting. It features a gain slider with selectable scaling modes (quartic, dB, linear) and adjustable ramp times, handling both mono/stereo and multichannel audio inputs by summing them to the stereo output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>out~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/pan.mc~/","title":"pan.mc~","text":"<p>The <code>pan.mc~</code> object pans an input signal across a specified number of output channels, simulating a circular speaker arrangement. It uses equal power crossfading, controlled by an azimuth input and a spread parameter, to distribute the signal among adjacent channels.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pan.mc~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/pan4~/","title":"pan4~","text":"<p>The <code>pan4~</code> object is a 4-channel equal power (sin/cos) panner. It takes a signal input and two control inputs for X and Y panning, ranging from -1 (Left/Back) to 1 (Right/Front), to distribute the signal across four output channels. An optional <code>-mc</code> flag enables multichannel audio output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pan4~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/pan~/","title":"pan~","text":"<p><code>pan~</code> pans an input signal across a user-defined number of output channels, simulating a circular speaker arrangement. It uses equal power crossfading between adjacent channels, controlled by an azimuth input and a spread parameter to adjust the width of the crossfade. This object is ideal for spatializing mono signals into multi-channel audio environments.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pan~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/rampnoise~/","title":"rampnoise~","text":"<p>The <code>rampnoise~</code> object is a low-frequency, band-limited noise generator that produces \"random ramps\" by interpolating between random values. It outputs signals between -1 and 1, with its frequency controlling the rate of these ramps. The object supports seeding for reproducible output and multichannel operation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rampnoise~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/record~/","title":"record~","text":"<p>The <code>record~</code> object captures incoming audio signals and stores them into one or more Pure Data arrays. It supports up to 64 channels, offering control over recording start/stop, looping, and appending data within specified array segments. It also outputs a synchronization signal during active recording.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>record~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/repeat~/","title":"repeat~","text":"<p><code>repeat~</code> is a Pure Data object that takes an input audio signal and repeats it a specified number of times, determined by a float input. This object is useful for duplicating a signal, such as an impulse, to trigger events across multiple channels or to create a series of repeated occurrences from a single source.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>repeat~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/rotate.mc~/","title":"rotate.mc~","text":"<p>The <code>rotate.mc~</code> object performs equal power rotation for multichannel signal inputs. It takes a control signal or float between 0 and 1 (with negative values wrapping) to determine the rotation position. This object is useful for spatializing multichannel audio.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rotate.mc~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/rotate~/","title":"rotate~","text":"<p>The <code>rotate~</code> object performs equal power rotation for 'n' audio channels, defaulting to 2. It takes a position control input (float or signal) from -1 to 1, allowing continuous spatial movement. This object is useful for dynamic panning and spatialization of multichannel audio.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rotate~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/sig2float~/","title":"sig2float~","text":"<p>The <code>sig2float~</code> object converts audio signals into floating-point numbers, enabling the use of signal data within the control domain. It supports multichannel signals, outputting a list of floats, and allows for precise control over the conversion rate and sample offset.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sig2float~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/sigs~/","title":"sigs~","text":"<p><code>sigs~</code> is a multichannel signal generator similar to <code>sig~</code>. It converts a float or a list of numbers into a multichannel signal, with the number of channels determined by its creation arguments. Each argument creates a separate inlet for controlling a specific channel.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sigs~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/slew2~/","title":"slew2~","text":"<p>The <code>slew2~</code> object limits the rate of change of an incoming signal, similar to <code>slew~</code> but with independent speed controls for upward and downward ramps. It generates a line towards the target value, with speed defined as amplitude change per second. This is useful for smoothing control signals or preventing abrupt changes in audio, and it supports multichannel operation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>slew2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/slew~/","title":"slew~","text":"<p>The <code>slew~</code> object acts as a rate limiter for audio signals, smoothing out sudden changes in amplitude or other parameters. It limits the rate at which an incoming signal can change, generating a linear ramp towards the target value at a specified speed (amplitude per second). It supports multichannel signals, applying the slew limit independently to each channel.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>slew~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/smooth2~/","title":"smooth2~","text":"<p><code>smooth2~</code> is a signal smoothing object similar to <code>smooth~</code>, but it allows for distinct ramp-up and ramp-down times. It can be used to create portamento effects or smooth out incoming signals, with optional curve control for the ramp shape. It also supports multichannel signals, applying individual glide times per channel.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>smooth2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/smooth~/","title":"smooth~","text":"<p>The <code>smooth~</code> object interpolates signal transitions over a specified time in milliseconds, effectively creating a portamento or glide effect. It supports linear or exponential curves and can process multichannel audio signals, applying individual glide times per channel when provided.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>smooth~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/spread.mc~/","title":"spread.mc~","text":"<p>The <code>spread.mc~</code> object distributes multiple input audio channels across multiple output channels using equal power panning. It allows control over the number of output channels and a \"spread\" parameter, which determines how widely each input signal is panned across the available outputs. This object is designed for spatializing multichannel audio signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>spread.mc~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/stepnoise~/","title":"stepnoise~","text":"<p>The <code>stepnoise~</code> object generates band-limited, stepped noise, producing pseudo-random values between -1 and 1 at a specified frequency. It acts as a low-frequency noise generator without interpolation, creating discrete \"steps\" rather than smooth transitions. The output can be made reproducible using a seed, and the object supports multichannel operation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>stepnoise~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/sum~/","title":"sum~","text":"<p>The <code>sum~</code> object takes a multichannel audio signal and sums all channels into a single mono output. If a non-zero float argument is provided during creation or as a message, the input channels are summed. If the float argument is zero, the multichannel input passes through unchanged.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sum~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/tabplayer~/","title":"tabplayer~","text":"<p>The <code>tabplayer~</code> object is a multichannel audio player for Pure Data arrays (tables). It offers flexible playback controls including variable speed (forward/backward), looping with crossfading, and adjustable start/end points. It also supports different interpolation modes and can handle sample rate adjustments for accurate playback of loaded audio.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>tabplayer~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/tabreader~/","title":"tabreader~","text":"<p><code>tabreader~</code> is a signal object that reads values from a Pure Data array (table) using various interpolation methods, including spline, linear, and cosine. It supports multi-channel arrays and can function as a wavetable oscillator when driven by a <code>phasor~</code> in loop mode. It handles both 0-1 normalized indexing and direct table indexing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>tabreader~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/tabwriter~/","title":"tabwriter~","text":"<p>The <code>tabwriter~</code> object records audio signals into arrays, supporting up to 64 channels with sample accuracy. It can be triggered to start/stop recording, or configured to write to specific indices within the array. Users can define recording ranges and control looping or continuation modes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>tabwriter~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/xfade.mc~/","title":"xfade.mc~","text":"<p>The <code>xfade.mc~</code> object crossfades between two multichannel audio sources. It supports both equal power (default) and linear crossfading, controlled by a mix value from -1 (source A) to 1 (source B) or by a 'lin' message. This object is useful for smoothly transitioning between complex audio signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>xfade.mc~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multichannel/xfade~/","title":"xfade~","text":"<p>The <code>xfade~</code> object crossfades between two audio sources, A and B, each supporting 1 to 64 channels. It defaults to an equal power crossfade but can be set to linear via the <code>-lin</code> flag or <code>lin</code> message. The crossfade amount is controlled by a rightmost inlet, ranging from -1 (source A) to 1 (source B).</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>xfade~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/multithreading/fluid.bufthreaddemo/","title":"fluid.bufthreaddemo","text":"<p>The <code>fluid.bufthreaddemo</code> object is a demonstration tool from the Fluid Decomposition Toolkit, designed to illustrate multi-threading concepts in Pure Data. It simulates a time-consuming, non-realtime process, allowing users to experiment with blocking and non-blocking modes, job queuing, and cancellation. This helps in understanding how to manage intensive tasks, such as those found in MIR/Analysis, without disrupting real-time audio processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufthreaddemo</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/networking/osc.receive/","title":"osc.receive","text":"<p>The <code>osc.receive</code> object is used to receive Open Sound Control (OSC) messages over network connections. It acts as an abstraction built upon <code>osc.parse</code> and <code>netreceive</code>, allowing it to connect to a specified port to receive messages, typically from an <code>osc.send</code> object. It can be controlled to connect or disconnect from a port, and outputs the received OSC messages.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>osc.receive</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/networking/osc.send/","title":"osc.send","text":"<p>The <code>osc.send</code> object transmits Open Sound Control (OSC) messages over a network. It functions as an abstraction built upon <code>osc.format</code> and <code>netsend</code>, allowing users to specify a target address and port for communication. This object is designed to send OSC data to corresponding <code>osc.receive</code> objects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>osc.send</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/networking/pdlink/","title":"pdlink","text":"<p>The <code>pdlink</code> object enables seamless communication between different Pure Data instances, including <code>pd~</code> subprocesses, across a local network. It functions similarly to <code>[send]</code> and <code>[receive]</code> but simplifies network messaging by abstracting away explicit network or OSC configuration. Users can specify a symbol address for communication and utilize flags like <code>-debug</code> for connection status or <code>-local</code> for localhost-only connections.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pdlink</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/neural_networks/neuralnet/","title":"neuralnet","text":"<p><code>neuralnet</code> is an artificial neural network Pd external, written in pure C, without any dependencies. It is inspired by the book \"Neural Networks from Scratch in Python\" by Harrison Kinsley &amp; Daniel Kukie\u0142a. It is an attempt to translate the Python code to C with the Pure Data API, to run neural networks within Pd.</p> <p><code>neuralnet</code> creates densely connected neural networks for classification, regression, and binary logistic regression. There are different activation functions and optimizers you can set, and various other settable parameters. The object's help patch and the examples found in the examples directory should cover all the necessary information.</p> <ul> <li> Download via Deken.</li> <li> Library developed mainly by Alexandros Drymonitis.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> [neuralnet]: A Pure Data External for the Creation of Neural Networks Written in Pure C by Alexandros Drymonitis</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/osc/osc.format/","title":"osc.format","text":"<p><code>osc.format</code> is an experimental Pure Data object designed to format messages into Open Sound Control (OSC) messages. It takes a list or message starting with an OSC address and outputs a basic OSC message, supporting only float and string data types. For more comprehensive OSC formatting, consider using Vanilla's <code>oscformat</code> or <code>mrpeach</code>'s <code>packOSC</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>osc.format</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/osc/osc.parse/","title":"osc.parse","text":"<p>The <code>osc.parse</code> object is used to parse and format Open Sound Control (OSC) messages. Similar to <code>oscparse</code>, it provides a more granular output of OSC messages, including parsed messages and timetag offsets, for lower-level handling. It is typically used within the <code>osc.receive</code> abstraction.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>osc.parse</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/bl.imp2~/","title":"bl.imp2~","text":"<p><code>bl.imp2~</code> is a bandlimited, two-sided impulse oscillator designed for audio signal generation. It can receive frequency input in Hertz by default, with an option to interpret input as MIDI pitch using a message or creation argument. This object supports multichannel operation, allowing for the simultaneous generation of multiple impulse streams.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bl.imp2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/bl.imp~/","title":"bl.imp~","text":"<p><code>bl.imp~</code> is a bandlimited impulse oscillator that generates audio signals. It can take frequency input in Hertz or MIDI pitch, and supports multichannel operation, allowing individual frequency control for each channel. This object is suitable for creating sharp, click-like sounds or as a building block for more complex synthesis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bl.imp~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/bl.osc~/","title":"bl.osc~","text":"<p><code>bl.osc~</code> is a bandlimited oscillator based on <code>else/wavetable~</code>, offering various waveforms like <code>saw</code>, <code>saw2</code>, <code>tri</code>, <code>square</code>, and <code>imp</code>. It supports variable partials, hard and soft sync, phase modulation, and MIDI pitch input for flexible sound generation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bl.osc~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/bl.saw2~/","title":"bl.saw2~","text":"<p>The <code>bl.saw2~</code> object is a bandlimited sawtooth oscillator, suitable for anti-aliased audio synthesis, which can also produce a triangular waveform. It accepts frequency input in Hertz or MIDI pitch and features both phase synchronization via impulse signals and phase modulation. Soft sync is also available for less harsh synchronization effects.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bl.saw2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/bl.square~/","title":"bl.square~","text":"<p><code>bl.square~</code> is a bandlimited square wave oscillator designed for proper audio synthesis, preventing aliasing. It offers control over pulse width, phase offset, and phase synchronization, and can accept frequency input in either Hertz or MIDI pitch. The object also supports multichannel operation, allowing for multiple square waves from a single instance.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bl.square~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/bl.tri~/","title":"bl.tri~","text":"<p>The <code>bl.tri~</code> object is a bandlimited triangle wave oscillator designed for anti-aliased audio synthesis. It supports frequency input in Hertz or MIDI pitch, and offers phase offset and phase synchronization capabilities for advanced sound design, including \"hard sync\" and \"soft sync\" techniques. It also supports multichannel operation, adapting to the input signal's channel count.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bl.tri~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/bl.vsaw~/","title":"bl.vsaw~","text":"<p><code>bl.vsaw~</code> is a bandlimited, anti-aliased variable sawtooth waveform oscillator, capable of producing triangular waveforms based on its 'width' parameter. It supports frequency input in Hertz or MIDI pitch, and offers phase offset and hard/soft synchronization options. This object is designed for high-quality audio synthesis, including multichannel output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bl.vsaw~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/bl.wavetable~/","title":"bl.wavetable~","text":"<p><code>bl.wavetable~</code> is a bandlimited wavetable oscillator that generates audio signals from a specified array (waveform). It supports various interpolation methods and offers advanced phase synchronization and modulation capabilities, including hard and soft sync, while minimizing aliasing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>bl.wavetable~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/blip~/","title":"blip~","text":"<p><code>blip~</code> is a band-limited oscillator that generates waveforms by summing cosines, allowing precise control over the fundamental frequency, number of partials, and spectral multiplier. It supports phase modulation and hard/soft sync, making it suitable for creating harmonically rich sounds. This object is based on Csound's 'gbuzz' opcode.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>blip~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/cosine~/","title":"cosine~","text":"<p><code>cosine~</code> is a versatile cosine wave oscillator that generates audio signals. It supports phase synchronization and modulation, allowing for complex waveform manipulation and hard/soft sync techniques. The object also features multichannel capabilities and flexible frequency input modes (Hertz or MIDI pitch).</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>cosine~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/cycle~/","title":"cycle~","text":"<p>The <code>cycle~</code> object is a linear interpolating oscillator that generates a periodic waveform. It defaults to an internal cosine wave but can read waveforms from Pure Data arrays, supporting phase modulation and configurable buffer sizes and offsets. It's a fundamental building block for sound synthesis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>cycle~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/damp.osc~/","title":"damp.osc~","text":"<p><code>damp.osc~</code> is a damped oscillator that generates a signal with a specified frequency and decay time. It can be triggered by signals or lists, with the trigger value determining the output amplitude. It provides two outputs: one starting with a cosine phase and another with a sine phase.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>damp.osc~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/dust2~/","title":"dust2~","text":"<p>The <code>dust2~</code> object generates random audio impulses (values between -1 and 1) at a rate determined by its density parameter. It functions as a pseudo-random number generator, allowing for reproducible sequences via a seed value. This object can also output multichannel signals, with input density controlling each channel.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>dust2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/fbsine2~/","title":"fbsine2~","text":"<p><code>fbsine2~</code> is a non-interpolating sound generator that produces signals based on a set of difference equations, inspired by SuperCollider's FBSineN UGEN. It can generate sine waves or complex chaotic signals through internal feedback. Users can control its behavior by setting frequency and various coefficients (<code>im</code>, <code>fb</code>, <code>a</code>, <code>c</code>), as well as initial state values.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>fbsine2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/fbsine~/","title":"fbsine~","text":"<p><code>fbsine~</code> is a sinusoidal oscillator that features phase modulation feedback, allowing its output to be fed back into its phase input for complex sound generation. It supports negative frequencies, phase modulation, phase synchronization, and multichannel audio, with an optional built-in mean average filter in its feedback loop to smooth chaotic outputs.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>fbsine~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/fm~/","title":"fm~","text":"<p><code>fm~</code> is a frequency modulation unit that uses one sinusoidal oscillator to modulate the frequency of another. The modulation frequency is determined by a ratio of the carrier frequency, and its depth is controlled by a modulation index. This object supports multichannel audio processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>fm~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/function~/","title":"function~","text":"<p>The <code>function~</code> object generates custom waveforms or functions from a list of points and periods, which are then read by a phase input (0-1). It supports various curve types for its segments, including linear, exponential, power, sine, and Hann, making it versatile for creating complex signal shapes or custom oscillators. It also supports multichannel operation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>function~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/gaussian~/","title":"gaussian~","text":"<p><code>gaussian~</code> is a gaussian oscillator that generates a bell-shaped waveform, with a 'width' parameter controlling its shape. It supports phase synchronization, phase modulation, and can be reset by an impulse signal. The object also features multichannel audio support and accepts frequency input in either Hertz or MIDI pitch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gaussian~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/gendyn.m~/","title":"gendyn.m~","text":"<p>The <code>gendyn.m~</code> object, a wrapper for <code>gendyn~</code> from the ELSE library, dynamically generates audio waveforms. It takes a MIDI center pitch and allows control over parameters like bandwidth, waveform points, and interpolation type. This object is useful for creating evolving or modulated audio signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gendyn.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/impulse/","title":"impulse","text":"<p>The <code>impulse</code> object functions as a control-rate oscillator that generates bangs at regular intervals, marking period transitions. Its rate can be set by frequency in Hz or by period in milliseconds, and its phase can be synchronized or reset. This object is useful for precise timing and rhythmic event generation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>impulse</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/impulse2~/","title":"impulse2~","text":"<p><code>impulse2~</code> is a two-sided impulse oscillator, a variant of <code>else/impulse~</code>, capable of accepting negative frequencies. It features inlets for pulse width, phase synchronization, and phase modulation, and also supports multichannel audio operation. This object is particularly useful for generating impulse signals and can be synced for applications like LFOs or hard sync techniques.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>impulse2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/impulse~/","title":"impulse~","text":"<p><code>impulse~</code> (or <code>imp~</code>) is an impulse oscillator that generates a signal when its phase cycles. It supports negative frequencies, phase synchronization via control or audio impulses, and phase modulation. This object can be used as a sound source or to periodically trigger other processes, with options for MIDI pitch input and multichannel operation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>impulse~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/lfnoise~/","title":"lfnoise~","text":"<p>The <code>lfnoise~</code> object generates band-limited noise, producing pseudo-random values between -1 and 1 at a specified frequency. It can be synchronized by an impulse to generate a new random value and supports seeding for reproducible noise sequences. This makes it suitable for creating various noise textures or controlling parameters.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lfnoise~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/metronome~/","title":"metronome~","text":"<p>The <code>metronome~</code> object generates audible metronome clicks, working in conjunction with the <code>metronome</code> object for timing. It can be configured with different click frequencies (low, mid, high) and offers multiple modes for click patterns. It outputs an audio signal representing the metronome clicks.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>metronome~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/noisi~/","title":"noisi~","text":"<p>The <code>noisi~</code> object generates bandlimited noise by drawing random numbers at a specified rate in Hz and interpolating between them. It outputs an audio signal and provides inlets for controlling its level and muting.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>noisi~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/oscnoise~/","title":"oscnoise~","text":"<p><code>oscnoise~</code> is an oscillator that generates a waveform from a white noise table, which can be updated by a bang. It supports negative frequencies, phase synchronization via control messages or audio impulses, and phase modulation, making it versatile for various synthesis and LFO applications. Its frequency input can be set to Hertz or MIDI pitch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>oscnoise~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/parabolic~/","title":"parabolic~","text":"<p>The <code>parabolic~</code> object is a parabolic oscillator that generates a waveform similar to a sinusoid but is not band-limited. It supports phase synchronization (including hard sync) and phase modulation, allowing for dynamic control over its waveform and interaction with other oscillators. It also features multichannel support and can accept frequency input in either Hertz or MIDI pitch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>parabolic~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/pimp/","title":"pimp","text":"<p>The <code>pimp</code> object is a control-rate utility that generates bangs at specified intervals or outputs a phase value (0-127). It can be configured by frequency (Hz) or period (milliseconds), and its internal phase can be synchronized or offset. This object is useful for precise timing and generating periodic control signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pimp</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/pimp~/","title":"pimp~","text":"<p><code>pimp~</code> is a signal generator combining <code>phasor~</code> and <code>else/imp~</code>, outputting both a phase signal (0-1) and an impulse at each cycle's start. It features phase synchronization, phase modulation, and configurable hard/soft sync, with support for Hertz or MIDI frequency input and multichannel operation. This object is ideal for driving processes with its phase output and triggering events with its impulses.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pimp~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/pm2~/","title":"pm2~","text":"<p><code>pm2~</code> is a 2-operator phase modulation (FM) synthesizer that uses sine wavetable oscillators. It offers extensive control over each operator's frequency ratio, detuning, panning, and volume, along with a modulation matrix for self-modulation and cross-modulation. The object also supports multichannel audio.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pm2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/pm4~/","title":"pm4~","text":"<p>The <code>pm4~</code> object is a 4-operator phase modulation (PM) synthesizer, utilizing sine wave oscillators. It offers extensive control over each operator's frequency ratio, detuning, panning, and volume, alongside a comprehensive modulation matrix for inter-operator modulation. Signal inputs allow dynamic control of individual operator levels, making it suitable for complex sound design and multichannel applications.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pm4~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/pm6~/","title":"pm6~","text":"<p><code>pm6~</code> is a 6-operator FM (frequency modulation, specifically phase modulation) synthesizer. Each operator is a sine wavetable oscillator that can modulate itself and others, allowing for complex sound generation. It provides extensive control over each operator's frequency ratio, detuning, panning, and volume, along with a comprehensive modulation matrix for inter-operator modulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pm6~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/pm~/","title":"pm~","text":"<p><code>pm~</code> is a basic phase modulation unit that uses a pair of sinusoidal oscillators, where one modulates the phase of the other. The modulator frequency is controlled as a ratio of the carrier frequency, and the object supports multichannel audio. It outputs the phase-modulated signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pm~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/pulse/","title":"pulse","text":"<p>The <code>pulse</code> object generates a control-rate pulse wave, similar to the audio-rate <code>pulse~</code> object. It can be configured with frequency, pulse width, and an initial phase offset, and its internal phase can be reset. The output can also be toggled, making it suitable for rhythmic control or event generation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pulse</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/pulse~/","title":"pulse~","text":"<p><code>pulse~</code> is a pulse train oscillator that generates an alternating 1 or 0 (on/off) signal. It offers control over pulse width, phase synchronization, and phase modulation, and supports multichannel audio. Frequencies can be set in Hertz or MIDI pitch, and the oscillator can be reset by an impulse signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pulse~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/pvtuner~/","title":"pvtuner~","text":"<p><code>pvtuner~</code> is a frequency-quantized oscillator bank resynthesis object that allows users to impose arbitrary tunings. It supports custom scales defined by lists of frequencies, can interpolate between different scales, and features transposition and a synthesis threshold. It can also set a base frequency using a MIDI note.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>pvtuner~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/randpulse/","title":"randpulse","text":"<p>The <code>randpulse</code> object is a random pulse oscillator that generates a signal with a running phase. It allows control over its frequency, pulse width, and initial phase, and supports phase synchronization. Users can also set a seed for the pseudo-random number generator and adjust its internal refresh rate.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>randpulse</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/randpulse2/","title":"randpulse2","text":"<p><code>randpulse2</code> is a random pulse train oscillator that generates a signal with a specified density. By default, it outputs gate values of '1', but can be set to output random gate values. Users can control its randomness by setting a seed.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>randpulse2</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/randpulse2~/","title":"randpulse2~","text":"<p><code>randpulse2~</code> is a random pulse train oscillator that generates pulses at random intervals, with its average frequency controlled by a 'density' parameter. It supports multichannel operation and can be set to a random gate value mode, producing values between -1 and 1, or default to 1.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>randpulse2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/randpulse~/","title":"randpulse~","text":"<p><code>randpulse~</code> is a random pulse train oscillator that generates a signal alternating between a random value and zero, with configurable pulse width. It supports multichannel operation, allowing independent control over frequency, pulse width, and phase synchronization for each channel. The object also features a seeding mechanism for its pseudo-random number generator, enabling reproducible random sequences.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>randpulse~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/saw2~/","title":"saw2~","text":"<p>The <code>saw2~</code> object is a versatile sawtooth wave oscillator that also supports negative frequencies and can function as a triangular oscillator. It features inlets for phase synchronization and phase modulation, allowing for complex waveform manipulation, and supports multichannel audio with frequency input in Hertz or MIDI pitch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>saw2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/saw~/","title":"saw~","text":"<p>The <code>saw~</code> object generates a sawtooth waveform, supporting negative frequencies, phase synchronization, and phase modulation. It can operate in hard or soft sync modes, accept frequency input in Hertz or MIDI pitch, and features multichannel capabilities for complex sound design.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>saw~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/sig.m~/","title":"sig.m~","text":"<p><code>sig.m~</code> is a signal generator. It produces an audio signal, likely a basic waveform, for use in sound synthesis or processing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sig.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/sine~/","title":"sine~","text":"<p><code>sine~</code> is a versatile sinusoidal oscillator that supports negative frequencies, phase synchronization, and phase modulation. It offers both hard and soft sync modes, and its frequency input can be set in Hertz or MIDI pitch. The object also features multichannel support, allowing for complex sound generation and modulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sine~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/square~/","title":"square~","text":"<p>The <code>square~</code> object is a square wave oscillator that generates audio signals with adjustable pulse width, phase synchronization, and phase modulation. It supports multichannel operation and can interpret frequency input in either Hertz or MIDI pitch, making it versatile for various synthesis and control applications.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>square~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/tabreader/","title":"tabreader","text":"<p><code>tabreader</code> is a Pure Data object that reads values from an array (table) using various interpolation methods, including spline, cosine, linear, and Hermite. It supports multichannel arrays and can operate in indexed or loop modes. When driven by a <code>phasor~</code>, <code>tabreader</code> functions as a low-frequency wavetable oscillator, making it suitable for waveform generation and sample playback.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>tabreader</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/trapezoid~/","title":"trapezoid~","text":"<p><code>trapezoid~</code> generates a trapezoidal waveform. It functions as a wavetable oscillator when fed a phase signal (0-1) into its first inlet, typically from a <code>phasor~</code>. The shape of the trapezoid can be dynamically adjusted via its second and third inlets, which control the ramp up and ramp down points, respectively, while <code>lo</code> and <code>hi</code> messages set the output amplitude range.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>trapezoid~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/triangle~/","title":"triangle~","text":"<p>The <code>triangle~</code> object generates a variable-duty triangular wavetable. It takes a phase input (typically from a <code>phasor~</code>) to produce a continuous waveform, and a second inlet controls the peak position (duty cycle) from 0 to 1, allowing it to morph between sawtooth and triangular shapes. Its output range can be adjusted using <code>lo</code> and <code>hi</code> messages.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>triangle~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/tri~/","title":"tri~","text":"<p><code>tri~</code> is a triangular wave oscillator that generates audio signals. It supports negative frequencies, phase synchronization, and phase modulation, making it versatile for both audio synthesis and LFO applications. The object also features multichannel support and can accept frequency input in either Hertz or MIDI pitch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>tri~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/vco.m~/","title":"vco.m~","text":"<p>The <code>vco.m~</code> object is a polyphonic voltage-controlled oscillator that generates various waveforms including sine, triangle, saw, variable saw, and square. It supports linear frequency modulation (FM), phase modulation (PM), pulse width modulation (PWM), and soft sync via control voltage (CV) inputs. It also accepts MIDI pitch input and handles multichannel signals for polyphonic operation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>vco.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/vsaw~/","title":"vsaw~","text":"<p><code>vsaw~</code> is a versatile oscillator generating variable sawtooth and triangular waveforms, controlled by a 'width' parameter. It supports phase synchronization and modulation, accepts negative frequencies, and can interpret frequency input in Hertz or MIDI pitch. This object also features multichannel audio output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>vsaw~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/wavetable~/","title":"wavetable~","text":"<p>The <code>wavetable~</code> object is an interpolating wavetable oscillator that reads waveforms from a specified array. It offers various interpolation methods, supports phase synchronization, phase modulation, and allows scanning through different slices of a wavetable. This object also features multichannel output and can interpret frequency input in MIDI pitch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>wavetable~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/wave~/","title":"wave~","text":"<p>The <code>wave~</code> object reads a wavetable (array) using a phase signal input (0-1), offering seven different interpolation modes including linear, cosine, cubic, spline, and Hermite. It supports multichannel audio playback (up to 64 channels) and allows setting start and end points within the array. For Hermite interpolation, it provides <code>interp_bias</code> and <code>interp_tension</code> parameters to fine-tune the curve shape.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>wave~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/white~/","title":"white~","text":"<p>The <code>white~</code> object generates white noise using a pseudo-random number generator algorithm. It supports multiple output channels and allows for reproducible noise sequences by setting a seed. Additionally, <code>white~</code> can operate in a \"clipped\" mode, where its output is constrained to -1 or 1, producing \"clip noise.\"</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>white~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/wt2d~/","title":"wt2d~","text":"<p>The <code>wt2d~</code> object is an interpolating wavetable oscillator that can scan through two dimensions (X and Y) of a sliced wavetable. It supports phase modulation and synchronization, allowing for techniques like hard and soft sync. It also features multichannel operation and various interpolation methods, and can accept frequency input in Hz or MIDI pitch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>wt2d~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/xmod2~/","title":"xmod2~","text":"<p>The <code>xmod2~</code> object is a variant of <code>xmod~</code> that performs frequency modulation (FM) using a distinct, \"cheap\" sine waveform. It generates two independent modulated audio signals, allowing control over the frequency and modulation index for each oscillator. This object is designed to produce chaotic and interesting sounds through its unique FM implementation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>xmod2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/oscillators/xmod~/","title":"xmod~","text":"<p><code>xmod~</code> performs cross-modulation between two sine oscillators, allowing for complex timbral changes. It supports both frequency modulation (default) and phase modulation. Users can control the frequencies and modulation indices of both oscillators.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>xmod~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/fluid.bufsinefeature/","title":"fluid.bufsinefeature","text":"<p>The <code>fluid.bufsinefeature</code> object performs interpolated sinusoidal peak tracking on the spectrum of audio data stored in a buffer. It analyzes the audio to extract peak frequencies and magnitudes, which can be ordered by frequency or magnitude. This object is useful for detailed spectral analysis and feature extraction from audio signals, supporting multichannel sources.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufsinefeature</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/fluid.bufsines/","title":"fluid.bufsines","text":"<p><code>fluid.bufsines</code> performs sinusoidal modeling on audio buffers, decomposing a source buffer into its sinusoidal and residual components. It allows users to control parameters such as minimum track length and detection threshold. The object then enables playback of either the extracted sinusoidal content or the remaining residual signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufsines</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/fluid.bufstft/","title":"fluid.bufstft","text":"<p>The <code>fluid.bufstft</code> object performs forward and inverse Short-Time Fourier Transforms (STFT) on single-channel audio buffers. It is used for spectral analysis, allowing for the extraction of magnitude and phase information, and subsequent resynthesis of audio signals. This object is fundamental for tasks like spectral processing, visualization (spectrograms), and various forms of spectral synthesis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufstft</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/fluid.buftransients/","title":"fluid.buftransients","text":"<p><code>fluid.buftransients</code> performs non-real-time sinusoidal modeling on audio buffers to detect and extract transients. It uses advanced algorithms to separate transient components from the original sound, allowing for detailed analysis and manipulation of percussive or attack elements, including multichannel sources.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.buftransients</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/fluid.sinefeature~/","title":"fluid.sinefeature~","text":"<p>The <code>fluid.sinefeature~</code> object calculates spectral difference features, primarily used by <code>fluid.onsetslice~</code>. It performs peak detection on audio signals, reporting peak frequencies and magnitudes based on configurable FFT settings, windowing, and detection thresholds. This object is crucial for analyzing the sinusoidal components of a sound.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.sinefeature~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/fluid.sines~/","title":"fluid.sines~","text":"<p>The <code>fluid.sines~</code> object performs sinusoidal modeling on an audio input, attempting to reconstruct the signal as a bank of sinusoids. It outputs both the resynthesized sinusoidal components and a residual signal. This object is useful for analyzing and manipulating the harmonic content of sounds, particularly those with stable or oscillating pitches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.sines~</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/freeze~/","title":"freeze~","text":"<p>The <code>freeze~</code> object is an abstraction built upon <code>sigmund~</code> for audio analysis and resynthesis. It captures and \"freezes\" the spectral content of an incoming audio signal, continuously outputting the frozen sound. Control messages and float values allow for freezing, refreezing, and unfreezing the audio.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>freeze~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/morph~/","title":"morph~","text":"<p>The <code>morph~</code> object performs a spectral crossfade between two input audio signals, <code>A</code> and <code>B</code>, by interpolating their amplitudes and phases. This allows for dynamic cross-synthesis and spectral morphing, creating smooth transitions or hybrid sounds based on control signals for the interpolation amount.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>morph~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/pileup~/","title":"pileup~","text":"<p>The <code>pileup~</code> object performs spectral persistence by maintaining amplitude and phase information in frequency bins. It can resynthesize audio using an oscillator bank, allowing for control over low/high frequencies, transposition, and a synthesis threshold. It also features options for spectral \"feedback\" and various persistence modes (amplitude/phase, amplitude only, inverse).</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>pileup~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/pvharm~/","title":"pvharm~","text":"<p><code>pvharm~</code> is an audio harmonizer that transposes an input signal into two pitches. It synthesizes the harmonized output using an internal oscillator bank, allowing control over the frequency range, the maximum number of active oscillators, and a synthesis threshold.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>pvharm~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/pvoc~/","title":"pvoc~","text":"<p>The <code>pvoc~</code> object performs phase vocoding, a technique for time-stretching or pitch-shifting audio by analyzing its frequency content. It allows users to control the synthesis by setting limits on the lowest and highest frequencies, as well as a synthesis threshold. The object can be initialized with custom FFT size and overlap factor arguments, defaulting to 1024 and 8 respectively.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>pvoc~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/pvwarpb~/","title":"pvwarpb~","text":"<p><code>pvwarpb~</code> is a spectral warper that applies an internal frequency warping function to audio signals. It allows users to update or flatten the warping function, and can also be modified interactively by drawing. This object is designed for creative manipulation of a sound's spectral content.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>pvwarpb~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/reanimator~/","title":"reanimator~","text":"<p>The <code>reanimator~</code> object performs audio texture mapping by analyzing a \"texture\" sound using spectral analysis (FFT) and then re-synthesizing audio based on a \"driver\" sound. It features an internal oscillator bank for synthesis, allowing for transposition and control over synthesis parameters like threshold and playback speed.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>reanimator~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/resent~/","title":"resent~","text":"<p><code>resent~</code> is a spectral sample buffer that captures an input audio signal for manipulation. It allows for detailed control over individual spectral bins, including their speeds, phases, and transposition, often utilizing an internal oscillator bank for resynthesis. The object also provides global speed control and options for randomizing spectral parameters.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>resent~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/residency~/","title":"residency~","text":"<p>The <code>residency~</code> object samples audio input into an internal buffer, primarily for spectral processing. It can resynthesize the buffered audio using an internal oscillator bank, with controls for transposition and synthesis threshold. Configuration includes buffer size in milliseconds, FFT size, and overlap factor.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>residency~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/partial_tracking/yl/","title":"yl","text":"<p>The <code>yl</code> object calculates auditory levels (YL) in decibels, defined as dB over a partial's frequency. It processes linear amplitude to determine these levels, providing a measure of perceived loudness. This object is useful for analyzing the intensity of individual partials within an audio signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>yl</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/patching/a2l/","title":"a2l","text":"<p>The <code>a2l</code> object converts any incoming message into a list, providing a unified data format for further processing. This utility is primarily used for control flow within Pure Data patches, allowing various message types to be handled consistently as lists. It is part of the zexy library and is marked as deprecated.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>a2l</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/patching/canvas.active/","title":"canvas.active","text":"<p>The <code>canvas.active</code> object reports the activity status of a Pure Data patch window. It outputs <code>1</code> when the window is active (front-most) and <code>0</code> when inactive. It can also query the activity of parent patches using a depth argument, or output the active window's name when the <code>-name</code> flag is used, which is useful for dynamic patching.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>canvas.active</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/patching/canvas.bounds/","title":"canvas.bounds","text":"<p>The <code>canvas.bounds</code> object outputs the bounding box coordinates of a Pure Data canvas. It can retrieve the bounds of the current canvas or a parent canvas by specifying a <code>depth</code> argument (defaulting to 0 for the current window). The object outputs these coordinates as a list.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>canvas.bounds</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/patching/canvas.edit/","title":"canvas.edit","text":"<p>The <code>canvas.edit</code> object reports the edit status of a Pure Data canvas. It outputs a float indicating whether the canvas is currently in edit mode. Users can query the status of the current canvas or a parent canvas by providing a <code>depth</code> argument.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>canvas.edit</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/patching/canvas.name/","title":"canvas.name","text":"<p>The <code>canvas.name</code> object outputs the symbolic name of the current Pure Data patch or its parent patches. It can be configured with a float to specify the depth level (e.g., 1 for parent, 2 for grandparent) or with the symbol <code>-env</code> to retrieve the name of the main patch window's environment. This object is particularly useful for dynamic patching, allowing other objects to receive messages based on the patch's name.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>canvas.name</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/patching/canvas.setname/","title":"canvas.setname","text":"<p>The <code>canvas.setname</code> object assigns a symbolic name to a Pure Data canvas, allowing it to receive messages. It extends the functionality of <code>namecanvas</code> by enabling the naming of parent canvases at specified depth levels. An optional third argument can switch between naming subpatches or the main abstraction owner.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>canvas.setname</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/patching/canvas.zoom/","title":"canvas.zoom","text":"<p>The <code>canvas.zoom</code> object reports the current zoom status of a Pure Data canvas. It outputs its status at loadtime and can be triggered by a <code>bang</code> to report again. Optionally, a <code>float</code> argument can specify a depth to query the zoom status of parent canvases.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>canvas.zoom</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/patching/gemargs/","title":"gemargs","text":"<p>The <code>gemargs</code> object retrieves arguments and initialization messages passed to its parent patch, enabling consistent object initialization patterns within GEM abstractions. It distinguishes between regular arguments, output as lists, and initialization messages, which retain their selector. This allows for flexible parameter passing and setup in complex Pure Data patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemargs</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/patching/loadbanger/","title":"loadbanger","text":"<p>The <code>loadbanger</code> (or <code>lb</code>) object sends bang messages when a patch loads, when clicked, or upon receiving any message. It supports both \"load\" and \"init\" bang types, with \"init\" bangs being particularly useful for dynamic patching in abstractions by triggering before connections are established. The object's number of outputs can be configured via an argument.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>loadbanger</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/patching/presets.m/","title":"presets.m","text":"<p>The <code>presets.m</code> object enables saving and recalling parameter states within a Pure Data patch. When placed last in a patch, it automatically saves and restores parameters of \"MERDA modules\" upon reopening the patch. Users can select a preset number via radio buttons and trigger a bang to save the current state, with presets stored directly within the patch file.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>presets.m</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/patching/properties/","title":"properties","text":"<p>The <code>properties</code> object in Pure Data is used within abstractions or subpatches. It sends a bang when placed in an abstraction (its default mode) or when its parent patch requests its properties. This allows for dynamic interaction and control flow based on the containing patch's state.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>properties</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/patching/uzi/","title":"uzi","text":"<p>The <code>uzi</code> object generates a specified number of bangs and a corresponding counter value for each bang, executing its loop as fast as possible. It provides outlets for each bang, the current counter value, and a final bang upon loop completion. <code>uzi</code> is useful for iterating through sequences, such as array indices, and can be paused, resumed, or reset via messages.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>uzi</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/iAmbient3D/","title":"iAmbient3D","text":"<p>The <code>iAmbient3D</code> object simulates ambient interactions within a 3D space. It applies various forces, including constant, random, and damping, to interacting \"masses\" and defines spatial boundaries for their movement. This object is designed to model environmental influences on objects in a 3D simulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>iAmbient3D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/iCircle2D/","title":"iCircle2D","text":"<p>The <code>iCircle2D</code> object simulates circular interactions in 2D space, applying various forces and displacements to an interacting mass. It defines a circular region with adjustable center and radii, influencing the mass with parameters like constant normal/tangential forces, rigidity, damping, and gravitational effects. This object is designed for physical modeling and interaction simulations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>iCircle2D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/iCircle3D/","title":"iCircle3D","text":"<p>The <code>iCircle3D</code> object simulates the interaction of a named mass with a 3D circular plane. It applies forces, damping, and displacement to the mass based on its position relative to the circle, with configurable parameters for the circle's geometry, interaction radius, and various force characteristics. This object is designed for physical modeling scenarios involving circular constraints.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>iCircle3D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/iCylinder3D/","title":"iCylinder3D","text":"<p>The <code>iCylinder3D</code> object simulates the interaction between a 'mass' and a 3D cylinder. It allows users to define the cylinder's geometry (center, orientation, radius, height) and configure various physical interaction properties such as normal and tangential forces, rigidity, damping, and displacement. These properties can be constant or proportional to distance, enabling detailed physical modeling within a 3D space.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>iCylinder3D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/iLine2D/","title":"iLine2D","text":"<p>The <code>iLine2D</code> object simulates the interaction of a named \"mass\" with a defined 2D line. It applies normal and tangential forces, rigidity, and damping based on the mass's depth of interaction with the line. This object is useful for creating physical modeling simulations where objects interact with linear boundaries.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>iLine2D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/iPlane3D/","title":"iPlane3D","text":"<p>The <code>iPlane3D</code> object simulates the physical interaction between a 3D plane and a specified mass, such as a circle. It calculates forces and displacements based on parameters like the plane's position, orientation, normal force, rigidity, and damping. This object is designed for simulating physical interactions in a 3D space.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>iPlane3D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/iSeg2D/","title":"iSeg2D","text":"<p>The <code>iSeg2D</code> object simulates the physical interaction of a mass with a 2D segment. It defines the segment using two points and allows for configurable parameters such as maximum interaction depth, constant normal and tangential forces, rigidity, damping, and displacement. This object is designed for detailed physical interaction simulations, building upon the functionality of <code>iLine2D</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>iSeg2D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/link2D/","title":"link2D","text":"<p>The <code>link2D</code> object simulates a physical link between two masses in a 2D space. It calculates and outputs forces to be applied to these masses based on parameters like length, rigidity, and damping, as well as minimum and maximum link sizes. This object is useful for creating simple physical simulations within Pure Data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>link2D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/link3D/","title":"link3D","text":"<p>The <code>link3D</code> object simulates a physical link between two masses in a 3D environment. It calculates and outputs forces based on the link's physical properties such as length, rigidity, and damping, and the positions of the connected masses. It allows for dynamic adjustments to these properties and can be used to apply forces to the masses.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>link3D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/mass/","title":"mass","text":"<p>The <code>mass</code> object simulates a physical mass, calculating its position, velocity, and applied force based on incoming forces and its defined weight. It allows setting minimum and maximum position limits and can be reset. This object is primarily used for physical modeling within Pure Data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>mass</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/mass2D/","title":"mass2D","text":"<p>The <code>mass2D</code> object simulates a 2D mass, calculating its position and velocity based on applied forces, weight, and damping. It allows setting initial positions, boundary limits (Xmin, Xmax, Ymin, Ymax), and can reset its state or stop/start movement. This object is useful for creating interactive physical simulations within Pure Data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>mass2D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/newWave/","title":"newWave","text":"<p>The <code>newWave</code> object renders a dynamic, waving square using a mass-spring system, acting as a geometric object within GEM. Users can control the square's size, wave height, and choose from various predefined wave-forms or apply forces and noise to simulate complex wave behaviors. It outputs a <code>gemlist</code> for further graphical manipulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>newWave</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/pmpd/","title":"pmpd","text":"<p>The <code>pmpd</code> object in Pure Data implements a mass-spring-damper physical model. It allows users to create and manipulate masses and links (springs/dampers) within a simulated environment. Users can define properties like mass, rigidity, and damping, apply forces, and retrieve real-time data on positions, speeds, and forces of the model's components.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>pmpd</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/pmpd2d~/","title":"pmpd2d~","text":"<p>The <code>pmpd2d~</code> object performs 2D particle-based physical modeling for audio synthesis. It allows users to create and connect masses with various properties like weight, position, and damping, forming a physical model. The object can receive real-time forces and position controls, and output mass positions and velocities, enabling the creation of complex, physically-simulated sounds.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>pmpd2d~</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/pmpd3d/","title":"pmpd3d","text":"<p>The <code>pmpd3d</code> object implements 3D physical models based on a mass-spring-damper system. It allows users to define and manipulate masses and links, applying forces and setting parameters to simulate physical interactions. The object outputs model parameters and can be integrated with GEM for visual rendering of the 3D simulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>pmpd3d</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/pmpd3d~/","title":"pmpd3d~","text":"<p>The <code>pmpd3d~</code> object is a 3D particle-based physical modeling engine designed for audio synthesis. It enables users to construct and interact with a system of masses and links, defining their physical properties such as weight, position, rigidity, and damping. The object supports real-time control through messages and audio signals, allowing for dynamic manipulation of the physical model to generate sound.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>pmpd3d~</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/pmpd~/","title":"pmpd~","text":"<p>The <code>pmpd~</code> object is a 1D particle-based physical modeling external for audio synthesis in Pure Data. It allows users to construct physical systems by creating masses and connecting them with links, then apply forces or control positions at audio rate. The object outputs position or velocity data from the simulated masses, enabling the creation of dynamic and interactive sounds.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>pmpd~</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/tLink2D/","title":"tLink2D","text":"<p>The <code>tLink2D</code> object calculates properties of a link connecting two masses in a 2D physical simulation. It takes the 2D positions of two masses as input and outputs their distance, the link's elongation speed, its orientation, and the position of its center. This object is designed to compute and output forces, making it suitable for building interactive physical models.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>tLink2D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/tLink3D/","title":"tLink3D","text":"<p>The <code>tLink3D</code> object in Pure Data is designed for 3D physical modeling, simulating a link between two masses. It computes and outputs forces based on their interaction, providing data such as distance, elongation speed, center position, and orientation of the link. Additionally, it can visualize the 3D link within the Gem graphical environment.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>tLink3D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/physical_modeling/tPlane3D/","title":"tPlane3D","text":"<p>The <code>tPlane3D</code> object simulates interactions involving a 3D plane. It defines a plane in 3D space using an orientation vector and a point, and can specify a maximum interaction depth. This object is designed to interact with <code>mass</code> objects, likely for collision detection or other physical simulations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pmpd</code> and install it. Then create an object with <code>declare -lib pmpd -path pmpd</code>. Finally, use <code>tPlane3D</code> or any other object from <code>pmpd</code>.</p></li> <li> Library developed mainly by Cyrille Henry.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Physical modeling for pure data (PMPD) and real-time interaction with an audio synthesis by Cyrille Henry</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/procedural/clock/","title":"clock","text":"<p>The <code>clock</code> object sends bangs at a regular tempo, acting as a 'main' clock or a 'synced' clock. A main clock controls other synced clocks with a relative tempo, allowing for synchronized timing across a patch. It can be set to a specific BPM or a multiplier for synced clocks, and can also be synced to a <code>metronome</code> object.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>clock</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/procedural/drip/","title":"drip","text":"<p>The <code>drip</code> object unfolds a package (list) into a sequence of individual elements, outputting them one by one with a configurable delay in milliseconds. It functions like a medical drip, allowing control over the \"drop speed.\" Scheduling can be enabled or disabled, with <code>n=0</code> enabling scheduling and negative values disabling it.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>drip</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/procedural/eqdiv/","title":"eqdiv","text":"<p>The <code>eqdiv</code> object generates equal temperament scales. It takes the desired number of equal divisions and an interval ratio (e.g., 2 for an octave) as inputs. The output is a list of ratios or cents representing the scale, which can be toggled using a <code>-ratio</code> flag.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>eqdiv</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/procedural/henon~/","title":"henon~","text":"<p>The <code>henon~</code> object generates a chaotic audio signal based on the H\u00e9non map difference equation. It allows control over the output frequency and the <code>a</code> and <code>b</code> parameters of the H\u00e9non map, as well as initial conditions for the chaotic sequence. This object is useful for creating complex, non-repeating audio textures.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>henon~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/procedural/l.attrfilter/","title":"l.attrfilter","text":"<p>The <code>l.attrfilter</code> object in Pure Data (using <code>pdlua</code>) filters elements from an SVG file loaded with <code>l.readsvg</code> based on attributes such as stroke, fill, or ID. For example, <code>l.attrfilter fill #ff0000</code> outputs only the elements with red fill (#ff0000). It allows selective processing and visualization of SVG content in Pd.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>neimog</code> and install it. Then create an object with <code>declare -lib neimog -path neimog</code>. Finally, use <code>l.attrfilter</code> or any other object from <code>neimog</code>.</p></li> <li> Library developed mainly by Charles K. Neimog.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Music Similar <ul></ul> Comments Contributors"},{"location":"objects/procedural/l.readsvg/","title":"l.readsvg","text":"<p><code>l.readsvg</code> is a <code>pdlua</code> object designed to read SVG files created or edited in Inkscape. It belongs to the <code>pdlua</code> project pd-upic, which\u2014as the name suggests\u2014is related to the UPIC system developed by Iannis Xenakis.  </p> <p>The object can read and play drawings, provided they follow specific rules explained in this guide.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>neimog</code> and install it. Then create an object with <code>declare -lib neimog -path neimog</code>. Finally, use <code>l.readsvg</code> or any other object from <code>neimog</code>.</p></li> <li> Library developed mainly by Charles K. Neimog.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Music Similar <ul></ul> Comments Contributors"},{"location":"objects/procedural/loop/","title":"loop","text":"<p>The <code>loop</code> object in Pure Data functions as a versatile loop counter, capable of iterating through a range of numbers or generating a specified number of bangs. It can be configured with start, end, and step values, and supports pausing and resuming its iteration. This object is particularly useful for tasks like sweeping through arrays or creating controlled, rapid sequences of events.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>loop</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/procedural/lorenz~/","title":"lorenz~","text":"<p>The <code>lorenz~</code> object generates a chaotic audio signal based on the Lorenz strange attractor, a 3D mathematical model. It outputs the 'x' dimension of this system as a signal. Users can influence the chaotic behavior by setting coefficients (<code>s</code>, <code>r</code>, <code>b</code>, <code>h</code>) and initial state values for <code>x</code>, <code>y</code>, and <code>z</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>lorenz~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/procedural/niagara/","title":"niagara","text":"<p>The <code>niagara</code> object divides an incoming message or list into two sub-packages. It takes any message type in its first inlet and a float in its second inlet to determine the division point. The two resulting sub-packages are then sent out its two outlets.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>niagara</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/procedural/part_targetsize/","title":"part_targetsize","text":"<p>The <code>part_targetsize</code> object is a GEM particle object that dynamically adjusts the size of particles over time. It modifies particle size by a specified scale factor each frame, with default values for initial size (1) and scale (0.05).</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>part_targetsize</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/procedural/perlin~/","title":"perlin~","text":"<p><code>perlin~</code> generates 1-dimensional Perlin noise, a type of gradient noise, producing smoothened functions based on a specified frequency. It uses <code>white~</code> as its noise source and allows for seeding to reproduce or synchronize noise sequences.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>perlin~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/procedural/polymetro~/","title":"polymetro~","text":"<p><code>polymetro~</code> is a signal-rate polyrhythmic metronome that generates impulses for a base rhythm and a relative rhythm. It allows setting tempo in BPM, starting/stopping, syncing, and defining polyrhythmic ratios using float or fractional multipliers. This object is ideal for creating complex rhythmic patterns and driving other signal-rate processes.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>polymetro~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/procedural/repeat/","title":"repeat","text":"<p>The <code>repeat</code> object in Pure Data outputs any incoming message a specified number of times. It can be initialized with a creation argument for the number of repetitions or dynamically controlled via its second inlet. This versatile object can repeat bangs, lists, or any other message type.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>repeat</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/python/py4pd/","title":"py4pd","text":"<p>py4pd allows write PureData Objects using Python instead of C/C++. The main goal is to allow easy IA, Scores, Graphics, and bring to Pd possibilities with array, list and others types. With Python, you can: * Parse svg/draws as scores; * OpenMusic functions in libraries like <code>om_py</code>, <code>music21</code>, <code>neoscore</code>, and others; * Sound analisys with <code>magenta</code>, <code>librosa</code>, and <code>pyAudioAnalaysis</code>;</p>"},{"location":"objects/python/py4pd/#wiki-how-to-install-and-use","title":"Wiki | How to install and Use","text":"<ul> <li>Go to Docs (outdated for now), check <code>Sources/py4pd</code> folder for examples.</li> </ul>"},{"location":"objects/python/py4pd/#new-pd-object-using-python","title":"New Pd Object using PythonVideosMusicSimilarCommentsContributors","text":"<pre><code>import puredata as pd\nimport os\n\nclass pymetro(pd.NewObject):\n    name: str = \"pymetro\"\n\n    def __init__(self, args):\n        self.inlets = 2\n        self.outlets = 1\n        self.toggle = False\n        if len(args) &gt; 0:\n            self.time = float(args[0])\n        else:\n            self.time = 1000\n        self.metro = self.new_clock(self.tick)\n        self.args = args\n        pd.post(\"here\", os.environ[\"PY4PD_PATH\"])\n\n    def in_2_float(self, f: float):\n        self.time = f\n\n    def in_1_float(self, f: float):\n        if f:\n            self.toggle = True\n            self.tick()\n        else:\n            self.metro.unset()\n            self.toggle = False\n\n    def in_1_reload(self, args: list):\n        self.reload()\n\n    def tick(self):\n        if self.toggle:\n            self.metro.delay(self.time)\n        self.out(0, pd.SYMBOL, \"test238\")\n</code></pre> <ul> <li> Download via Deken.</li> <li> Library developed mainly by Charles K. Neimog.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> <ul></ul>"},{"location":"objects/reverb/allpass.rev~/","title":"allpass.rev~","text":"<p>The <code>allpass.rev~</code> object implements an all-pass filter, which passes all frequencies while altering their phase response. It functions as a reverberator and a delay, with configurable parameters for delay time and decay time (t60) or a gain coefficient.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>allpass.rev~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/reverb/comb.rev~/","title":"comb.rev~","text":"<p>The <code>comb.rev~</code> object implements a general-purpose comb filter, which can be used to create delay, comb filtering, or reverberation effects. It processes an input signal <code>x[n]</code> to produce an output <code>y[n]</code> based on a configurable delay time <code>D</code> and gain coefficients <code>a</code>, <code>b</code>, and <code>c</code> for input, feedforward, and feedback paths respectively. The object supports dynamic control of delay time and coefficients via signal or float inputs.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>comb.rev~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/reverb/convolve~/","title":"convolve~","text":"<p><code>convolve~</code> is a partitioned impulse response (IR) convolution external for Pure Data. The only creation argument is the partition size, which also determines the amount of delay between the dry and wet signal (i.e., pre-delay). Partition size must be a multiple of Pd's default block size: 64 samples (1.4512ms @ 44100Hz).</p> <ul> <li> Download via Deken.</li> <li> Library developed mainly by William Brent.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/reverb/conv~/","title":"conv~","text":"<p>The <code>conv~</code> object performs partitioned convolution, taking an input signal and an impulse response table. It outputs the convolved signal, allowing for effects like reverb or advanced filtering. Users can adjust the partition size, which impacts latency and computational cost.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>conv~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/reverb/echo.rev~/","title":"echo.rev~","text":"<p>The <code>echo.rev~</code> object is an echo/reverb abstraction designed to create early reflections or standalone echo effects. It operates with feedforward lines and takes a signal input to produce an echo/reverb output. Users can control the number of echo stages (4-20, default 8) and the room size (0-1, default 0) via its arguments or inlets.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>echo.rev~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/reverb/fbdelay~/","title":"fbdelay~","text":"<p><code>fbdelay~</code> implements a simple feedback delay line, useful for creating delay effects, reverberation, and comb filtering. It allows control over delay time and feedback, which can be set via a \"t60\" decay time (time for impulse to fall 60dB) or directly as a gain coefficient. The object supports interpolation for sub-sample delay times and features options to set maximum delay size, clear the buffer, and freeze the delay line.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>fbdelay~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/reverb/fdn.rev~/","title":"fdn.rev~","text":"<p>The <code>fdn.rev~</code> object is a feedback delay network (FDN) reverberator designed for creating late reflections or reverb tails. It uses a householder reflection matrix, allowing control over reverberation decay time (t60) and high-frequency damping. Users can also configure the delay line matrix size and spacing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>fdn.rev~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/reverb/free.rev~/","title":"free.rev~","text":"<p>The <code>free.rev~</code> object is a stereo reverb abstraction based on the 'freeverb' algorithm, implementing a Schroeder/Moorer reverb model using comb and allpass filters. It allows control over decay time, high-frequency damping, stereo width, and dry/wet mix. Use <code>decay</code> to set the reverb's length, <code>damp</code> to filter high frequencies, and <code>width</code> to adjust the stereo image.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>free.rev~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/reverb/giga.rev~/","title":"giga.rev~","text":"<p><code>giga.rev~</code> is a stereo reverb unit based on the Gigaverb algorithm, designed to simulate various acoustic spaces. It takes a mono audio input and produces a stereo output, allowing control over parameters such as room size, decay time, high-frequency damping, and the levels of early and late reflections. The object also includes presets for different environments and a 'clear' message to reset its internal delay lines.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>giga.rev~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/reverb/mono.rev~/","title":"mono.rev~","text":"<p><code>mono.rev~</code> is a reverb abstraction that takes a mono audio input and produces a stereo output. It is based on a feedback delay network, similar to <code>rev3~</code>, but includes a unique \"room size\" parameter. This object allows control over decay time, high-frequency damping, room size, and wet/dry mix for sound spatialization.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>mono.rev~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/reverb/multiconvolve~/","title":"multiconvolve~","text":"<p>The <code>multiconvolve~</code> object performs real-time convolution with configurable zero- or low-latency modes. It allows users to load and clear impulse responses (IRs) and specify a fixed IR length for memory allocation, making it suitable for dynamic audio effects like reverb or filtering.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>piro</code> and install it. Then create an object with <code>declare -lib piro -path piro</code>. Finally, use <code>multiconvolve~</code> or any other object from <code>piro</code>.</p></li> <li> Library developed mainly by Marco Matteo Markidis.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/reverb/plate.rev.m~/","title":"plate.rev.m~","text":"<p><code>plate.rev.m~</code> is an audio object that provides plate reverberation. It acts as a wrapper for the <code>plate.rev~</code> object from the ELSE library, offering a simple, pedal-like reverb effect without control voltage (CV) inputs.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>plate.rev.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/reverb/plate.rev~/","title":"plate.rev~","text":"<p><code>plate.rev~</code> is a stereo plate reverb abstraction based on Dattorro's model, designed for adding reverberation to mono audio signals. It provides control over parameters such as pre-delay, filter cutoff, high-frequency damping, room size, and wet/dry mix. This object is suitable for simulating realistic or stylized reverberant spaces.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>plate.rev~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/reverb/stereo.rev~/","title":"stereo.rev~","text":"<p>The <code>stereo.rev~</code> object is a stereo input/output reverb abstraction, designed to simulate reverberation with two independent channels. It allows control over decay time, high-frequency damping, room size, and wet/dry mix, providing a versatile tool for spatializing audio.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>stereo.rev~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/abs.pd~/","title":"abs.pd~","text":"<p>The <code>abs.pd~</code> object loads a Pure Data patch as a subprocess, similar to <code>pd~</code>, providing 2 audio inputs and 2 audio outputs. It enhances subprocess functionality by enabling MIDI input from the parent patch and allowing users to open the subprocess patch directly for editing. This experimental object simplifies subprocess management.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>abs.pd~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/bondo/","title":"bondo","text":"<p>The <code>bondo</code> object synchronizes and routes messages in Pure Data. It can parse multi-element messages across its outlets or output them as a single message, and it can also delay and group messages received within a specified time interval. This allows for controlled message flow and synchronization within a patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>bondo</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/bucket/","title":"bucket","text":"<p>The <code>bucket</code> object acts as a data shifter, passing incoming float values sequentially from one outlet to the next in a rotational pattern. It supports left-to-right or right-to-left shifting, and offers control over immediate output or delayed propagation, managed by messages like <code>freeze</code>, <code>thaw</code>, <code>bang</code>, <code>set</code>, and <code>roll</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>bucket</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/chance~/","title":"chance~","text":"<p>The <code>chance~</code> object acts as a probabilistic router for impulses, directing an incoming bang to one of its outlets based on user-defined probability weights. These probabilities can be set as percentages or a histogram, and the object utilizes a pseudo-random number generator, allowing for reproducible sequences via a seed value.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>chance~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/cycle/","title":"cycle","text":"<p>The <code>cycle</code> object distributes incoming messages to its outlets in a round-robin fashion. Each message is sent to the next available outlet, wrapping around to the first after the last has been reached. It supports an \"event sensitive mode\" where new events restart the output from the leftmost outlet, useful for scheduling distinct events.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>cycle</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/decode/","title":"decode","text":"<p>The <code>decode</code> object takes an integer input and activates the corresponding output (0-indexed) by sending a <code>1</code>, while all other outputs receive <code>0</code>. It also provides master and submaster control inlets to globally enable or disable its output behavior, allowing for flexible routing based on numerical input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>decode</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/demultiplex/","title":"demultiplex","text":"<p>The <code>demultiplex</code> object routes data from its left inlet to one of its outlets. The specific outlet is determined by a number received in the right inlet, with outlets indexed from 0 to (n-1). The number of available outlets is set by the arguments provided during the object's creation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>demultiplex</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/demultiplex~/","title":"demultiplex~","text":"<p>The <code>demultiplex~</code> (or <code>demux~</code>) object takes a single audio or control signal and routes it to one of its multiple outlets. The number of outlets is determined by the creation arguments, and a control message selects which specific outlet receives the input signal. This object is primarily used for signal routing and distribution.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>demultiplex~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/demux/","title":"demux","text":"<p>The <code>demux</code> object acts as a demultiplexer, routing data from its left inlet to one of its multiple outlets. The specific outlet is selected by a value received in the right inlet, with outlets numbered from 0. The number of outlets is determined by the arguments provided during the object's creation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>demux</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/demux~/","title":"demux~","text":"<p>The <code>demux~</code> object acts as a signal demultiplexer, routing a single audio signal from its inlet to one of its multiple outlets. The number of available outlets is determined by the arguments provided when the object is created. This allows for dynamic selection of a destination for an audio stream.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>demux~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/dispatch/","title":"dispatch","text":"<p>The <code>dispatch</code> object takes an incoming list and sends each of its elements to a specified address, processing them from left to right. It can also re-send the last processed input upon receiving a <code>bang</code>. This object is useful for routing individual elements of a list to different destinations within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>dispatch</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/forward/","title":"forward","text":"<p>The <code>forward</code> object in Pure Data is designed to send messages to various destinations, allowing the target to change dynamically with each message. It functions similarly to the <code>send</code> object but offers more flexibility in directing messages, akin to using semicolons within a message box. However, it is considered redundant and deprecated, with direct use of <code>send</code> or message boxes being the recommended approach.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>forward</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/funnel/","title":"funnel","text":"<p>The <code>funnel</code> object collects data from multiple inlets and outputs it through a single outlet, prepending an inlet number to each message. This allows for routing messages based on their origin using objects like <code>route</code> or <code>cyclone/spray</code>. It can also be configured with an offset for inlet numbering and used to store values in data structures.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>funnel</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/gate/","title":"gate","text":"<p>The <code>gate</code> object routes messages from its second inlet to one of its 'n' specified outlets, or to no outlet if set to 0. The first inlet determines which outlet is open, allowing for dynamic control over message flow. It supports 1 to 100 outlets, with 1 being the default.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>gate</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/gate~/","title":"gate~","text":"<p>The <code>gate~</code> object routes an input signal from its second inlet to one of its 'n' specified outlets, or to none of them. The target outlet is determined by a control signal or float in the first inlet, allowing for sample-accurate routing. If no outlet is selected, it outputs zero values.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>gate~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/gemreceive/","title":"gemreceive","text":"<p><code>gemreceive</code> is an ordered message receiver for the GEM (Graphics Environment for Multimedia) environment. It functions similarly to <code>receive</code> but includes an additional priority argument, allowing messages to be processed in a specific order. A higher priority number means the object will receive its message later, which is useful for managing drawing order in graphics.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>gemreceive</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/get~/","title":"get~","text":"<p>The <code>get~</code> object extracts or reorders channels from a multichannel signal connection. It uses 1-based indexing for channels and can accept lists to arbitrarily remap the signal flow.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>get~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/hot/","title":"hot","text":"<p>The <code>hot</code> object in Pure Data serves as a versatile message router and temporary storage unit. It passes incoming messages from any inlet directly to its corresponding outlet. Additionally, <code>hot</code> can store the last received values, allowing them to be outputted on demand via a <code>bang</code> message or updated without output using a <code>set</code> message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>hot</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/matrix~/","title":"matrix~","text":"<p>The <code>matrix~</code> object functions as a signal routing and mixing matrix, enabling dynamic redirection of audio signals from multiple inlets to various outlets. It supports both a \"binary\" mode for simple on/off connections and a \"non-binary\" mode that allows for precise gain control and ramp times, facilitating smooth transitions and crossfades. This object is essential for complex audio signal flow management within a patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>matrix~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/mix2~/","title":"mix2~","text":"<p><code>mix2~</code> is a 2-channel audio mixer abstraction that provides gain and panning control for two input signals. It features three selectable scaling modes (quartic, dB, or linear) for its internal gain sliders, allowing for flexible control over signal levels. The object also supports multichannel input and allows external control of gain, pan, and scaling mode.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>mix2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/mix4~/","title":"mix4~","text":"<p>The <code>mix4~</code> object is a convenient 4-channel audio mixer abstraction for Pure Data, offering independent gain and panning controls for each input. It supports three scaling modes for its internal gain sliders\u2014quartic (default), decibel (dB), and linear\u2014which can be dynamically selected. This object is designed to simplify multichannel audio signal mixing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>mix4~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/mtx.mc~/","title":"mtx.mc~","text":"<p><code>mtx.mc~</code> is a Pure Data object designed for routing and mixing multichannel audio signals. It allows users to direct a specific channel from a multichannel input to one or more channels of a multichannel output, with adjustable gain and a configurable ramp time for smooth transitions. It's ideal for dynamic re-patching of audio streams within a multichannel setup.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>mtx.mc~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/mtx~/","title":"mtx~","text":"<p>The <code>mtx~</code> object functions as an audio signal matrix mixer, routing signals from multiple inlets to multiple outlets. It allows for dynamic control over connections and gain between any inlet-outlet pair, summing signals when multiple inlets route to the same outlet. This object is useful for creating flexible audio routing and mixing configurations with controllable ramp times.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>mtx~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/multiplex/","title":"multiplex","text":"<p>The <code>multiplex</code> object routes data from one of its multiple inlets to a single outlet. The rightmost inlet determines which input is selected, using a 0-based index. This allows for dynamic switching between various data streams.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>multiplex</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/multiplex~/","title":"multiplex~","text":"<p>The <code>multiplex~</code> object functions as a signal multiplexer, allowing you to select one signal from multiple inputs to be passed to a single output. The number of signal inlets is dynamically set by the number of creation arguments, and a float value in the first inlet determines which signal is routed.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>multiplex~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/multireceive/","title":"multireceive","text":"<p>The <code>multireceive</code> object allows a single outlet to receive messages from multiple <code>send</code> objects. It acts as a central point for collecting data from various sources, which can be dynamically configured via its inlet. This simplifies patch wiring by consolidating multiple <code>receive</code> connections into one.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>multireceive</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/mux/","title":"mux","text":"<p>The <code>mux</code> object functions as a multiplexer, directing the signal from one of its multiple input inlets to its single outlet. The specific input inlet to be routed is determined by a float value received in the rightmost inlet, with inlets numbered starting from 0. The total number of input inlets is configured by the arguments provided during the object's creation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>mux</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/mux~/","title":"mux~","text":"<p>The <code>mux~</code> object acts as a signal multiplexer, routing one of its multiple signal inlets to a single signal outlet. The number of signal inlets is determined by the number of arguments provided when creating the object. A float value sent to the first inlet selects which of the subsequent signal inlets will be passed through.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>mux~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/nmess/","title":"nmess","text":"<p>The <code>nmess</code> object acts as a message gate, allowing a predefined number of messages (<code>n</code>) to pass through before closing. It can be reset with a <code>bang</code> message, and the number of allowed messages (<code>n</code>) can be set via a float. It also provides outputs to signal when the gate is opened or closed.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>nmess</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/nop~/","title":"nop~","text":"<p><code>nop~</code> is a Pure Data object that performs no operation, simply passing its signal input directly to its signal output. Its primary purpose is to help manage and organize signal connections within a patch, acting as a visual placeholder or routing point without altering the audio signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>nop~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/order/","title":"order","text":"<p>The <code>order</code> object splits an incoming list into smaller, successive lists of a specified size, prepending each sub-list with an ordered index. This functionality is particularly useful for distributing data to multiple instances of an object managed by <code>[clone]</code>, ensuring each instance receives its corresponding indexed data. It gracefully handles input lists that are shorter than the specified split size.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>order</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/osc.route/","title":"osc.route","text":"<p><code>osc.route</code> is a Pure Data object designed to route Open Sound Control (OSC) messages based on their address patterns. Similar to the <code>route</code> object, it directs incoming messages to specific outlets, but it specifically handles OSC's hierarchical address structure, including wildcards and character matching. This allows for flexible and precise dispatching of OSC data within a patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>osc.route</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/out.mc~/","title":"out.mc~","text":"<p>The <code>out.mc~</code> object provides click-free control over multichannel audio output, routing signals to specified <code>dac~</code> channels. It offers dynamic control over DSP engine state, mute/unmute, and gain with selectable scaling modes (quartic, dB, linear), including a configurable ramp time for smooth transitions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>out.mc~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/out4~/","title":"out4~","text":"<p><code>out4~</code> is a quadraphonic audio output abstraction for Pure Data, providing click-free control over <code>dac~</code> output, including DSP on/off, mute, and gain. It features a configurable slider with quartic, dB, or linear scaling modes, and allows setting a ramp time and maximum gain for its output. This object simplifies managing multi-channel audio output and levels.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>out4~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/pan2~/","title":"pan2~","text":"<p>The <code>pan2~</code> object performs equal power (sin/cos) stereo panning. It takes an audio signal and a pan value (from -1 for left to 1 for right) as inputs, outputting the panned signal to left and right channels. An optional <code>-mc</code> flag allows for multichannel output of both stereo signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pan2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/pdlink~/","title":"pdlink~","text":"<p>The <code>pdlink~</code> object facilitates sending and receiving audio streams between different Pure Data instances, including various versions, platforms, and forks like PlugData. It operates over a network, simplifying inter-instance audio communication without requiring complex network configuration. Similar to <code>send~</code> and <code>receive~</code>, it uses a symbol address for routing audio, and can also communicate with <code>pd~</code> subprocesses.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pdlink~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/pick~/","title":"pick~","text":"<p>The <code>pick~</code> object selects a specific channel from a multichannel signal connection. The desired channel is specified by an argument or a float input, with indexing starting from 1 (0 or out-of-range values result in no output). Negative input values allow for indexing from the last channel.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pick~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/receiver/","title":"receiver","text":"<p>The <code>receiver</code> object functions similarly to Pure Data's <code>[receive]</code>, allowing it to listen for messages sent to up to two specified names. Its receive names can be dynamically set via an inlet, and it supports dollar sign expansion for flexible naming within abstractions, akin to <code>[dollsym]</code>. This object is useful for routing messages to both groups of objects and individual instances.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>receiver</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/relay/","title":"relay","text":"<p>The <code>relay</code> object routes incoming messages based on their first element. It compares the first element of a message against its creation arguments; if a match is found, the complete message is sent out. This object functions similarly to Pure Data's built-in <code>route</code> object.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>relay</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/route2/","title":"route2","text":"<p>The <code>route2</code> object is a message routing utility similar to <code>route</code>, directing incoming messages to specific outlets based on matching arguments (symbols or floats). A key distinction is that <code>route2</code> does not trim the matched argument from the output message, passing the entire message through. It is primarily used for conditional message flow control within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>route2</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/routeall/","title":"routeall","text":"<p>The <code>routeall</code> object routes incoming messages based on whether their first element (or a specified element) matches its arguments. Unlike <code>route</code>, it preserves the original message, sending it out the corresponding outlet. It also handles special conversions for single-element lists to bangs, floats, or symbols.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>routeall</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/router/","title":"router","text":"<p>The <code>router</code> object directs incoming messages from its left inlet to one of its multiple outlets. The specific outlet is determined by a float received in the right inlet. If the specified outlet number is out of range, the message is not output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>router</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/routetype/","title":"routetype","text":"<p>The <code>routetype</code> object routes incoming messages to different outlets based on their data type, such as bang, float, symbol, or list. It takes arguments to define the types it should route, with an additional outlet for unmatched messages. This object is useful for directing control flow based on the nature of the data received.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>routetype</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/route~/","title":"route~","text":"<p>The <code>route~</code> object, part of the zexy library, separates incoming audio signals from control messages. It outputs the audio signal through its first outlet and any non-signal messages through its second outlet, allowing for distinct processing paths for audio and control data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>route~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/segregate/","title":"segregate","text":"<p>The <code>segregate</code> object sorts incoming messages by their data type, sending them to dedicated outlets. It provides separate outlets for <code>bang</code>, <code>float</code>, <code>symbol</code>, <code>list</code>, and <code>pointer</code> messages, allowing for type-specific routing and processing within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>segregate</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/selector/","title":"selector","text":"<p>The <code>selector</code> object acts as a multiplexer, routing messages from one of its multiple input inlets to a single output. The specific inlet to be routed is determined by a float value received in the rightmost inlet. It can be configured with a variable number of inlets.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>selector</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/selector~/","title":"selector~","text":"<p><code>selector~</code> is an audio object that selects one of its multiple signal inputs to be passed to its output. The selection can be controlled by a signal, enabling sample-accurate switching between input channels. If no input is selected, it outputs silence.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>selector~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/select~/","title":"select~","text":"<p>The <code>select~</code> object acts as an audio signal switch, allowing you to choose one of several input signals to pass through to its output. It supports signals of varying channel sizes and performs an immediate, non-crossfading switch. The number of available inputs and the initially selected input can be configured via creation arguments.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>select~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/send2~/","title":"send2~","text":"<p>The <code>send2~</code> object transmits audio signals to a named receiver, similar to <code>send~</code>. Its unique feature is automatically adapting its internal channel count to match the number of input channels it receives. This makes it particularly useful for dynamically routing multichannel audio within a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>send2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/sender/","title":"sender","text":"<p>The <code>sender</code> object functions similarly to Pure Data's <code>send</code> object but offers enhanced capabilities. It can manage up to two distinct send names, allowing data to be directed to two different addresses. Additionally, <code>sender</code> supports dollar symbol expansion at load time, enabling dynamic routing within parent patches and abstractions.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sender</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/slice~/","title":"slice~","text":"<p>The <code>slice~</code> object splits a multichannel audio signal into two separate signals based on a specified slice point <code>n</code>. A positive <code>n</code> sends the first <code>n</code> channels to the left outlet and the remaining channels to the right, while a negative <code>n</code> sends the last <code>n</code> channels to the right outlet and the rest to the left. This allows for flexible routing and manipulation of individual channels within a multichannel signal.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>slice~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/split/","title":"split","text":"<p>The <code>split</code> object routes incoming float numbers to one of two outlets based on whether they fall within a defined minimum and maximum range. Numbers within or equal to the range are sent to the left outlet, while those outside the range are sent to the right. The range boundaries can be dynamically set via dedicated inlets.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>split</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/spray/","title":"spray","text":"<p>The <code>spray</code> object distributes incoming values to its multiple outlets. It can route individual elements or entire lists to specific outlets, determined by an index within the input list and an optional offset. A special \"list output\" mode allows sending a complete list to a single designated outlet.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>spray</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/spread/","title":"spread","text":"<p>The <code>spread</code> object compares the first float of an incoming list against its arguments to route the list to different outputs. It extends <code>moses</code> by supporting multiple arguments and offering an additional comparison mode. This object is useful for splitting data streams, such as routing MIDI notes from a <code>keyboard</code> to various synthesizers based on their values.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>spread</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/spread~/","title":"spread~","text":"<p>The <code>spread~</code> object distributes a variable number of input audio channels across a variable number of output channels using equal power panning. It allows for a 'spread' parameter to control how widely the input signals are panned across the outputs, enabling signals to be distributed to adjacent channels or narrowed to specific ones. This object is useful for creating spatial effects or managing multichannel audio routing.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>spread~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/swap2/","title":"swap2","text":"<p><code>swap2</code> is a utility object in Pure Data that reorders incoming messages. Similar to <code>swap</code>, it takes two messages and outputs them in reverse order, facilitating flexible data flow within a patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>swap2</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/universal/","title":"universal","text":"<p>The <code>universal</code> object sends messages to all instances of a specified Pure Data object type within the current patch, or optionally into subpatches. It facilitates sending any message to target objects, including GUI elements, by identifying them by their object name. A special <code>send</code> message format is required for objects named after Pure Data selectors like <code>float</code> or <code>symbol</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>universal</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/unjoin/","title":"unjoin","text":"<p>The <code>unjoin</code> object separates an incoming list into multiple sub-lists, each containing a specified number of elements. These sub-lists are then sent out through separate outlets, with any remaining elements routed to an additional \"extra\" outlet. This allows for flexible restructuring and routing of list data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>unjoin</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/unmerge/","title":"unmerge","text":"<p>The <code>unmerge</code> object separates an incoming message into groups of elements, sending each group to a dedicated outlet. It allows specifying the number of elements per group, with any remaining elements directed to an additional rightmost outlet. This object is primarily used for distributing message contents to different parts of a Pure Data patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>unmerge</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/unmerge~/","title":"unmerge~","text":"<p>The <code>unmerge~</code> object separates a multichannel signal into multiple single-channel or grouped-channel signals. It allows specifying the number of channels per output group, sending each group to a dedicated outlet and any remaining channels to an additional rightmost outlet. This is useful for processing individual or specific channel subsets from a larger multichannel stream.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>unmerge~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/voices/","title":"voices","text":"<p>The <code>voices</code> object manages voice allocation for polyphonic synthesizers, similar to <code>poly</code> but with enhanced features. It outputs a list containing the voice index, pitch, and velocity, and supports various retriggering modes and a configurable release time. This object is particularly useful when combined with <code>clone</code> to build complex polyphonic instruments.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>voices</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/xgate.mc~/","title":"xgate.mc~","text":"<p>The <code>xgate.mc~</code> object routes an input signal to a specific channel within a multichannel connection. It supports multichannel inputs, where the output channels are grouped based on the number of input channels and the configured number of outlets. The object also allows for crossfading between selected outputs.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>xgate.mc~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/xgate2.mc~/","title":"xgate2.mc~","text":"<p><code>xgate2.mc~</code> routes an input signal to a specified channel within a multichannel output, applying crossfading between adjacent channels. The crossfade behavior can be controlled by a 'spread' parameter, allowing for wider or narrower transitions. It supports up to 512 output channels and can operate in an indexed mode for channel selection.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>xgate2.mc~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/xgate2~/","title":"xgate2~","text":"<p>The <code>xgate2~</code> object routes a single input signal to multiple output channels with crossfading between adjacent channels. It uses a sine/cosine function for equal power crossfading, controlled by a 'spread' parameter that determines how widely the signal is distributed across channels. The output channel can be selected by a float or signal, and an indexed mode is available for direct channel number selection.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>xgate2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/xgate~/","title":"xgate~","text":"<p><code>xgate~</code> is a signal routing object that directs an input signal to one of multiple outputs. It supports multichannel signals and features equal power crossfading between selected outputs, with a configurable crossfade duration. The object also provides status reports from its right outlet, indicating when an output is deselected.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>xgate~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/xselect.mc~/","title":"xselect.mc~","text":"<p>The <code>xselect.mc~</code> object selects a specific channel from a multichannel audio input, supporting up to 512 channels. It features equal power crossfading between selected channels, with a configurable crossfade time. The number of output channels can be set using the <code>-n</code> flag or <code>n</code> message, which also groups input channels accordingly.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>xselect.mc~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/xselect2.mc~/","title":"xselect2.mc~","text":"<p>The <code>xselect2.mc~</code> object selects and crossfades between multiple input audio channels based on a signal-rate index or position. It supports indexed and circular modes for channel selection, and a 'spread' parameter controls the crossfade width. This allows for smooth transitions between adjacent channels using a sine/cosine function.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>xselect2.mc~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/xselect2~/","title":"xselect2~","text":"<p>The <code>xselect2~</code> object selects and crossfades between multiple signal inputs based on an input position and a spread parameter. It allows for flexible signal routing and blending across up to 512 channels, supporting both indexed and circular selection modes. The crossfading uses a Sine/Cosine function for equal power blending between adjacent channels.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>xselect2~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/routing/xselect~/","title":"xselect~","text":"<p>The <code>xselect~</code> object allows for seamless selection between multiple audio signal inputs, utilizing equal power crossfading to prevent clicks or abrupt transitions. It can handle up to 512 inputs and provides control over the crossfade duration. The right outlet reports the currently selected input and an \"off\" status, useful for controlling other objects like <code>switch~</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>xselect~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/samplers/buffer~/","title":"buffer~","text":"<p>The <code>buffer~</code> object stores and manipulates audio data in memory as a multichannel array, similar to Pd's <code>table</code> but with advanced file I/O. It can read and write various audio file formats (WAV, AIFF, CAF), supports up to 64 channels, and offers messages for filling, applying mathematical functions, and dynamic range adjustments. It serves as a core component for sample-based audio processing and playback.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>buffer~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/samplers/play.file~/","title":"play.file~","text":"<p>The <code>play.file~</code> object plays audio files from local storage or web links, supporting various formats like MP3, WAV, and FLAC. It functions similarly to <code>readsf~</code> but with expanded format and streaming capabilities. Users can control playback (start, stop, pause, loop) and specify the number of channels, making it suitable for flexible audio playback and streaming applications.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>play.file~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/samplers/player~/","title":"player~","text":"<p>The <code>player~</code> object is a versatile audio file player for Pure Data, built upon <code>sfload</code> and <code>tabplayer~</code>. It allows playback of sound files with extensive control over speed, direction, looping, and precise start/end points. <code>player~</code> automatically adjusts playback speed to match the file's sample rate with Pure Data's current sample rate, ensuring correct pitch and timing, and supports up to 64 channels.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>player~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/samplers/play~/","title":"play~","text":"<p>The <code>play~</code> object provides flexible audio playback from arrays, supporting variable speed (including backwards), looping with optional crossfading, and multi-channel output up to 64 channels. It can be controlled via messages for start/stop/pause and loop settings, or by a signal input for dynamic playback position, enabling effects like scrubbing or granular synthesis.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>play~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/samplers/residency_buffer~/","title":"residency_buffer~","text":"<p><code>residency_buffer~</code> is an audio object that manages a spectral sample buffer, similar to <code>residency~</code>. It allows for recording audio into this internal buffer and reports the required storage size. Users should avoid directly writing into the array managed by this object.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>residency_buffer~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/samplers/sample~/","title":"sample~","text":"<p><code>sample~</code> is a Pure Data object that acts as an audio buffer, allowing users to load sound files, record audio into it, and save its contents to various audio file formats (e.g., .wav, .aif, .caf). It supports multichannel audio, managing internal arrays for each channel, and provides messages for opening, saving, clearing, trimming, and normalizing samples.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sample~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/samplers/sfont.m~/","title":"sfont.m~","text":"<p><code>sfont.m~</code> is a wrapper module for the <code>sfont~</code> object, designed for playing sound fonts. It allows users to select different programs via a popup menu and load sound font files (e.g., <code>.sf3</code>) using a bang button. The module comes with a default sound font, \"GeneralUser_GS.sf3\", as part of the ELSE library.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sfont.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/sequencers/drum.seq/","title":"drum.seq","text":"<p>The <code>drum.seq</code> object provides a visual drum grid for creating and playing drum patterns. Users can activate cells to represent attacks, set track and slot values, and export patterns. It functions as a step sequencer, managing and outputting stored musical sequences.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>drum.seq</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/sequencers/impseq~/","title":"impseq~","text":"<p>The <code>impseq~</code> object generates a sequence of impulses, primarily used as rhythmic triggers. It outputs values from a user-defined list of floats, where a value of <code>0</code> acts as a rest. The sequence advances upon receiving a signal trigger or a <code>bang</code>, and can be set or navigated using <code>set</code> and <code>goto</code> messages.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>impseq~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/sequencers/list.seq/","title":"list.seq","text":"<p>The <code>list.seq</code> object sequences through elements of a provided list, outputting one element at a time upon receiving a <code>bang</code>. It supports jumping to specific indices with <code>goto</code> and can loop through the list when enabled. A final <code>bang</code> is sent when the sequence is complete.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>list.seq</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/sequencers/mtr/","title":"mtr","text":"<p>The <code>mtr</code> object records and plays back sequences of messages across multiple tracks. It allows for control over playback speed, looping, and initial delays, making it useful for sequencing and replaying complex control flows. It also supports saving and loading recorded tracks to and from files.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>mtr</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/sequencers/pattern/","title":"pattern","text":"<p>The <code>pattern</code> object is a rhythmic sequencer that defines musical patterns using note durations, which can be specified as floats or fractions (where <code>1</code> is a whole note) with negative values indicating rests. It allows for tempo control and can be started or stopped, outputting note events or indices. This object is ideal for generating complex rhythmic sequences and integrates well with other sequencing objects like <code>sequencer</code> or <code>score2</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>pattern</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/sequencers/phaseseq~/","title":"phaseseq~","text":"<p>The <code>phaseseq~</code> object generates impulses when an incoming phase signal crosses a predefined list of threshold values. It is designed for rhythmic or sequential triggering based on a continuous phase input, allowing for precise control over event timing. Users can set thresholds via a list, and it outputs both the impulses and the index of the crossed threshold.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>phaseseq~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/sequencers/score/","title":"score","text":"<p>The <code>score</code> object is a powerful sequencer and score playback tool for Pure Data, built upon the <code>text</code> object. It allows users to define musical scores with custom syntax for tempo changes, time signatures, bar divisions, and polyphonic note events. It outputs timing and event data, enabling complex musical control and synchronization.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>score</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/sequencers/score2/","title":"score2","text":"<p>The <code>score2</code> object functions as a versatile musical sequencer, interpreting text-based scores with advanced rhythmic notation including fractions, tuplets, and rests. It outputs event data (e.g., MIDI pitch) and corresponding durations, while also managing tempo changes and time signatures. Users can load, save, and edit scores via its interface.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>score2</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/sequencers/seq/","title":"seq","text":"<p>The <code>seq</code> object plays and records raw MIDI data streams, functioning as a MIDI sequencer. It can read from and write to both MIDI files and custom text files, offering control over playback speed and synchronization via <code>start</code> and <code>tick</code> messages. Additionally, it provides an editable window for sequence manipulation when clicked.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>seq</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/sequencers/seq8.m~/","title":"seq8.m~","text":"<p>The <code>seq8.m~</code> object is a simple 8-step sequencer that generates musical sequences. It outputs MIDI notes and impulses, allowing users to set pitches and trigger toggles for each step. Pitches can be defined using MIDI values, note names, or octaves, with support for quarter tones and MIDIcents.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>seq8.m~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/sequencers/sequencer/","title":"sequencer","text":"<p>The <code>sequencer</code> object outputs elements from a predefined sequence one by one when it receives a <code>bang</code>. It supports various sequence elements including individual values, chords (joined by <code>-</code>), rests (single <code>-</code>), and ties (<code>_</code>). The object can be controlled to set new sequences, clear existing ones, or jump to specific positions within the sequence.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sequencer</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/sequencers/sequencer~/","title":"sequencer~","text":"<p><code>sequencer~</code> outputs values from a predefined sequence of floats, triggered by a signal or a bang. It allows setting a new sequence dynamically and jumping to specific positions within the sequence. This object is useful for generating rhythmic or melodic patterns as audio signals.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>sequencer~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/spectral_processing/soundtouch~/","title":"soundtouch~","text":"<p><code>soundtouch~</code> provides time-stretching and  pitch-shifting using Olli Parviainen\u2019s SoundTouch library.  It allows changing the tempo of an audio signal without affecting its pitch, and vice versa. This makes it useful for musical and sound design applications where independent control of speed and pitch is needed.</p> <ul> <li> Download via Deken.</li> <li> Library developed mainly by Olli Parviainen.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/statistical_models/anal/","title":"anal","text":"<p>The <code>anal</code> object calculates and stores transition probabilities between sequences of numbers, primarily for implementing Markov Chains. It reports how many times a number pair has been received, outputting the previous number, current number, and their occurrence count. This is useful for generating less random-sounding sequences in algorithmic composition, often used as input for objects like <code>cyclone/prob</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>anal</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/statistical_models/commonality/","title":"commonality","text":"<p>The <code>commonality</code> object calculates the 'Pitch Commonality' between three or more specified pitches. It achieves this by computing the Pearson correlation coefficient between their respective Tone Salience arrays. This object is typically used in conjunction with real-time pitch analysis tools like <code>sigmund~</code>.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>pd-psycho</code> and install it. Then create an object with <code>declare -lib pd-psycho -path pd-psycho</code>. Finally, use <code>commonality</code> or any other object from <code>pd-psycho</code>.</p></li> <li> Library developed mainly by Alexandre Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/statistical_models/fluid.bufstats/","title":"fluid.bufstats","text":"<p>The <code>fluid.bufstats</code> object calculates various statistical descriptors (e.g., mean, standard deviation, skewness, kurtosis, pitch) from segments within an audio buffer. It can analyze these statistics, apply weightings, and filter outliers, enabling the sorting or further processing of audio segments based on their statistical properties. This is useful for detailed audio analysis and feature extraction.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.bufstats</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/statistical_models/fluid.stats/","title":"fluid.stats","text":"<p>The <code>fluid.stats</code> object calculates the rolling mean and sample standard deviation for multichannel control inputs over a specified window. It is primarily used for smoothing streams of data, such as audio descriptors like MFCCs, to provide more stable and meaningful analytical values over time.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.stats</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/statistical_models/histo/","title":"histo","text":"<p>The <code>histo</code> object records the frequency of received positive integers, creating a histogram. It outputs the input number and its current occurrence count. Users can query the occurrence count for a specific number or clear the stored history, making it useful for probabilistic choices based on past data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>histo</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/statistical_models/kalman/","title":"kalman","text":"<p>The <code>kalman</code> object implements a simple, linear, one-dimensional Kalman filter. It is used to filter noisy incoming data by estimating the mean and noise covariance, providing a more accurate and predictive output. The object can also analyze data to set initial conditions, improving efficiency by reducing the number of necessary iterations.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.</li> <li> Library developed mainly by Joel Matthys.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/statistical_models/markov/","title":"markov","text":"<p>The <code>markov</code> object generates sequences based on learned patterns, creating Markov chains of any order from floats, symbols, or lists. It allows users to feed new data, recreate the chain, and control the level of randomness through its order. The object also supports saving its internal chain data with the patch.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>markov</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/statistical_models/median/","title":"median","text":"<p>The <code>median</code> object calculates the median value of a given list of numbers. It takes a float list as its input and outputs a single float representing the calculated median. This object is useful for basic statistical analysis within Pure Data patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>median</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/statistical_models/prob/","title":"prob","text":"<p>The <code>prob</code> object generates a weighted series of random numbers based on a first-order Markov chain. It accepts lists of three numbers to define transitions between states and their associated probabilities, and a <code>bang</code> to trigger a new state output. The object can also store its internal probability matrix within the patch using the <code>embed</code> message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>prob</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/brown/","title":"brown","text":"<p>The <code>brown</code> object generates pseudo-random numbers following a bounded Brownian motion, producing a control signal that takes small, random steps within a defined range. It allows for reproducible sequences by setting a seed value, and its maximum step size can be controlled via arguments or messages. This object is useful for creating organic, fluctuating control data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>brown</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/brown~/","title":"brown~","text":"<p><code>brown~</code> generates brown noise, also known as Brownian or red noise, characterized by a 6dB/octave spectral rolloff, making it less hissy than white noise. It operates as a bounded random walk within -1 and 1, with a configurable maximum step size that influences its spectral characteristics. The object also supports seeding for reproducible noise sequences and can generate new random steps via signal input.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>brown~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/chance/","title":"chance","text":"<p>The <code>chance</code> object outputs a bang to one of its outlets based on a set of probabilities. These probabilities can be configured with a single float for two outlets (e.g., 50% chance for the left, 50% for the right) or a list of floats for multiple outlets. It supports seeding for reproducible random sequences, making it useful for introducing controlled randomness into patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>chance</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/crackle~/","title":"crackle~","text":"<p>The <code>crackle~</code> object generates a chaotic noise signal. It features a 'p' parameter, controllable by a float or signal between 0 and 1, which influences the chaotic function. The object also allows clearing its internal filter memory.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>crackle~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/decide/","title":"decide","text":"<p>The <code>decide</code> object randomly outputs either 0 or 1, acting as a simple random boolean generator. Its sequence of random outputs can be controlled by an optional seed value, allowing for reproducible random sequences.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>decide</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/disarrain~/","title":"disarrain~","text":"<p>The <code>disarrain~</code> object functions as a spectrum scrambler, reordering a specified number of frequency bins within an audio signal. It supports interpolation for smooth transitions between scrambled states and includes features for pattern management, allowing for dynamic and evolving spectral manipulation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>fftease</code> and install it. Then create an object with <code>declare -lib fftease -path fftease</code>. Finally, use <code>disarrain~</code> or any other object from <code>fftease</code>.</p></li> <li> Library developed mainly by Eric Lyon.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> Pd and Audio Programming in the 21st Century by Eric Lyon</p> <p>Link</p> </li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/drunk/","title":"drunk","text":"<p>The <code>drunk</code> object generates a \"drunk walk\" sequence of random numbers. It produces a float output within a specified maximum range (default 0-128) that differs from the previous number by a random value less than a given step size (default 2). It can be controlled by bangs, floats, or lists to set its current value, maximum, and step size, and its internal random number generator can be seeded.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>drunk</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/drunkard/","title":"drunkard","text":"<p>The <code>drunkard</code> object generates a sequence of pseudo-random numbers by simulating a random walk. It allows control over the step size, the probability of a positive step, and the minimum and maximum bounds of the output. This object is useful for creating unpredictable yet constrained numerical sequences for various applications.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>drunkard</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/drunkard~/","title":"drunkard~","text":"<p>The <code>drunkard~</code> object generates pseudo-random signal values within a defined step range, based on a \"drunkard's walk\" algorithm. It can be seeded for reproducible sequences and allows control over the step size, probability of positive steps, and output bounds. When values reach the set bounds, they wrap around.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>drunkard~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/dust~/","title":"dust~","text":"<p>The <code>dust~</code> object generates a signal of random positive impulses at random times, controlled by a <code>density</code> parameter. It functions as a pseudo-random number generator, allowing for reproducible sequences via a <code>seed</code> value. This object also supports multichannel operation, making it suitable for generating noise-like textures or sparse event streams.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>dust~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/gendyn~/","title":"gendyn~","text":"<p>The <code>gendyn~</code> object implements Dynamic Stochastic Synthesis, generating waveforms where each point's amplitude and frequency evolve via a random walk. Users can control parameters such as the number of waveform points, frequency range, step sizes, and the statistical distributions governing these random changes. This allows for a wide spectrum of sounds, from bright tones to noise, by manipulating interpolation and random walk characteristics.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gendyn~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/gray~/","title":"gray~","text":"<p>The <code>gray~</code> object generates multichannel noise based on a pseudo-random number generator that uses \"gray code\" (reflected binary code). This noise type emphasizes lower frequencies and has a high RMS level. Users can control the noise sequence by setting a seed value via the <code>seed</code> message or <code>-seed</code> flag, and specify the number of output channels using the <code>ch</code> message or <code>-ch</code>/<code>-mc</code> flags.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>gray~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/ikeda~/","title":"ikeda~","text":"<p><code>ikeda~</code> is a chaotic signal generator based on the Ikeda map, producing two outputs: <code>y1[n]</code> and <code>y2[n]</code>. It allows control over its rate, a 'u' parameter, and initial <code>y1[n-1]</code> and <code>y2[n-1]</code> values. This object generates a DC offset and is inherently unstable, often requiring external filtering and a 'clear' message to reset its state.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>ikeda~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/noish~/","title":"noish~","text":"<p>The <code>noish~</code> object generates bandlimited noise by drawing a random number every <code>n</code> samples and interpolating between these values. It functions as an audio signal source, providing a controllable noise output.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>noish~</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/pink~/","title":"pink~","text":"<p>The <code>pink~</code> object generates pink noise, characterized by constant power per octave and a -3dB/octave decrease in spectral power. It uses pseudo-random number generation, allowing users to set a seed via argument or message for reproducible or synchronized noise sequences. The \"pinkness\" can be adjusted by setting the number of octaves, where 1 octave produces white noise.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>pink~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/pix_noise/","title":"pix_noise","text":"<p>The <code>pix_noise</code> object generates a uniform noise image, with adjustable width and height. It can produce new noise images on demand via a <code>bang</code> message or continuously per frame using <code>auto</code>, and its randomness can be controlled with a <code>seed</code>. The output is always an RGBA image, though the internal generation can be set to RGBA, RGB, or GREY.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>pix_noise</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/rampnoise/","title":"rampnoise","text":"<p><code>rampnoise</code> is a control-rate pseudo-random noise generator that produces a ramp-like waveform. Its output ranges from 0 to 127, making it suitable for control signals. Users can set a seed to synchronize multiple <code>rampnoise</code> objects or generate repeatable sequences.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rampnoise</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/rand.dist/","title":"rand.dist","text":"<p><code>rand.dist</code> generates random numbers that follow a specified probability density function, provided as a Pure Data array (table). It can also output quantiles from the array based on a float input. The object allows setting a seed for reproducible random sequences and customizing the output range.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rand.dist</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/rand.f~/","title":"rand.f~","text":"<p>The <code>rand.f~</code> object generates pseudo-random floating-point values within a specified range. It is triggered by signal transitions (positive to negative or vice-versa) or a <code>bang</code> message. The object supports seeding to ensure reproducible sequences of random numbers.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rand.f~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/rand.i/","title":"rand.i","text":"<p>The <code>rand.i</code> object generates pseudo-random integer values within a specified range when triggered by a bang. It allows users to set a seed for reproducible sequences and can output a single value or a list of random numbers. This object is useful for introducing controlled randomness into Pure Data patches.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rand.i</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/rand.list/","title":"rand.list","text":"<p>The <code>rand.list</code> object randomly selects and outputs an element from a given list of floats. It can be initialized or updated with new lists, and its pseudo-random sequence can be made reproducible by setting a seed.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rand.list</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/rand.u/","title":"rand.u","text":"<p>The <code>rand.u</code> object generates a sequence of unique random integers within a specified range (0 to <code>size-1</code>). It ensures that each number in the sequence is output only once before repeating. A <code>bang</code> is sent from the right outlet once the entire sequence has been generated.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>rand.u</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/rand~/","title":"rand~","text":"<p>The <code>rand~</code> object generates an interpolated random noise signal, producing values between -1 and 1 at a specified frequency. It linearly interpolates between these random values, resulting in bandlimited noise. At low frequencies, <code>rand~</code> can be used to create random ramps for parameter control or glissandi.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>rand~</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/scramble/","title":"scramble","text":"<p>The <code>scramble</code> object randomly reorders the elements of an input message. It outputs the scrambled message through its middle outlet and the corresponding scrambled indexes as a list through its rightmost outlet. This object is useful for introducing controlled randomness into data sequences.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>scramble</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/stepnoise/","title":"stepnoise","text":"<p>The <code>stepnoise</code> object generates pseudo-random step noise at a control rate, outputting values between 0 and 127. Its frequency can be controlled, and it supports seeding for reproducible sequences.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>stepnoise</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/urn/","title":"urn","text":"<p>The <code>urn</code> object generates a sequence of unique random integers within a specified range (0 to n-1) without repetition. It outputs a new random number upon receiving a bang or float, and sends a bang from its right outlet once all numbers in the sequence have been generated. The object's size and random seed can be configured via creation arguments or messages.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>urn</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/stochastic/velvet~/","title":"velvet~","text":"<p>The <code>velvet~</code> object is a velvet noise generator that produces a signal of random positive or negative impulses at a specified frequency. It allows control over the polarity bias (chance of positive/negative impulses), time regularity (randomness of impulse timing), and amplitude irregularity (randomness of impulse amplitude). It supports multichannel output and seedable pseudo-random number generation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>velvet~</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/text/atoi/","title":"atoi","text":"<p>The <code>atoi</code> object converts an incoming symbol (string) into a numerical representation. It supports decimal, hexadecimal (prefixed with <code>0x</code>), and octal (prefixed with <code>0</code>) conversions. If the symbol cannot be converted into a number, it is outputted as a symbol.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>atoi</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/text/fluid.s2f/","title":"fluid.s2f","text":"<p>The <code>fluid.s2f</code> object converts a symbol (text string) that represents a floating-point number into its numerical float equivalent. It is useful for parsing numerical values from text-based inputs or messages where numbers are initially handled as symbols.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download here.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>flucoma</code> and install it. Then create an object with <code>declare -lib flucoma -path flucoma</code>. Finally, use <code>fluid.s2f</code> or any other object from <code>flucoma</code>.</p></li> <li> Library developed mainly by Pierre Alexandre Tremblay, Owen Green, Alex Harker, Gerard Roma, Ted Moore, Matt, Edouard Levasseur.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/text/format/","title":"format","text":"<p>The <code>format</code> object in Pure Data formats messages and symbols using C-style <code>printf</code> specifiers (e.g., <code>%d</code>, <code>%f</code>, <code>%s</code>). It creates inlets for each variable in the format string, allowing dynamic message construction from various input types like floats and symbols. This object is similar to <code>makefilename</code> but supports multiple variables.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>format</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/text/fromsymbol/","title":"fromsymbol","text":"<p>The <code>fromsymbol</code> object converts a Pure Data symbol message into other message types, such as bangs, floats, or lists. It removes the \"symbol\" selector and interprets the symbol's content based on its format. Users can define a <code>separator</code> character to split complex symbols into multiple elements for conversion.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>fromsymbol</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/text/makesymbol/","title":"makesymbol","text":"<p>The <code>makesymbol</code> object converts an incoming list (up to 10 members) into a single symbol. It functions similarly to <code>makefilename</code> but for general symbol creation, allowing for formatting using <code>%s</code> tags in its right inlet. The output is always a symbol, useful for dynamic symbol generation.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>makesymbol</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/text/message/","title":"message","text":"<p>The <code>message</code> object stores and outputs any type of message, similar to a standard message box. It can parse messages containing commas (splitting them) and semicolons (creating new messages), with backslashes used for escaping these characters. A <code>bang</code> or a click on the object will output the currently stored message.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>message</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/text/regex-help/","title":"regex-help","text":"<p>The <code>regex</code> object checks if an incoming symbol matches a specified regular expression. It can be configured for case sensitivity and outputs a float indicating a match, along with a list that likely contains matched groups or substrings.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>regex-help</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/text/regex/","title":"regex","text":"<p>The <code>regex</code> object checks if an input symbol matches a given regular expression. It outputs a float indicating a match and a list containing details about the match, such as its ID, start, and end positions within the symbol. This object is useful for pattern matching and parsing text data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>zexy</code> and install it. Then create an object with <code>declare -lib zexy -path zexy</code>. Finally, use <code>regex</code> or any other object from <code>zexy</code>.</p></li> <li> Library developed mainly by Johannes M. Zm\u00f6lnig.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/text/separate/","title":"separate","text":"<p>The <code>separate</code> object splits an input symbol (string) into a list of elements based on a specified separator character. By default, it uses a space as the separator, but this can be changed by sending a symbol to its right inlet. This utility is useful for parsing text data, such as file paths or other delimited strings, into manageable lists.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>separate</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/text/spell/","title":"spell","text":"<p>The <code>spell</code> object converts incoming messages, including digits and characters, into their corresponding UTF-8 (Unicode) integer values. It can pad the output to a minimum size using a specified fill character. This object is useful for manipulating text as numerical data within Pure Data.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>spell</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/text/sprintf/","title":"sprintf","text":"<p>The <code>sprintf</code> object formats messages using C-style <code>printf</code> syntax, where each '%' format specifier (e.g., <code>%f</code> for float, <code>%s</code> for string) creates a corresponding inlet. It allows for flexible message construction and type conversion. An optional <code>symout</code> argument can output the entire formatted message as a single symbol, useful for handling special characters.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>cyclone</code> and install it. Then create an object with <code>declare -lib cyclone -path cyclone</code>. Finally, use <code>sprintf</code> or any other object from <code>cyclone</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/text/unite/","title":"unite","text":"<p>The <code>unite</code> object concatenates incoming messages, including lists, into a single symbol message. It allows specifying a custom separator, with a space as the default. This object is primarily used for formatting and combining various data types into a unified text string.</p> <p>AI Generated</p> <p>This content was generated with the assistance of AI. If you notice any errors, please report them or submit a fix using Submit. Check the prompt used here.</p> <ul> <li> Download via Deken.  <p>Open <code>Pd</code> and go to <code>Tools</code><code>Find Externals</code>. Search for <code>else</code> and install it. Then create an object with <code>declare -lib else -path else</code>. Finally, use <code>unite</code> or any other object from <code>else</code>.</p></li> <li> Library developed mainly by Alexandre Torres Porres.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Similar <ul></ul> Comments Contributors"},{"location":"objects/vst2_vst3/vstplugin~/","title":"vstplugin~","text":"<p><code>vstplugin~</code> is part of vstplugin v0.6.0, a project that enables the use of VST2 and VST3 plugins in Pure Data (Pd) on Windows, macOS, and Linux. It supports audio, MIDI, and instrument plugins; parameter automation (sample accurate for VST3); multi-bus input/output; native or generic GUIs; preset management; MIDI I/O; tempo and transport sync; offline rendering; and plugin discovery in standard or custom paths. Additional features include bit-bridging, sandboxing, Windows plugin support on Linux via Wine, and optional multithreaded processing.</p> <ul> <li> Download via Deken.</li> <li> Library developed mainly by Christof Ressi.</li> <li> Report Bugs/Errors here!</li> <li> Available for  .</li> </ul> Articles <ul> <li> <p> [vstplugin~] \u2013 A Pd external for hosting VST plugins by Christof Ressi</p> <p>Link</p> </li> </ul> Videos Similar <ul></ul> Comments Contributors"},{"location":"pieces/","title":"Pieces","text":"<p>In this section we list all the pieces submit for the project. Note that, if there is some great object is missing, please submit it using Submit form. It is very simple and easy. </p> Random Pieces"},{"location":"pieces/generative_music/4_pianeti/","title":"4 pianeti","text":"<p>Four algorithmic compositions made in pure data. Visuals in GEM. Based on the book Harmonices Mundi by Johannes Kepler.</p> <ul> <li>Composer(s): Manuel Tricarico</li> <li>Year: 2018</li> </ul> Videos Comments"},{"location":"pieces/live-electronics/c%C3%A2nticos_de_sil%C3%ADcio_i/","title":"C\u00e2nticos de Sil\u00edcio I","text":"<p>C\u00e2nticos de Sil\u00edcio I emerges as a brief yet focused experiment for soprano saxophone, recorded by S\u00e9rgio Monteiro Freire. Beyond its technical aim of testing the OScofo system\u2014challenging the algorithm with trills and intervals that dissolve spectral ambiguities\u2014it unfolds as a dialogue between sound and technology. The piece reveals the fluid interplay of composition and innovation, where real-time accompaniment becomes not just a tool, but an active partner in the creative act.</p> <ul> <li>Composer(s): Charles K. Neimog</li> <li>Performer(s): S\u00e9rgio Monteiro Freire</li> <li>Year: 2025</li> </ul> Articles <ul> <li> <p> A T\u00e9cnica como Linguagem Composicional: Perspectivas filos\u00f3ficas e pr\u00e1ticas na m\u00fasica computacional brasileira by Charles K. Neimog</p> <p>Link</p> </li> </ul> Videos Comments"},{"location":"pieces/live-electronics/eco/","title":"Eco","text":"<p>Eco explores the relationship between music and technology, reflecting on the potential and limitations of compositional and technical approaches in Brazil. Premiered by Ensemble M\u00f3bile\u2014Fabr\u00edcio Ribeiro (flute), S\u00e9rgio Monteiro Freire (saxophone), Eric Moreira (guitar), and M\u00e1rcio Steuernagel (conductor)\u2014the piece was featured in the 40th Curitiba Workshop (2022\u20132023).</p> <p>The work employs a feedback system mediated by a continuously updated Fourier Transform, converting acoustic input into musical scores. Musicians adjust their tuning in real time to approximate microtonal pitches derived from the analysis, generating complex polyrhythmic textures and consonant chords inspired by Harry Partch\u2019s Just Intonation.</p> <p>Eco integrates a local server, FFT processing on each performer\u2019s device, the Yin pitch-detection algorithm, and automated score generation using Python\u2019s neoscore via py4pd. Despite technical challenges during rehearsals and performance, the piece prompted significant reflection on the practical implementation of advanced algorithmic composition, highlighting the need for extended preparation and robust testing.</p> <ul> <li>Composer(s): Charles K. Neimog</li> <li>Performer(s): Fabr\u00edcio Ribeiro; S\u00e9rgio Monteiro Freire;  Eric Moreira; Shante Cabral</li> <li>Year: 2022</li> </ul> Articles <ul> <li> <p> A t\u00e9cnica como linguagem composicional: perspectivas filos\u00f3ficas e pr\u00e1ticas na m\u00fasica computacional brasileira by Charles K. Neimog</p> <p>Link</p> </li> </ul> Videos Comments"},{"location":"prompts/helppatchai/","title":"Helppatchai","text":""},{"location":"prompts/helppatchai/#objects-from-help-patches","title":"Objects from Help Patches","text":"<pre><code>You are both a technical writer and a classifier.\n\nTask:\n    1) Produce a concise, clear English description (2\u20133 sentences max) of the Pure Data object described by the following help patch. Focus on what the object does, its purpose, and key usage hints if they are evident. Keep it simple and practical.\n    2) Score ALL categories (listed below) with a confidence between 0.0 and 1.0 for how well the object's functionality fits each category.\n\nVery important output rules:\n- Return ONLY a valid JSON object (no markdown and no extra text).\n- The JSON must have exactly these top-level keys:\n  - \"description\": string\n  - \"scores\": object mapping each category name to a float (0.0\u20131.0)\n- The \"scores\" object MUST include EVERY category key exactly as provided (same spelling).\n- Values in \"scores\" MUST be numbers (floats). If a category does not apply, use 0.0.\n- Do not add or remove keys. Do not include comments.\n- No trailing commas.\n\nCategories (use as keys in \"scores\", exactly):\n{CATEGORIES_JSON}\n\nObject title:\n{TITLE}\n\nHelp Patch (.pd text):\n`\n{PATCH_TEXT}\n`\n</code></pre>"},{"location":"web/pd4web/","title":"pd4web","text":"<p><code>pd4web</code> enables PureData functionality directly in web browsers. Not just the vanilla Pd, but Pd with all the externals!</p> Contributors Key Features <ul> <li>Streamlined Development: Create fully online audio applications with a visual approach.</li> <li>Easy Access: Performers can access compositions without complex PureData setups or library dependencies.</li> <li>Live Electronic Music Preservation: Explore the potential of WebAudioApps to maintain the integrity of live electronic works. <code>pd4web</code> will download and make a repository for all code you need to run your music.</li> </ul> <ul> <li> Download here.</li> <li> Developed by Charles K. Neimog.</li> <li> Report Bugs/Errors here!</li> <li> Available for .</li> </ul> Music"},{"location":"web/pdwebparty/","title":"pdwebparty","text":"<p><code>PdWebParty</code> is an open-source web application that allows Pd users to run their patches on any device through a web browser, making the patches easily shareable with a web link.</p> Contributors <ul> <li> Download here.</li> <li> Developed by Zack Lee.</li> <li> Report Bugs/Errors here!</li> <li> Available for .</li> </ul> Videos"},{"location":"web/pdxr/","title":"PdXR","text":"<p><code>PdXR</code> is an open-source implementation of PureData for multiuser Metaverse environments. Use a Pd patch with your VR or AR devices together with other people in a shared virtual environment.</p> <ul> <li> Download here.</li> <li> Report Bugs/Errors here!</li> <li> Available for .</li> </ul>"},{"location":"web/purrdata/","title":"purr-data","text":"<p><code>Purr Data</code> is the latest (2.x) branch of Ivica Ico Bukvic's Pd-l2ork. Pd-l2ork in turn was a fork of Hans-Christoph Steiner's Pd-extended, which has been the longest-running (and arguably the most popular) variant of Miller Puckette's Pd. Pd a.k.a. Pure Data, the common basis of all these variants, is Miller Puckette's interactive and graphical computer music and multimedia environment. Pd is also the premier open-source alternative to Cycling74's well-known commercial Max program (whose original version was also developed by Miller Puckette when he was at IRCAM in the 1980s). There are a few other popular and very capable applications in the realm of computer music and media art, most notably Csound and SuperCollider. But Max and Pd's special appeal is that you work in an intuitive graphical \"patching\" environment which allows you to put together advanced real-time signal processing applications without having to learn a \"real\" programming language.</p> <p>You can use the web version here</p> Contributors <ul> <li> Download here.</li> <li> Report Bugs/Errors here!</li> <li> Available for .</li> </ul>"}]}